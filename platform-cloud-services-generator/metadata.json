{"strVersion":"3.0.0.feature-v3-nodejs-deploy-140","deployables":{"authentications":[{"description":{"name":"Delegating authentication","description":"This authentication delegates authentication to an external auth provider.<br>When a zetapush client handshakes with a delegated authentication, the 'token' field given by the client is sent to the configured remote server as part of the URL.<br>The response must be in JSON format. Each key of the response will be considered a user information field name.<br>The handshake from the server will return the primary key in a field named 'login' (regardless of the actual key name you might have chosen)","deployableId":"delegating","options":[{"name":"delegating_url","shortDesc":"URL template","description":"URL template. Parameter {0} is the token. Example http://myserver.com/check?token={0}","type":"STRING"},{"name":"delegating_uniqueKeyName","shortDesc":"Primary key","description":"user field considered as the primary key. The response from the remote server must contain this key. Modifying this value is not supported (it will lead to unpredictable results)","defaultValue":"login","type":"STRING"},{"name":"delegating_mappingFunction","shortDesc":"Mapping function","description":"custom mapping function to map inbound data to your format. takes one parameter (a map of input fields) and must return a map of translated fields. The mapping is applied before looking for the primary key. The name is macroService:functionName. Example : 'macro_0:myFunction'","defaultValue":"","type":"STRING"},{"name":"delegating_cache_duration","shortDesc":"Cache duration","description":"Cache duration(minutes). 30 days by default","defaultValue":"43200","type":"LONG"},{"name":"delegating_down_ok","shortDesc":"Need auth server","description":"Whether the user should be logged without checks when the auth server is down","defaultValue":"false","type":"BOOLEAN"}],"type":"AUTHENTICATION"},"authents":[{"type":"BU_ID.depId1.delegating"}],"services":[{"http":false,"name":"Delegating","description":"End-user API for the delegating authentication","grantSyntax":"","notes":["Provisioning verbs."],"apis":[{"channel":"/service/BU_ID/depId1/userInfo","description":"Get user info","verb":"userInfo","notes":["Retrieves cached user info or (if missing) eagerly creates a zetapush key for the user.","The returned field 'zetapushKey' is a unique and permanent ID identifying a user in a sandbox."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ExistingUser","resolved":{"types":{"ExistingUser":{"type":"ExistingUser","javaClass":"com.zetapush.common.messages.simple.ExistingUser","fields":[{"type":"String","name":"key","description":"User key within the realm","required":true}],"anyField":false}}}},"responseInfo":{"type":"Map[String,Object]","resolved":{"types":{}},"scope":"SESSION","scopeDetail":""},"errors":[]}],"notifs":[]}],"controllers":[]},{"description":{"name":"Local authentication","description":"Zetapush local authentication. The configurer can choose the primary key and mandatory user fields for account creation. The field 'zetapushKey' is generated by the server and MUST not be used : it contains the unique key of the user inside a sandbox (it can be obtained from inside a macro with the <b>__userKey</b> pseudo-constant)","deployableId":"simple","options":[{"name":"simpleauth_uniqueKeyName","shortDesc":"Primary key","description":"user field considered as the primary key","defaultValue":"login","type":"STRING"},{"name":"simpleauth_mandatoryFields","shortDesc":"Mandatory user fields","description":"mandatory user fields, separated by commas. primary key and password are always mandatory, you don't need to add them here","defaultValue":"password","type":"STRING"},{"name":"simpleauth_authTokenExpiry","shortDesc":"Token validity","description":"Authentication token expiration delay (minutes)","defaultValue":"43200","type":"LONG"},{"name":"simpleauth_resetTokenExpiry","shortDesc":"Reset token validity","description":"Reset password token expiration delay (minutes)","defaultValue":"1440","type":"LONG"},{"name":"simpleauth_publicFields","shortDesc":"Public fields","description":"public user fields, separated by commas. these fields will be publicly available","defaultValue":"login","type":"STRING"}],"type":"AUTHENTICATION"},"authents":[{"type":"BU_ID.depId0.simple"}],"services":[{"http":false,"name":"Simple","description":"End-user API for the simple local authentication","grantSyntax":"","notes":["These API verbs allow end-users to manage their account(s)."],"apis":[{"channel":"/service/BU_ID/depId0/changePassword","description":"Changes a password","verb":"changePassword","notes":["Changes a user password for this authentication realm.","The user can be either explicit, implicit (one of the current user's accounts) or deduced from the token.","You should provide at least one of 'key' and 'token'. If you do not, the server will try and find any key for the current user.","The change is effective immediately. However, already logged in users might stay connected.","The password and token fields are always null in the output."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ChangePasswordRequest","resolved":{"types":{"ChangePasswordRequest":{"type":"ChangePasswordRequest","javaClass":"com.zetapush.common.messages.simple.ChangePasswordRequest","fields":[{"type":"String","name":"token","description":"Server-provided temporary token to reset a password"},{"type":"String","name":"key","description":"account key in the realm. (configured 'unique key' used for authentication). \n","serverGenerated":false},{"type":"String","name":"password","description":"New password","required":true}],"anyField":false}}}},"responseInfo":{"type":"ChangePasswordRequest","resolved":{"types":{"ChangePasswordRequest":{"type":"ChangePasswordRequest","javaClass":"com.zetapush.common.messages.simple.ChangePasswordRequest","fields":[{"type":"String","name":"key","description":"account key in the realm. (configured 'unique key' used for authentication)"},{"type":"String","name":"password","description":"New password","required":true},{"type":"String","name":"token","description":"Server-provided temporary token to reset a password"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_ACCOUNT","desc":"The given account key in this realm (login) does not match an existing account."}]},{"channel":"/service/BU_ID/depId0/checkPassword","description":"Checks the password for the given account","verb":"checkPassword","notes":[],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CheckPasswordRequest","resolved":{"types":{"CheckPasswordRequest":{"type":"CheckPasswordRequest","javaClass":"com.zetapush.common.messages.simple.CheckPasswordRequest","fields":[{"type":"String","name":"key","description":"account key in the realm. (configured 'unique key' used for authentication). \n","required":true,"serverGenerated":false},{"type":"String","name":"password","description":"Password to be checked","required":true}],"anyField":false}}}},"responseInfo":{"type":"CheckPasswordResult","resolved":{"types":{"CheckPasswordResult":{"type":"CheckPasswordResult","javaClass":"com.zetapush.common.messages.simple.CheckPasswordResult","fields":[{"type":"String","name":"key","description":"account key in the realm. (configured 'unique key' used for authentication)"},{"type":"boolean","name":"matches","description":"Whether the password matches"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId0/checkUser","description":"Checks some account's existence","verb":"checkUser","notes":["Checks whether the given account already exists in this 'simple' authentication realm.","This verb returns all the information about the user, including non public fields."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ExistenceCheck","resolved":{"types":{"ExistenceCheck":{"type":"ExistenceCheck","javaClass":"com.zetapush.common.messages.simple.ExistenceCheck","fields":[{"type":"String","name":"key","description":"User key within the realm","required":true},{"type":"boolean","name":"softFail","description":"Whether to fail is the user does not exist. When true, fails silently."}],"anyField":false}}}},"responseInfo":{"type":"Map[String,Object]","resolved":{"types":{}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_ACCOUNT","desc":"The given account key in this realm (login) does not match an existing account."}]},{"channel":"/service/BU_ID/depId0/createUser","description":"Creates an account","verb":"createUser","notes":["Creates a new account in this 'simple' authentication realm.","Returns a map of account fields, including a field named <i>zetapushKey</i> containing the global user key of the user (value of the <b>__userKey</b> pseudo-constant when this new account will be used)"],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"BasicAuthenticatedUser","resolved":{"types":{"BasicAuthenticatedUser":{"type":"BasicAuthenticatedUser","javaClass":"com.zetapush.str.authentication.BasicAuthenticatedUser","fields":[{"type":"Map[String,Object]","name":"additionalProperties","description":"You can pass any number of arbitrary properties in the enclosing object (there is no field actually named additionalProperties). "}],"anyField":true}}}},"responseInfo":{"type":"Map[String,Object]","resolved":{"types":{}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"MISSING_MANDATORY_FIELD","desc":"Happens when the caller does not fill a mandatory field (defined by the developer)."},{"code":"ACCOUNT_EXISTS","desc":"Happens when the user account already exists with the given unique account key (login)."},{"code":"KEY_BADCHAR","desc":"The given unique account key contains the forbidden character ':'."}]},{"channel":"/service/BU_ID/depId0/credentials","description":"Lists an account's credentials","verb":"credentials","notes":["Returns the list of account credentials in this service for the asking user.","Might return an empty list."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ImpersonatedTraceableRequest","resolved":{"types":{"ImpersonatedTraceableRequest":{"type":"ImpersonatedTraceableRequest","javaClass":"com.zetapush.common.messages.ImpersonatedTraceableRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"AllCredentials","resolved":{"types":{"AllCredentials":{"type":"AllCredentials","javaClass":"com.zetapush.common.messages.simple.AllCredentials","fields":[{"type":"List[Map[String,Object]]","name":"credentials","description":"List of account information for the asking user. empty if the user does not have credentials in the service. One item in this list is a map of account fields."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId0/deleteUser","description":"Deletes an account","verb":"deleteUser","notes":["Deletes an existing account in this 'simple' authentication realm."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ExistenceCheck","resolved":{"types":{"ExistenceCheck":{"type":"ExistenceCheck","javaClass":"com.zetapush.common.messages.simple.ExistenceCheck","fields":[{"type":"String","name":"key","description":"User key within the realm","required":true},{"type":"boolean","name":"softFail","description":"Whether to fail is the user does not exist. When true, fails silently."}],"anyField":false}}}},"responseInfo":{"type":"ExistenceCheck","resolved":{"types":{"ExistenceCheck":{"type":"ExistenceCheck","javaClass":"com.zetapush.common.messages.simple.ExistenceCheck","fields":[{"type":"String","name":"key","description":"User key within the realm","required":true},{"type":"boolean","name":"softFail","description":"Whether to fail is the user does not exist. When true, fails silently."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_ACCOUNT","desc":"The given account key in this realm (login) does not match an existing account."}]},{"channel":"/service/BU_ID/depId0/requestReset","description":"Requests a password reset","verb":"requestReset","notes":["Requests a password reset for the given unique account key.","The account key must exist and must be given, as it cannot obviously be deduced from the currently logged in user.","The returned token needs to be sent to the intended recipient only. The typical use case is to define a macro that requests a reset, generates a email template and emails the user. The macro can then be safely called by a weakly authenticated user.","Requesting a reset does not invalidate the password.","Requesting a reset again invalidates previous reset requests (only the last token is usable)"],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ResetRequest","resolved":{"types":{"ResetRequest":{"type":"ResetRequest","javaClass":"com.zetapush.common.messages.simple.ResetRequest","fields":[{"type":"String","name":"key","description":"account key in the realm. (configured 'unique key' used for authentication). \n","required":true,"serverGenerated":false}],"anyField":false}}}},"responseInfo":{"type":"ResetInfo","resolved":{"types":{"ResetInfo":{"type":"ResetInfo","javaClass":"com.zetapush.common.messages.simple.ResetInfo","fields":[{"type":"String","name":"key","description":"account key in the realm. (configured 'unique key' used for authentication)"},{"type":"String","name":"token","description":"Server-provided temporary token to reset a password"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_ACCOUNT","desc":"The given account key in this realm (login) does not match an existing account."}]},{"channel":"/service/BU_ID/depId0/updateKey","description":"Updates an account key","verb":"updateKey","notes":["Updates an existing account primary key (login, NOT <b>__userKey</b>) in this 'simple' authentication realm.","The updated account MUST belong to the user making the call.","The configured login field MUST be given, as a user (identified by his zetapush userKey) might possess several accounts.","Returns a map of account fields"],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"UserLoginchange","resolved":{"types":{"UserLoginchange":{"type":"UserLoginchange","javaClass":"com.zetapush.common.messages.simple.UserLoginchange","fields":[{"type":"String","name":"newKey","description":"New account key within this realm. Must not be already in use.","required":true},{"type":"String","name":"oldKey","description":"Existing account key within this realm (login). Will be free for use upon successful completion.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"responseInfo":{"type":"Map[String,Object]","resolved":{"types":{}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"ACCOUNT_EXISTS","desc":"Happens when the user account already exists with the given unique account key (login)."},{"code":"NO_ACCOUNT","desc":"The given account key in this realm (login) does not match an existing account."}]},{"channel":"/service/BU_ID/depId0/updateUser","description":"Updates an account","verb":"updateUser","notes":["Updates an existing account in this 'simple' authentication realm.","The updated account MUST belong to the user making the call.","The configured login field MUST be given, as a user (identified by his zetapush userKey) might possess several accounts.","Returns a map of account fields"],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"BasicAuthenticatedUser","resolved":{"types":{"BasicAuthenticatedUser":{"type":"BasicAuthenticatedUser","javaClass":"com.zetapush.str.authentication.BasicAuthenticatedUser","fields":[{"type":"Map[String,Object]","name":"additionalProperties","description":"You can pass any number of arbitrary properties in the enclosing object (there is no field actually named additionalProperties). "}],"anyField":true}}}},"responseInfo":{"type":"Map[String,Object]","resolved":{"types":{}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_ACCOUNT","desc":"The given account key in this realm (login) does not match an existing account."}]}],"notifs":[]}],"controllers":[{"description":"Administrative API for the simple local authentication","notes":["These API verbs allow the developer to manage user accounts."],"apis":[{"shortDesc":"Creates a user","method":"POST","path":"BU_ID/depId0/memauth/createUser","verb":"/memauth/createUser","notes":["Creates a new user in this 'simple' authentication realm."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"BasicUserCreation","resolved":{"types":{"BasicUserCreation":{"type":"BasicUserCreation","javaClass":"com.zetapush.common.messages.simple.BasicUserCreation","fields":[{"type":"Map[String,Object]","name":"additionalProperties","description":"You can pass any number of arbitrary properties in the enclosing object (there is no field actually named additionalProperties)."},{"type":"Idempotence","name":"idempotence","description":"Specify the behavior when the user already exists. The default value is IGNORE_IDENTICAL"}],"anyField":true},"Idempotence":{"type":"Idempotence","javaClass":"com.zetapush.common.messages.Idempotence","enumValues":[{"name":"IGNORE_DIFFERENT","description":"The operation will not fail if the entity already exists in a different and compatible form."},{"name":"FAIL_IF_EXISTING","description":"The operation will fail if the entity already exists"},{"name":"IGNORE_IDENTICAL","description":"The operation will not fail if the entity already exists in a similar form."}],"anyField":false}}}},"responseBody":{"type":"BasicAuthenticatedUser","resolved":{"types":{"BasicAuthenticatedUser":{"type":"BasicAuthenticatedUser","javaClass":"com.zetapush.str.authentication.BasicAuthenticatedUser","fields":[{"type":"Map[String,Object]","name":"additionalProperties","description":"You can pass any number of arbitrary properties in the enclosing object (there is no field actually named additionalProperties). "}],"anyField":true}}}}},{"shortDesc":"Deletes a user","method":"POST","path":"BU_ID/depId0/memauth/deleteUser","verb":"/memauth/deleteUser","notes":["Deletes a user by locally unique key in this 'simple' authentication realm."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"ExistenceCheck","resolved":{"types":{"ExistenceCheck":{"type":"ExistenceCheck","javaClass":"com.zetapush.common.messages.simple.ExistenceCheck","fields":[{"type":"String","name":"key","description":"User key within the realm","required":true},{"type":"boolean","name":"softFail","description":"Whether to fail is the user does not exist. When true, fails silently."}],"anyField":false}}}},"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"Lists users","method":"GET","path":"BU_ID/depId0/memauth/listUsers","verb":"/memauth/listUsers","notes":["Returns a paginated list of the users present in this 'simple' authentication realm."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[{"name":"zetapushKey","defaultValue":"false","desc":"no description","required":true}],"scriptable":false,"responseBody":{"type":"PageContent[BasicAuthenticatedUser]","resolved":{"types":{"BasicAuthenticatedUser":{"type":"BasicAuthenticatedUser","javaClass":"com.zetapush.str.authentication.BasicAuthenticatedUser","fields":[{"type":"Map[String,Object]","name":"additionalProperties","description":"You can pass any number of arbitrary properties in the enclosing object (there is no field actually named additionalProperties). "}],"anyField":true},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}}}]}]},{"description":{"name":"Weak authentication","description":"The weak authentication allows for anonymous authentication of devices. Such devices can display a qrcode to allow regular users to take control of them","deployableId":"weak","options":[{"name":"weak_qrcode_format","shortDesc":"QrCode template","description":"qrcode generation template. Parameter {0} is the weak token","defaultValue":"{0}","type":"STRING"}],"type":"AUTHENTICATION"},"authents":[{"type":"BU_ID.depId2.weak"}],"services":[{"http":false,"name":"Weak","description":"User API for weak devices control","grantSyntax":"","notes":["User API for control and release of weakly authenticated user sessions."],"apis":[{"channel":"/service/BU_ID/depId2/control","description":"Controls a session","verb":"control","notes":["Takes control of a weak user session, identified by the given public token.","The public token has been previously made available by the controlled device, for example by displaying a QRCode.","Upon control notification, the client SDK of the controlled session is expected to re-handshake."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"UserControlRequest","resolved":{"types":{"UserControlRequest":{"type":"UserControlRequest","javaClass":"com.zetapush.common.messages.weak.UserControlRequest","fields":[{"type":"boolean","name":"fullRights","description":"Whether the controlled user/device fully impersonates its controller"},{"type":"String","name":"publicToken","description":"Public token of the weak you want to control"}],"anyField":false}}}},"responseInfo":{"type":"UserControlStatus","resolved":{"types":{"UserControlStatus":{"type":"UserControlStatus","javaClass":"com.zetapush.common.messages.weak.UserControlStatus","fields":[{"type":"String","name":"controller","description":"User key of the controlling user"},{"type":"boolean","name":"fullRights","description":"Whether the controlled user/device fully impersonates its controller"},{"type":"String","name":"publicToken","description":"Public token of the weak you want to control"}],"anyField":false}}},"scope":"GROUP","scopeDetail":"the controlled user and the controlling user"},"errors":[{"code":"TOKEN_ALREADY_CONTROLLED","desc":"When trying to control a device already controlled."}]},{"channel":"/service/BU_ID/depId2/getToken","description":"Returns the current token","verb":"getToken","notes":["Returns your current session's private token. The token field may be null, if you did not log in with this authentication.","The token can be used to log in as the same weak user another time."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"responseInfo":{"type":"UserToken","resolved":{"types":{"UserToken":{"type":"UserToken","javaClass":"com.zetapush.common.messages.weak.UserToken","fields":[{"type":"String","name":"publicToken","description":"public token"},{"type":"String","name":"token","description":"private token"},{"type":"String","name":"userKey","description":"userKey for this user"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId2/provision","description":"Provisions accounts","verb":"provision","notes":["Provisions an arbitrary number of accounts.","The maximum number of accounts that you can create in one single call is configured per server."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ProvisioningRequest","resolved":{"types":{"ProvisioningRequest":{"type":"ProvisioningRequest","javaClass":"com.zetapush.common.messages.weak.ProvisioningRequest","fields":[{"type":"int","name":"n","description":"Number of accounts to create"}],"anyField":false}}}},"responseInfo":{"type":"ProvisioningResult","resolved":{"types":{"ProvisioningResult":{"type":"ProvisioningResult","javaClass":"com.zetapush.common.messages.weak.ProvisioningResult","fields":[{"type":"List[UserToken]","name":"users","description":"List of provisioned tokens"}],"anyField":false},"UserToken":{"type":"UserToken","javaClass":"com.zetapush.common.messages.weak.UserToken","fields":[{"type":"String","name":"publicToken","description":"public token"},{"type":"String","name":"token","description":"private token"},{"type":"String","name":"userKey","description":"userKey for this user"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"CAPACITY_EXCEEDED","desc":"When trying to allocate more accounts than the server maximum."}]},{"channel":"/service/BU_ID/depId2/release","description":"Releases a session","verb":"release","notes":["Releases control of a weak user session, identified by the given public token.","The weak user session must have been previously controlled by a call to 'control'."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"UserControlRequest","resolved":{"types":{"UserControlRequest":{"type":"UserControlRequest","javaClass":"com.zetapush.common.messages.weak.UserControlRequest","fields":[{"type":"boolean","name":"fullRights","description":"Whether the controlled user/device fully impersonates its controller"},{"type":"String","name":"publicToken","description":"Public token of the weak you want to control"}],"anyField":false}}}},"responseInfo":{"type":"UserControlStatus","resolved":{"types":{"UserControlStatus":{"type":"UserControlStatus","javaClass":"com.zetapush.common.messages.weak.UserControlStatus","fields":[{"type":"String","name":"controller","description":"User key of the controlling user"},{"type":"boolean","name":"fullRights","description":"Whether the controlled user/device fully impersonates its controller"},{"type":"String","name":"publicToken","description":"Public token of the weak you want to control"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"TOKEN_NOT_MINE","desc":"When trying to release a session you do not control."}]}],"notifs":[]}],"controllers":[{"description":"Public HTTP API for weak users qrcode generation","notes":["This API can be called for example by a weakly authenticated device to display a qrcode image containing the public token of the weak authentication of that device.","Other users scanning that qrcode will be able to call the 'control' verb of the real-time API to take control of the device."],"apis":[{"shortDesc":"Returns a qrCode for a token","method":"GET","path":"BU_ID/depId2/weak/qrcode/{publicToken}","verb":"/weak/qrcode/{publicToken}","notes":["Returns a PNG image containing a qrCode for the given public token.","The qrCode is generated with the deployment-configured format."],"audience":"PUBLIC","pathVariables":[{"name":"publicToken","type":"String","desc":"Public token of the device. The public token is given by the server to the device upon a successful handshake"}],"requestParams":[],"scriptable":false,"responseBody":{"type":"ResponseEntity[byte[]]","resolved":{"types":{}}}}]}]}],"services":[{"description":{"name":"Data aggregation","description":"Provides data aggregation over time and across different items. User devices push items data on developer-defined categories. This service automatically aggregates the data.Raw data is not available for reading, only the generated aggregation result.","deployableId":"aggreg","type":"SERVICE"},"authents":[],"services":[{"http":false,"name":"Aggreg","description":"User API for item aggregation","grantSyntax":"","notes":["Users can push data and be notified of aggregated data.","This service does not allow you to read the data. To achieve that kind of behavior, you could configure a callback to store the data."],"apis":[{"channel":"/service/BU_ID/depId24/push","description":"Pushes some data","verb":"push","notes":["Pushes the given data.","All the items are processed according to the defined rules.","At least one push for a given item is needed during a time period to trigger processing and calling of the corresponding callback verb/macro."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"AggregationPushes","resolved":{"types":{"AggregationPushes":{"type":"AggregationPushes","javaClass":"com.zetapush.common.messages.aggregation.AggregationPushes","fields":[{"type":"List[AggregationPush]","name":"items","description":"List of items","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false},"AggregationPush":{"type":"AggregationPush","javaClass":"com.zetapush.common.messages.aggregation.AggregationPush","fields":[{"type":"String","name":"category","description":"Item category. Must match a defined category.","required":true},{"type":"String","name":"name","description":"Item name. Any item name, unique for the user. An item more or less matches an actual device or sensor, but it can also be for example a virtual sensor name if you are averaging temperatures from several physical sensors.","required":true},{"type":"Number","name":"value","description":"Numerical value : long for totals, floating point (double precision IEEE 754) for means","required":true}],"anyField":false}}}},"errors":[]}],"notifs":[]}],"controllers":[{"description":"Administrative API for aggregation items","notes":["Manage your items here.","Create, delete and list aggregation items."],"apis":[{"shortDesc":"Creates an item","method":"POST","path":"BU_ID/depId24/aggreg/create","verb":"/aggreg/create","notes":["Creates or updates an item category definition.","Items are aggregated based upon their category configuration.","When configuring a category, you specify the aggregation output via a callback. That callback can be configured to make use of the given 'item', 'type', 'category', 'value', 'timestamp' passed at run-time by this aggregation service.<ul> <li>'type' and 'category' are defined by a call to this administrative verb (create). <li>'item' is given in each AggregationPush instance by the caller of the run-time 'push' verb. <li>'value' is computed by this service from various values given by the caller of the run-time 'push' verb. <li>'timestamp' is the number of milliseconds from the epoch, aligned to the start of the current period.</ul>","Warning : when you update the configuration of an item, only new data are aggregated with the new configuration."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"AggregationItemCategory","resolved":{"types":{"AggregationItemCategory":{"type":"AggregationItemCategory","javaClass":"com.zetapush.common.messages.aggregation.AggregationItemCategory","fields":[{"type":"String","name":"category","description":"Item category. Arbitrary developer-defined name.","required":true},{"type":"String","name":"deploymentId","description":"DeploymentId of the target service.","required":true},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the target verb when called. The format is the format accepted by the target."},{"type":"List[Integer]","name":"periods","description":"Item periods, in minutes. Automatic aggregation by this service ensures that these will be the minimum visible granularities. Although you can specify arbitrary values, it is recommended, for easier auto-alignment of period boundaries, to use divisors of well known values : for example 30 (half an hour) is a lot better than 29.","required":true},{"type":"AggregationItemType","name":"type","description":"Item type (aggregation behavior).","required":true},{"type":"String","name":"verb","description":"Verb to be called within the target service.","required":true}],"anyField":false},"AggregationItemType":{"type":"AggregationItemType","javaClass":"com.zetapush.common.messages.aggregation.AggregationItemCategory.AggregationItemType","enumValues":[{"name":"MEAN","description":"Averages the item over the period (floating point values)."},{"name":"TOTAL","description":"Sums the item over the period (integral values only)."}],"anyField":false}}}},"responseBody":{"type":"void","resolved":{"types":{}}}}]}]},{"description":{"name":"Data stacks","description":"Stacks are a per-user named persistent queue of data. An administrator creates a stack service. End-users can push data on an arbitrary number of their own arbitrary named stacks","deployableId":"stack","options":[{"name":"stack_order","shortDesc":"Stack order","description":"stack type (fifo, lifo). Determines which pushed items will be fetched first","defaultValue":"lifo","type":"STRING","acceptableValues":["lifo","fifo"]}],"type":"SERVICE"},"authents":[],"services":[{"http":false,"name":"Stack","description":"Data stack user API","grantSyntax":"deploymentId:owner:stack","notes":["Data is stored on a per user basis. However, notifications can be sent to a configurable set of listeners.","Stack names are arbitrary and do not need to be explicitly initialized."],"apis":[{"channel":"/service/BU_ID/depId17/getListeners","description":"Lists the listeners","verb":"getListeners","action":"getListeners","notes":["Returns the whole list of listeners for the given stack."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"StackRequest","resolved":{"types":{"StackRequest":{"type":"StackRequest","javaClass":"com.zetapush.common.messages.stack.StackRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false}}}},"responseInfo":{"type":"StackListeners","resolved":{"types":{"StackListeners":{"type":"StackListeners","javaClass":"com.zetapush.common.messages.stack.StackListeners","fields":[{"type":"Set[String]","name":"listeners","description":"List of userKeys (as in the value of __userKey) or fully qualified group names (the syntax is groupServiceDeploymentId:userKey:group) that will be notified of modifying stack operations"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId17/list","description":"Lists content","verb":"list","action":"list","notes":["Returns a paginated list of contents for the given stack.","Content is sorted according to the statically configured order."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"StackListRequest","resolved":{"types":{"StackListRequest":{"type":"StackListRequest","javaClass":"com.zetapush.common.messages.stack.StackListRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"StackListResponse","resolved":{"types":{"StackListResponse":{"type":"StackListResponse","javaClass":"com.zetapush.common.messages.stack.StackListResponse","fields":[{"type":"StackListRequest","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"PageContent[StackItem]","name":"result","description":"Result for the specified request"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"StackItem":{"type":"StackItem","javaClass":"com.zetapush.common.messages.stack.StackItem","fields":[{"type":"Map[String,Object]","name":"data","description":"Stored data"},{"type":"byte[]","name":"guid","description":"Server-generated GUID"},{"type":"long","name":"ts","description":"Insertion timestamp"}],"anyField":false},"StackListRequest":{"type":"StackListRequest","javaClass":"com.zetapush.common.messages.stack.StackListRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId17/purge","description":"Empties a stack","verb":"purge","action":"purge","notes":["Removes all items from the given stack."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"StackRequest","resolved":{"types":{"StackRequest":{"type":"StackRequest","javaClass":"com.zetapush.common.messages.stack.StackRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false}}}},"responseInfo":{"type":"StackRequest","resolved":{"types":{"StackRequest":{"type":"StackRequest","javaClass":"com.zetapush.common.messages.stack.StackRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false}}},"scope":"GROUP","scopeDetail":"the defined listeners, or the owner of the stack if no listeners are defined"},"errors":[]},{"channel":"/service/BU_ID/depId17/push","description":"Pushes an item","verb":"push","action":"push","notes":["Pushes an item onto the given stack.","The stack does not need to be created."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"StackItemAdd","resolved":{"types":{"StackItemAdd":{"type":"StackItemAdd","javaClass":"com.zetapush.common.messages.stack.StackItemAdd","fields":[{"type":"byte[]","name":"guid","description":"Key of this stack item. \nunique ID for the item","serverGenerated":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true},{"type":"long","name":"ts","description":"Insertion timestamp. \n","serverGenerated":true},{"type":"Map[String,Object]","name":"data","description":"Stored data","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"responseInfo":{"type":"StackItemAdd","resolved":{"types":{"StackItemAdd":{"type":"StackItemAdd","javaClass":"com.zetapush.common.messages.stack.StackItemAdd","fields":[{"type":"Map[String,Object]","name":"data","description":"Stored data","required":true},{"type":"byte[]","name":"guid","description":"Key of this stack item"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true},{"type":"long","name":"ts","description":"Insertion timestamp"}],"anyField":false}}},"scope":"GROUP","scopeDetail":"the defined listeners, or the owner of the stack if no listeners are defined"},"errors":[]},{"channel":"/service/BU_ID/depId17/remove","description":"Removes items","verb":"remove","action":"remove","notes":["Removes the item with the given guid from the given stack."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"StackItemRemove","resolved":{"types":{"StackItemRemove":{"type":"StackItemRemove","javaClass":"com.zetapush.common.messages.stack.StackItemRemove","fields":[{"type":"List[byte[]]","name":"guids","description":"List of keys of the items to be removed","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false}}}},"responseInfo":{"type":"StackItemRemove","resolved":{"types":{"StackItemRemove":{"type":"StackItemRemove","javaClass":"com.zetapush.common.messages.stack.StackItemRemove","fields":[{"type":"List[byte[]]","name":"guids","description":"List of keys of the items to be removed","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false}}},"scope":"GROUP","scopeDetail":"the defined listeners, or the owner of the stack if no listeners are defined"},"errors":[]},{"channel":"/service/BU_ID/depId17/setListeners","description":"Sets the listeners","verb":"setListeners","action":"setListeners","notes":["Sets the listeners for the given stack."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"StackListeners","resolved":{"types":{"StackListeners":{"type":"StackListeners","javaClass":"com.zetapush.common.messages.stack.StackListeners","fields":[{"type":"Set[String]","name":"listeners","description":"List of userKeys (as in the value of __userKey) or fully qualified group names (the syntax is groupServiceDeploymentId:userKey:group) that will be notified of modifying stack operations"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false}}}},"responseInfo":{"type":"StackListeners","resolved":{"types":{"StackListeners":{"type":"StackListeners","javaClass":"com.zetapush.common.messages.stack.StackListeners","fields":[{"type":"Set[String]","name":"listeners","description":"List of userKeys (as in the value of __userKey) or fully qualified group names (the syntax is groupServiceDeploymentId:userKey:group) that will be notified of modifying stack operations"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId17/update","description":"Updates an item","verb":"update","action":"update","notes":["Updates an existing item of the given stack.","The item MUST exist prior to the call."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"StackItemAdd","resolved":{"types":{"StackItemAdd":{"type":"StackItemAdd","javaClass":"com.zetapush.common.messages.stack.StackItemAdd","fields":[{"type":"byte[]","name":"guid","description":"Key of this stack item. \n","required":true,"serverGenerated":false},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true},{"type":"long","name":"ts","description":"Insertion timestamp"},{"type":"Map[String,Object]","name":"data","description":"Stored data","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"responseInfo":{"type":"StackItemAdd","resolved":{"types":{"StackItemAdd":{"type":"StackItemAdd","javaClass":"com.zetapush.common.messages.stack.StackItemAdd","fields":[{"type":"Map[String,Object]","name":"data","description":"Stored data","required":true},{"type":"byte[]","name":"guid","description":"Key of this stack item"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true},{"type":"long","name":"ts","description":"Insertion timestamp"}],"anyField":false}}},"scope":"GROUP","scopeDetail":"the defined listeners, or the owner of the stack if no listeners are defined"},"errors":[]}],"notifs":[]}],"controllers":[]},{"description":{"name":"Echo","description":"Echo","deployableId":"echo","options":[{"name":"echo_rest_enabled","shortDesc":"HTTP also","description":"boolean indicating whether the service should be deployed as rest also","defaultValue":"false","type":"BOOLEAN"}],"type":"SERVICE"},"authents":[],"services":[{"http":false,"name":"Echo","description":"Echo service","grantSyntax":"","notes":["Simple echo service, for development purposes."],"apis":[{"channel":"/service/BU_ID/depId5/echo","description":"Echoes an object","verb":"echo","notes":["Echoes an object: the server will echo that object on channel 'echo' for the current user."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"Map[String,Object]","resolved":{"types":{}}},"responseInfo":{"type":"Map[String,Object]","resolved":{"types":{}},"scope":"SESSION","scopeDetail":""},"errors":[]}],"notifs":[]}],"controllers":[]},{"description":{"name":"Game engine","description":"Abstract Game Engine. Concrete game engines are remote cometd clients or internal macros","deployableId":"game","type":"SERVICE"},"authents":[],"services":[{"http":false,"name":"GameEngine","description":"Game Engine API","grantSyntax":"","notes":["The Game Engine API is for game engine clients, not end-users."],"apis":[{"channel":"/service/BU_ID/depId19/join_result","description":"Notify the result for a join request","verb":"join_result","notes":["A Game Engine notifies the STR of the result of a join request that it received on join_callback"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameJoinResponse","resolved":{"types":{"GameJoinResponse":{"type":"GameJoinResponse","javaClass":"com.zetapush.common.messages.gameengine.GameJoinResponse","fields":[{"type":"String","name":"callerId","description":"caller ID from the original request"},{"type":"String","name":"error","description":"error message"},{"type":"String","name":"msgId","description":"unique ID for this message, matching the request ID"},{"type":"GameJoin","name":"payload","description":"response payload"}],"anyField":false},"GameJoin":{"type":"GameJoin","javaClass":"com.zetapush.common.messages.game.GameJoin","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"role","description":"Optional role for the player. Meaning is game specific"},{"type":"String","name":"userId","description":"User unique key"},{"type":"String","name":"userName","description":"Player name inside the game"}],"anyField":false}}}},"errors":[]},{"channel":"/service/BU_ID/depId19/organize_result","description":"Notify the result for an organization request","verb":"organize_result","notes":["A Game Engine notifies the STR of the result of an organization request that it received on organize_callback"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameOrganizationResponse","resolved":{"types":{"GameOrganizationResponse":{"type":"GameOrganizationResponse","javaClass":"com.zetapush.common.messages.gameengine.GameOrganizationResponse","fields":[{"type":"String","name":"callerId","description":"caller ID from the original request"},{"type":"String","name":"error","description":"error message"},{"type":"String","name":"msgId","description":"unique ID for this message, matching the request ID"},{"type":"GameOrganization","name":"payload","description":"response payload"}],"anyField":false},"GameOrganization":{"type":"GameOrganization","javaClass":"com.zetapush.common.messages.game.GameOrganization","fields":[{"type":"String","name":"gameId","description":"Game identifier"},{"type":"Map[String,Object]","name":"options","description":"Game creation options"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"GameType","name":"type","description":"Game type","required":true}],"anyField":false},"GameType":{"type":"GameType","javaClass":"com.zetapush.common.messages.game.GameType","fields":[{"type":"String","name":"description","description":"Game description"},{"type":"String","name":"name","description":"Game type identifier"}],"anyField":false}}}},"errors":[]},{"channel":"/service/BU_ID/depId19/register","description":"Registers a game engine","verb":"register","notes":["A client registers itself to the STR as a Game Engine.","The STR may, from now on, dispatch game of the given game type to said client.","Unregistration is done automatically on logoff."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameRunnerRegistration","resolved":{"types":{"GameRunnerRegistration":{"type":"GameRunnerRegistration","javaClass":"com.zetapush.common.messages.game.GameRunnerRegistration","fields":[{"type":"GameInfo","name":"gameInfo","description":"Game Type information","required":true},{"type":"GameRunnerFullLocation","name":"location","description":"Location of the engine. The server will fill it if left null."},{"type":"int","name":"maxGames","description":"Maximum number of simultaneous games that the registering runner can handle"}],"anyField":false},"GameInfo":{"type":"GameInfo","javaClass":"com.zetapush.common.messages.game.GameInfo","fields":[{"type":"Map[String,String]","name":"commands","description":"Available commands when playing"},{"type":"String","name":"description","description":"Game description"},{"type":"String","name":"name","description":"Game type identifier"},{"type":"Map[String,String]","name":"options","description":"Available options whan creating"}],"anyField":false},"GameRunnerFullLocation":{"type":"GameRunnerFullLocation","javaClass":"com.zetapush.common.messages.game.GameRunnerFullLocation","fields":[{"type":"String","name":"requestChannel","description":"Reserved for future use"},{"type":"String","name":"responseChannel","description":"Reserved for future use"},{"type":"String","name":"sessionId","description":"Session identifier of the game engine. Server-attributed"},{"type":"String","name":"setiId","description":"Seti identifier of the game engine. Server-attributed"}],"anyField":false}}}},"errors":[]},{"channel":"/service/BU_ID/depId19/start_result","description":"Notify the result for a start request","verb":"start_result","notes":["A Game Engine notifies the STR of the result of a start request that it received on start_callback"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameStart","resolved":{"types":{"GameStart":{"type":"GameStart","javaClass":"com.zetapush.common.messages.game.GameStart","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"}],"anyField":false}}}},"errors":[]},{"channel":"/service/BU_ID/depId19/state","description":"Notify a game event","verb":"state","notes":["A Game Engine notifies the STR of some arbitrary game event."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameState","resolved":{"types":{"GameState":{"type":"GameState","javaClass":"com.zetapush.common.messages.game.GameState","fields":[{"type":"Map[String,Object]","name":"data","description":"Game specific data"},{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"GameStatus","name":"status","description":"Current game status"}],"anyField":false},"GameStatus":{"type":"GameStatus","javaClass":"com.zetapush.common.messages.game.GameStatus","enumValues":[{"name":"RUNNING","description":"The game is running"},{"name":"FINISHED","description":"The game is finished"},{"name":"CREATED","description":"The game has been created"},{"name":"STARTING","description":"The game is starting"}],"anyField":false}}}},"errors":[]},{"channel":"/service/BU_ID/depId19/unjoin_result","description":"Notify the result for an unjoin request","verb":"unjoin_result","notes":["A Game Engine notifies the STR of the result of an unjoin request that it received on unjoin_callback"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameJoinResponse","resolved":{"types":{"GameJoinResponse":{"type":"GameJoinResponse","javaClass":"com.zetapush.common.messages.gameengine.GameJoinResponse","fields":[{"type":"String","name":"callerId","description":"caller ID from the original request"},{"type":"String","name":"error","description":"error message"},{"type":"String","name":"msgId","description":"unique ID for this message, matching the request ID"},{"type":"GameJoin","name":"payload","description":"response payload"}],"anyField":false},"GameJoin":{"type":"GameJoin","javaClass":"com.zetapush.common.messages.game.GameJoin","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"role","description":"Optional role for the player. Meaning is game specific"},{"type":"String","name":"userId","description":"User unique key"},{"type":"String","name":"userName","description":"Player name inside the game"}],"anyField":false}}}},"errors":[]}],"notifs":[{"type":"GameOrganizationWithCallback","resolved":{"types":{"GameOrganizationWithCallback":{"type":"GameOrganizationWithCallback","javaClass":"com.zetapush.common.messages.gameengine.GameOrganizationWithCallback","fields":[{"type":"String","name":"callerId","description":"callback info"},{"type":"String","name":"msgId","description":"unique ID for this message"},{"type":"GameOrganization","name":"payload","description":"message payload"}],"anyField":false},"GameOrganization":{"type":"GameOrganization","javaClass":"com.zetapush.common.messages.game.GameOrganization","fields":[{"type":"String","name":"gameId","description":"Game identifier"},{"type":"Map[String,Object]","name":"options","description":"Game creation options"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"GameType","name":"type","description":"Game type","required":true}],"anyField":false},"GameType":{"type":"GameType","javaClass":"com.zetapush.common.messages.game.GameType","fields":[{"type":"String","name":"description","description":"Game description"},{"type":"String","name":"name","description":"Game type identifier"}],"anyField":false}}},"channel":"organize_callback","target":"","description":"STR notifies the game engine to provide result to an organization request","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"GameOrganizationWithCallback","imports":["com.zetapush.common.messages.gameengine.GameOrganizationWithCallback"]}},{"type":"GameJoinWithCallback","resolved":{"types":{"GameJoinWithCallback":{"type":"GameJoinWithCallback","javaClass":"com.zetapush.common.messages.gameengine.GameJoinWithCallback","fields":[{"type":"String","name":"callerId","description":"callback info"},{"type":"String","name":"msgId","description":"unique ID for this message"},{"type":"GameJoin","name":"payload","description":"message payload"}],"anyField":false},"GameJoin":{"type":"GameJoin","javaClass":"com.zetapush.common.messages.game.GameJoin","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"role","description":"Optional role for the player. Meaning is game specific"},{"type":"String","name":"userId","description":"User unique key"},{"type":"String","name":"userName","description":"Player name inside the game"}],"anyField":false}}},"channel":"join_callback","target":"","description":"STR notifies the game engine to provide result to a join request","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"GameJoinWithCallback","imports":["com.zetapush.common.messages.gameengine.GameJoinWithCallback"]}},{"type":"GameJoinWithCallback","resolved":{"types":{"GameJoinWithCallback":{"type":"GameJoinWithCallback","javaClass":"com.zetapush.common.messages.gameengine.GameJoinWithCallback","fields":[{"type":"String","name":"callerId","description":"callback info"},{"type":"String","name":"msgId","description":"unique ID for this message"},{"type":"GameJoin","name":"payload","description":"message payload"}],"anyField":false},"GameJoin":{"type":"GameJoin","javaClass":"com.zetapush.common.messages.game.GameJoin","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"role","description":"Optional role for the player. Meaning is game specific"},{"type":"String","name":"userId","description":"User unique key"},{"type":"String","name":"userName","description":"Player name inside the game"}],"anyField":false}}},"channel":"unjoin_callback","target":"","description":"STR notifies the game engine to provide result to an unjoin request","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"GameJoinWithCallback","imports":["com.zetapush.common.messages.gameengine.GameJoinWithCallback"]}},{"type":"GameStart","resolved":{"types":{"GameStart":{"type":"GameStart","javaClass":"com.zetapush.common.messages.game.GameStart","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"}],"anyField":false}}},"channel":"start_callback","target":"","description":"STR notifies the game engine to provide result to a start request","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"GameStart","imports":["com.zetapush.common.messages.game.GameStart"]}},{"type":"GamePlay","resolved":{"types":{"GamePlay":{"type":"GamePlay","javaClass":"com.zetapush.common.messages.game.GamePlay","fields":[{"type":"Map[String,Object]","name":"data","description":"Game-specific data"},{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"userId","description":"User unique key"}],"anyField":false}}},"channel":"play_callback","target":"","description":"STR notifies the game engine to provide result to a play request","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"GamePlay","imports":["com.zetapush.common.messages.game.GamePlay"]}}]},{"http":false,"name":"Game","description":"User API for games","grantSyntax":"","notes":["Users can list, start, join games, and play."],"apis":[{"channel":"/service/BU_ID/depId19/available","description":"Lists game types","verb":"available","notes":["Returns the list of game types supported by the server and the currently registered game engines."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"responseInfo":{"type":"List[GameInfo]","resolved":{"types":{"GameInfo":{"type":"GameInfo","javaClass":"com.zetapush.common.messages.game.GameInfo","fields":[{"type":"Map[String,String]","name":"commands","description":"Available commands when playing"},{"type":"String","name":"description","description":"Game description"},{"type":"String","name":"name","description":"Game type identifier"},{"type":"Map[String,String]","name":"options","description":"Available options whan creating"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId19/join","description":"A user joins a game","verb":"join","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameJoin","resolved":{"types":{"GameJoin":{"type":"GameJoin","javaClass":"com.zetapush.common.messages.game.GameJoin","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"role","description":"Optional role for the player. Meaning is game specific"},{"type":"String","name":"userId","description":"User unique key"},{"type":"String","name":"userName","description":"Player name inside the game"}],"anyField":false}}}},"otherOutputs":[{"type":"GameJoin","resolved":{"types":{"GameJoin":{"type":"GameJoin","javaClass":"com.zetapush.common.messages.game.GameJoin","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"role","description":"Optional role for the player. Meaning is game specific"},{"type":"String","name":"userId","description":"User unique key"},{"type":"String","name":"userName","description":"Player name inside the game"}],"anyField":false}}},"channel":"/service/BU_ID/depId19/join","target":"","description":"A user has joined a game","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"GameJoin","imports":["com.zetapush.common.messages.game.GameJoin"]}}],"errors":[]},{"channel":"/service/BU_ID/depId19/organize","description":"Organizes a game","verb":"organize","notes":[],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameOrganization","resolved":{"types":{"GameOrganization":{"type":"GameOrganization","javaClass":"com.zetapush.common.messages.game.GameOrganization","fields":[{"type":"GameType","name":"type","description":"Game type","required":true},{"type":"String","name":"gameId","description":"Game identifier. \n","serverGenerated":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Map[String,Object]","name":"options","description":"Game creation options"}],"anyField":false},"GameType":{"type":"GameType","javaClass":"com.zetapush.common.messages.game.GameType","fields":[{"type":"String","name":"description","description":"Game description"},{"type":"String","name":"name","description":"Game type identifier"}],"anyField":false}}}},"otherOutputs":[{"type":"GameOrganization","resolved":{"types":{"GameOrganization":{"type":"GameOrganization","javaClass":"com.zetapush.common.messages.game.GameOrganization","fields":[{"type":"String","name":"gameId","description":"Game identifier"},{"type":"Map[String,Object]","name":"options","description":"Game creation options"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"GameType","name":"type","description":"Game type","required":true}],"anyField":false},"GameType":{"type":"GameType","javaClass":"com.zetapush.common.messages.game.GameType","fields":[{"type":"String","name":"description","description":"Game description"},{"type":"String","name":"name","description":"Game type identifier"}],"anyField":false}}},"channel":"/service/BU_ID/depId19/organize","target":"","description":"Game is organized","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"GameOrganization","imports":["com.zetapush.common.messages.game.GameOrganization"]}}],"errors":[{"code":"NOT_FOUND","desc":"Game type not found"}]},{"channel":"/service/BU_ID/depId19/play","description":"Gives some command to the game engine","verb":"play","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GamePlay","resolved":{"types":{"GamePlay":{"type":"GamePlay","javaClass":"com.zetapush.common.messages.game.GamePlay","fields":[{"type":"Map[String,Object]","name":"data","description":"Game-specific data"},{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"userId","description":"User unique key"}],"anyField":false}}}},"otherOutputs":[{"type":"GamePlay","resolved":{"types":{"GamePlay":{"type":"GamePlay","javaClass":"com.zetapush.common.messages.game.GamePlay","fields":[{"type":"Map[String,Object]","name":"data","description":"Game-specific data"},{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"userId","description":"User unique key"}],"anyField":false}}},"channel":"/service/BU_ID/depId19/play","target":"","description":"A command has been played by the game engine","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"GamePlay","imports":["com.zetapush.common.messages.game.GamePlay"]}}],"errors":[]},{"channel":"/service/BU_ID/depId19/start","description":"Starts a game","verb":"start","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameStart","resolved":{"types":{"GameStart":{"type":"GameStart","javaClass":"com.zetapush.common.messages.game.GameStart","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"}],"anyField":false}}}},"otherOutputs":[{"type":"GameStart","resolved":{"types":{"GameStart":{"type":"GameStart","javaClass":"com.zetapush.common.messages.game.GameStart","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"}],"anyField":false}}},"channel":"/service/BU_ID/depId19/start","target":"","description":"A game has started","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"GameStart","imports":["com.zetapush.common.messages.game.GameStart"]}}],"errors":[]},{"channel":"/service/BU_ID/depId19/unjoin","description":"A user cancels joining a game","verb":"unjoin","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameJoin","resolved":{"types":{"GameJoin":{"type":"GameJoin","javaClass":"com.zetapush.common.messages.game.GameJoin","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"role","description":"Optional role for the player. Meaning is game specific"},{"type":"String","name":"userId","description":"User unique key"},{"type":"String","name":"userName","description":"Player name inside the game"}],"anyField":false}}}},"otherOutputs":[{"type":"GameJoin","resolved":{"types":{"GameJoin":{"type":"GameJoin","javaClass":"com.zetapush.common.messages.game.GameJoin","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"role","description":"Optional role for the player. Meaning is game specific"},{"type":"String","name":"userId","description":"User unique key"},{"type":"String","name":"userName","description":"Player name inside the game"}],"anyField":false}}},"channel":"/service/BU_ID/depId19/unjoin","target":"","description":"A user leaved a game","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"GameJoin","imports":["com.zetapush.common.messages.game.GameJoin"]}}],"errors":[]}],"notifs":[{"type":"GameState","resolved":{"types":{"GameState":{"type":"GameState","javaClass":"com.zetapush.common.messages.game.GameState","fields":[{"type":"Map[String,Object]","name":"data","description":"Game specific data"},{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"GameStatus","name":"status","description":"Current game status"}],"anyField":false},"GameStatus":{"type":"GameStatus","javaClass":"com.zetapush.common.messages.game.GameStatus","enumValues":[{"name":"RUNNING","description":"The game is running"},{"name":"FINISHED","description":"The game is finished"},{"name":"CREATED","description":"The game has been created"},{"name":"STARTING","description":"The game is starting"}],"anyField":false}}},"channel":"state","target":"","description":"Notify a game event","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"GameState","imports":["com.zetapush.common.messages.game.GameState"]}}]}],"controllers":[{"description":"Experimental API for administrative game engine macros registration.","notes":["EXPERIMENTAL. DO NOT actually use in production."],"apis":[{"shortDesc":"Registers a game engine","method":"POST","path":"BU_ID/depId19/game/registerGame","verb":"/game/registerGame","notes":["Registers the coordinates of a game engine."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":false,"requestBody":{"type":"GameRunnerRegistration","resolved":{"types":{"GameRunnerRegistration":{"type":"GameRunnerRegistration","javaClass":"com.zetapush.common.messages.game.GameRunnerRegistration","fields":[{"type":"GameInfo","name":"gameInfo","description":"Game Type information","required":true},{"type":"GameRunnerFullLocation","name":"location","description":"Location of the engine. The server will fill it if left null."},{"type":"int","name":"maxGames","description":"Maximum number of simultaneous games that the registering runner can handle"}],"anyField":false},"GameInfo":{"type":"GameInfo","javaClass":"com.zetapush.common.messages.game.GameInfo","fields":[{"type":"Map[String,String]","name":"commands","description":"Available commands when playing"},{"type":"String","name":"description","description":"Game description"},{"type":"String","name":"name","description":"Game type identifier"},{"type":"Map[String,String]","name":"options","description":"Available options whan creating"}],"anyField":false},"GameRunnerFullLocation":{"type":"GameRunnerFullLocation","javaClass":"com.zetapush.common.messages.game.GameRunnerFullLocation","fields":[{"type":"String","name":"requestChannel","description":"Reserved for future use"},{"type":"String","name":"responseChannel","description":"Reserved for future use"},{"type":"String","name":"sessionId","description":"Session identifier of the game engine. Server-attributed"},{"type":"String","name":"setiId","description":"Seti identifier of the game engine. Server-attributed"}],"anyField":false}}}},"responseBody":{"type":"void","resolved":{"types":{}}}}]}]},{"description":{"name":"Generic Data Access","description":"Generic Data Access Service : NoSQL storage","deployableId":"gda","type":"SERVICE"},"authents":[],"services":[{"http":true,"name":"Gda","description":"GDA User API","grantSyntax":"deploymentId:owner:table","notes":["User API for Generic Data Access.","The data are stored on a per-user basis.","Users can put, get, list their data."],"apis":[{"channel":"/service/BU_ID/depId6/filter","description":"Filters a range of rows","verb":"filter","action":"filter","notes":["Similar to range, but rows can be filtered out according to a developer-supplied predicate.","A range consists of consecutive rows from the start key (inclusive) to the stop key (exclusive).","You can specify partial keys for the start and stop fields."],"serverOnly":true,"clientOnly":false,"slaveDisabled":true,"paramInfo":{"type":"GdaFilterRequest","resolved":{"types":{"GdaFilterRequest":{"type":"GdaFilterRequest","javaClass":"com.zetapush.common.messages.gda.GdaFilterRequest","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"Object","name":"function","description":"Boolean predicate. The function must accept one parameter : the current row. The return value must be a boolean. When true, the row is retained, otherwise it is filtered out."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key (inclusive)"},{"type":"String","name":"stop","description":"Stop row key (exclusive)"},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"GdaFilterResult","resolved":{"types":{"GdaFilterResult":{"type":"GdaFilterResult","javaClass":"com.zetapush.common.messages.gda.GdaFilterResult","fields":[{"type":"GdaFilterRequest","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"PageContent[Map[String,Object]]","name":"result","description":"Result for the specified request"}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"GdaFilterRequest":{"type":"GdaFilterRequest","javaClass":"com.zetapush.common.messages.gda.GdaFilterRequest","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"Object","name":"function","description":"Boolean predicate. The function must accept one parameter : the current row. The return value must be a boolean. When true, the row is retained, otherwise it is filtered out."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key (inclusive)"},{"type":"String","name":"stop","description":"Stop row key (exclusive)"},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},{"channel":"/service/BU_ID/depId6/get","description":"Asks for a data row","verb":"get","action":"get","notes":["Returns a full data row."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaGet","resolved":{"types":{"GdaGet":{"type":"GdaGet","javaClass":"com.zetapush.common.messages.gda.GdaGet","fields":[{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}}},"responseInfo":{"type":"GdaGetResult","resolved":{"types":{"GdaGetResult":{"type":"GdaGetResult","javaClass":"com.zetapush.common.messages.gda.GdaGetResult","fields":[{"type":"GdaGet","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Map[String,Object]","name":"result","description":"Result for the specified request"}],"anyField":false},"GdaGet":{"type":"GdaGet","javaClass":"com.zetapush.common.messages.gda.GdaGet","fields":[{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},{"channel":"/service/BU_ID/depId6/getCells","description":"Asks for a data cell","verb":"getCells","action":"getCells","notes":["Returns a precise list of cells from a column in a data row."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaCellsRequest","resolved":{"types":{"GdaCellsRequest":{"type":"GdaCellsRequest","javaClass":"com.zetapush.common.messages.gda.GdaCellsRequest","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"List[String]","name":"key2","description":"cell keys inside the column","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}}},"responseInfo":{"type":"GdaCellsResult","resolved":{"types":{"GdaCellsResult":{"type":"GdaCellsResult","javaClass":"com.zetapush.common.messages.gda.GdaCellsResult","fields":[{"type":"GdaCellsRequest","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Object","name":"result","description":"Result for the specified request"}],"anyField":false},"GdaCellsRequest":{"type":"GdaCellsRequest","javaClass":"com.zetapush.common.messages.gda.GdaCellsRequest","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"List[String]","name":"key2","description":"cell keys inside the column","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},{"channel":"/service/BU_ID/depId6/inc","description":"Increments an integer value","verb":"inc","action":"inc","notes":["Increments a cell 64-bit signed integer value and returns the result in the data field.","The increment is atomic : if you concurrently increment 10 times a value by 1, the final result will be the initial value plus 10. The actual individual resulting values seen by the 10 concurrent callers may vary discontinuously, with duplicates : at least one of them will see the final (+10) result."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaPut","resolved":{"types":{"GdaPut":{"type":"GdaPut","javaClass":"com.zetapush.common.messages.gda.GdaPut","fields":[{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true},{"type":"Object","name":"data","description":"stored data. \n64-bit signed integer value interpreted as a delta. This delta increments the specified field.","required":true,"serverGenerated":false},{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"key2","description":"optional cell key inside the column"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"column","description":"column name inside the row","required":true}],"anyField":false}}}},"responseInfo":{"type":"GdaPut","resolved":{"types":{"GdaPut":{"type":"GdaPut","javaClass":"com.zetapush.common.messages.gda.GdaPut","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"Object","name":"data","description":"stored data","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"key2","description":"optional cell key inside the column"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."},{"code":"NO_SUCH_COLUMN","desc":"Happens when the specified column does not exist (columns are defined by a createTable or addColumns call)."},{"code":"BAD_COLUMN","desc":"Happens when the input data is incorrect for the specified column"}]},{"channel":"/service/BU_ID/depId6/list","description":"Asks for a list of rows","verb":"list","action":"list","notes":["Returns a paginated list of rows from the given table."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaList","resolved":{"types":{"GdaList":{"type":"GdaList","javaClass":"com.zetapush.common.messages.gda.GdaList","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"GdaListResult","resolved":{"types":{"GdaListResult":{"type":"GdaListResult","javaClass":"com.zetapush.common.messages.gda.GdaListResult","fields":[{"type":"GdaList","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"PageContent[Map[String,Object]]","name":"result","description":"Result for the specified request"}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"GdaList":{"type":"GdaList","javaClass":"com.zetapush.common.messages.gda.GdaList","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},{"channel":"/service/BU_ID/depId6/mget","description":"Asks for several data rows","verb":"mget","action":"mget","notes":["Returns full data rows, in the order they were asked."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaMultiGetRequest","resolved":{"types":{"GdaMultiGetRequest":{"type":"GdaMultiGetRequest","javaClass":"com.zetapush.common.messages.gda.GdaMultiGetRequest","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"List[String]","name":"keys","description":"List of wanted row keys","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false}}}},"responseInfo":{"type":"GdaMultiGetResult","resolved":{"types":{"GdaMultiGetResult":{"type":"GdaMultiGetResult","javaClass":"com.zetapush.common.messages.gda.GdaMultiGetResult","fields":[{"type":"GdaMultiGetRequest","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"List[Map[String,Object]]","name":"result","description":"Result for the specified request"}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"GdaMultiGetRequest":{"type":"GdaMultiGetRequest","javaClass":"com.zetapush.common.messages.gda.GdaMultiGetRequest","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"List[String]","name":"keys","description":"List of wanted row keys","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},{"channel":"/service/BU_ID/depId6/put","description":"Puts some data into a cell","verb":"put","action":"put","notes":["Creates or replaces the contents of a particular cell."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaPut","resolved":{"types":{"GdaPut":{"type":"GdaPut","javaClass":"com.zetapush.common.messages.gda.GdaPut","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"Object","name":"data","description":"stored data","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"key2","description":"optional cell key inside the column"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}}},"responseInfo":{"type":"GdaPut","resolved":{"types":{"GdaPut":{"type":"GdaPut","javaClass":"com.zetapush.common.messages.gda.GdaPut","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"Object","name":"data","description":"stored data","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"key2","description":"optional cell key inside the column"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."},{"code":"NO_SUCH_COLUMN","desc":"Happens when the specified column does not exist (columns are defined by a createTable or addColumns call)."}]},{"channel":"/service/BU_ID/depId6/puts","description":"Puts several rows","verb":"puts","action":"puts","notes":["Creates or replaces the (maybe partial) contents of a collection of rows.","This method only creates or replaces cells for non-null input values."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaPuts","resolved":{"types":{"GdaPuts":{"type":"GdaPuts","javaClass":"com.zetapush.common.messages.gda.GdaPuts","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[GdaPutsRow]","name":"rows","description":"Rows to be inserted","required":true},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaPutsRow":{"type":"GdaPutsRow","javaClass":"com.zetapush.common.messages.gda.GdaPutsRow","fields":[{"type":"Map[String,Object]","name":"data","description":"Stored data, as a map of columns to values","required":true},{"type":"String","name":"key","description":"Row key","required":true}],"anyField":false}}}},"responseInfo":{"type":"GdaPutsResult","resolved":{"types":{"GdaPutsResult":{"type":"GdaPutsResult","javaClass":"com.zetapush.common.messages.gda.GdaPutsResult","fields":[{"type":"long","name":"inserted","description":"Number of inserted rows"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."},{"code":"NO_SUCH_COLUMN","desc":"Happens when the specified column does not exist (columns are defined by a createTable or addColumns call)."}]},{"channel":"/service/BU_ID/depId6/range","description":"Asks for a range of rows","verb":"range","action":"range","notes":["Returns a paginated range of rows from the given table.","A range consists of consecutive rows from the start key (inclusive) to the stop key (exclusive).","You can specify partial keys for the start and stop fields."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaRange","resolved":{"types":{"GdaRange":{"type":"GdaRange","javaClass":"com.zetapush.common.messages.gda.GdaRange","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key (inclusive)","required":true},{"type":"String","name":"stop","description":"Stop row key (exclusive)","required":true},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"GdaRangeResult","resolved":{"types":{"GdaRangeResult":{"type":"GdaRangeResult","javaClass":"com.zetapush.common.messages.gda.GdaRangeResult","fields":[{"type":"GdaRange","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"PageContent[Map[String,Object]]","name":"result","description":"Result for the specified request"}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"GdaRange":{"type":"GdaRange","javaClass":"com.zetapush.common.messages.gda.GdaRange","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key (inclusive)","required":true},{"type":"String","name":"stop","description":"Stop row key (exclusive)","required":true},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},{"channel":"/service/BU_ID/depId6/reduce","description":"Reduces a range of rows","verb":"reduce","action":"reduce","notes":["Returns a computed single reduced result from a range of rows from the given table.","A range consists of consecutive rows from the start key (inclusive) to the stop key (exclusive).","You can specify partial keys for the start and stop fields."],"serverOnly":true,"clientOnly":false,"slaveDisabled":true,"paramInfo":{"type":"GdaReduceRequest","resolved":{"types":{"GdaReduceRequest":{"type":"GdaReduceRequest","javaClass":"com.zetapush.common.messages.gda.GdaReduceRequest","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"Object","name":"function","description":"Computation function. The function must accept two parameters : the current value and the current row. The return value is ignored : the current value must be updated instead."},{"type":"Map[String,Object]","name":"initialValue","description":"Initial value for the computation function. Example : {sum:0, mean:null}"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key (inclusive)","required":true},{"type":"String","name":"stop","description":"Stop row key (exclusive)","required":true},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"GdaReduceResult","resolved":{"types":{"GdaReduceResult":{"type":"GdaReduceResult","javaClass":"com.zetapush.common.messages.gda.GdaReduceResult","fields":[{"type":"GdaReduceRequest","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Map[String,Object]","name":"result","description":"Result for the specified request"}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"GdaReduceRequest":{"type":"GdaReduceRequest","javaClass":"com.zetapush.common.messages.gda.GdaReduceRequest","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"Object","name":"function","description":"Computation function. The function must accept two parameters : the current value and the current row. The return value is ignored : the current value must be updated instead."},{"type":"Map[String,Object]","name":"initialValue","description":"Initial value for the computation function. Example : {sum:0, mean:null}"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key (inclusive)","required":true},{"type":"String","name":"stop","description":"Stop row key (exclusive)","required":true},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},{"channel":"/service/BU_ID/depId6/removeCell","description":"Removes one cell inside a column of a row","verb":"removeCell","action":"removeCell","notes":["Removes only one cell of the given column of the given row from the given table."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaCellRequest","resolved":{"types":{"GdaCellRequest":{"type":"GdaCellRequest","javaClass":"com.zetapush.common.messages.gda.GdaCellRequest","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"key2","description":"cell key inside the column","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}}},"responseInfo":{"type":"GdaCellRequest","resolved":{"types":{"GdaCellRequest":{"type":"GdaCellRequest","javaClass":"com.zetapush.common.messages.gda.GdaCellRequest","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"key2","description":"cell key inside the column","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},{"channel":"/service/BU_ID/depId6/removeColumn","description":"Removes one full column of a row","verb":"removeColumn","action":"removeColumn","notes":["Removes all cells of the given column of the given row from the given table."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaColumnRequest","resolved":{"types":{"GdaColumnRequest":{"type":"GdaColumnRequest","javaClass":"com.zetapush.common.messages.gda.GdaColumnRequest","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}}},"responseInfo":{"type":"GdaColumnRequest","resolved":{"types":{"GdaColumnRequest":{"type":"GdaColumnRequest","javaClass":"com.zetapush.common.messages.gda.GdaColumnRequest","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},{"channel":"/service/BU_ID/depId6/removeRange","description":"Removes a range of rows","verb":"removeRange","action":"removeRange","notes":["Removes the specified columns of the given range of rows from the given table."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaRemoveRange","resolved":{"types":{"GdaRemoveRange":{"type":"GdaRemoveRange","javaClass":"com.zetapush.common.messages.gda.GdaRemoveRange","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key","required":true},{"type":"String","name":"stop","description":"Stop row key","required":true},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false}}}},"responseInfo":{"type":"GdaRemoveRange","resolved":{"types":{"GdaRemoveRange":{"type":"GdaRemoveRange","javaClass":"com.zetapush.common.messages.gda.GdaRemoveRange","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key","required":true},{"type":"String","name":"stop","description":"Stop row key","required":true},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},{"channel":"/service/BU_ID/depId6/removeRow","description":"Removes one full row","verb":"removeRow","action":"removeRow","notes":["Removes all columns of the given row from the given table."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaRowRequest","resolved":{"types":{"GdaRowRequest":{"type":"GdaRowRequest","javaClass":"com.zetapush.common.messages.gda.GdaRowRequest","fields":[{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}}},"responseInfo":{"type":"GdaRowRequest","resolved":{"types":{"GdaRowRequest":{"type":"GdaRowRequest","javaClass":"com.zetapush.common.messages.gda.GdaRowRequest","fields":[{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]}],"notifs":[]}],"controllers":[{"description":"Administrative API for data access management.","notes":["You can create and list tables","At the moment, no admin API is provided for data provisionning, but you can always use an initialization macro in your recipe."],"apis":[{"shortDesc":"Alters a table (adds columns)","method":"POST","path":"BU_ID/depId6/gda/addColumns","verb":"/gda/addColumns","notes":["Alters an existing table, with the given columns.","The given columns are added to the existing list of columns.","The given columns MUST NOT exist.","Adding non existing columns WILL cause the whole table to be unavailable for up to one minute.","This API never deletes columns."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"GdaTableModification","resolved":{"types":{"GdaTableModification":{"type":"GdaTableModification","javaClass":"com.zetapush.common.messages.gda.GdaTableModification","fields":[{"type":"List[GdaTableColumn]","name":"columns","description":"List of column specifications","required":true},{"type":"Idempotence","name":"idempotence","description":"Specify the behavior when the table already exists. The default value is IGNORE_DIFFERENT.IGNORE_IDENTICAL ignores all pre-existing (identical or additional) columns, but does not allow to change or add columns.IGNORE_DIFFERENT ignores all pre-existing (identical or additional) columns, can add columns, but does not allow to change column types."},{"type":"String","name":"name","description":"Table name","required":true}],"anyField":false},"GdaDataType":{"type":"GdaDataType","javaClass":"com.zetapush.common.messages.gda.GdaDataType","enumValues":[{"name":"LONG","description":"64-bit signed integer. This is the only eligible type for the 'inc' API call"},{"name":"STRING","description":"Character String"},{"name":"BOOLEAN","description":"Boolean value : true or false"},{"name":"DOUBLE","description":"Floating point number"},{"name":"OBJECT","description":"Complex object"}],"anyField":false},"GdaTableColumn":{"type":"GdaTableColumn","javaClass":"com.zetapush.common.messages.gda.GdaTableColumn","fields":[{"type":"boolean","name":"map","description":"False if the column contains a single piece of data or true when it can contain several data, mapped by (sub-)keys. Defaults to 'false'"},{"type":"String","name":"name","description":"Column name","required":true},{"type":"GdaDataType","name":"type","description":"Column type","required":true}],"anyField":false},"Idempotence":{"type":"Idempotence","javaClass":"com.zetapush.common.messages.Idempotence","enumValues":[{"name":"IGNORE_DIFFERENT","description":"The operation will not fail if the entity already exists in a different and compatible form."},{"name":"FAIL_IF_EXISTING","description":"The operation will fail if the entity already exists"},{"name":"IGNORE_IDENTICAL","description":"The operation will not fail if the entity already exists in a similar form."}],"anyField":false}}}},"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"Creates a new table","method":"POST","path":"BU_ID/depId6/gda/createTable","verb":"/gda/createTable","notes":["Creates a table, with the given structure.","A table consists of a name and column definitions. You can provide as many columns as you wish.","This API never deletes columns."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"GdaTableModification","resolved":{"types":{"GdaTableModification":{"type":"GdaTableModification","javaClass":"com.zetapush.common.messages.gda.GdaTableModification","fields":[{"type":"List[GdaTableColumn]","name":"columns","description":"List of column specifications","required":true},{"type":"Idempotence","name":"idempotence","description":"Specify the behavior when the table already exists. The default value is IGNORE_DIFFERENT.IGNORE_IDENTICAL ignores all pre-existing (identical or additional) columns, but does not allow to change or add columns.IGNORE_DIFFERENT ignores all pre-existing (identical or additional) columns, can add columns, but does not allow to change column types."},{"type":"String","name":"name","description":"Table name","required":true}],"anyField":false},"GdaDataType":{"type":"GdaDataType","javaClass":"com.zetapush.common.messages.gda.GdaDataType","enumValues":[{"name":"LONG","description":"64-bit signed integer. This is the only eligible type for the 'inc' API call"},{"name":"STRING","description":"Character String"},{"name":"BOOLEAN","description":"Boolean value : true or false"},{"name":"DOUBLE","description":"Floating point number"},{"name":"OBJECT","description":"Complex object"}],"anyField":false},"GdaTableColumn":{"type":"GdaTableColumn","javaClass":"com.zetapush.common.messages.gda.GdaTableColumn","fields":[{"type":"boolean","name":"map","description":"False if the column contains a single piece of data or true when it can contain several data, mapped by (sub-)keys. Defaults to 'false'"},{"type":"String","name":"name","description":"Column name","required":true},{"type":"GdaDataType","name":"type","description":"Column type","required":true}],"anyField":false},"Idempotence":{"type":"Idempotence","javaClass":"com.zetapush.common.messages.Idempotence","enumValues":[{"name":"IGNORE_DIFFERENT","description":"The operation will not fail if the entity already exists in a different and compatible form."},{"name":"FAIL_IF_EXISTING","description":"The operation will fail if the entity already exists"},{"name":"IGNORE_IDENTICAL","description":"The operation will not fail if the entity already exists in a similar form."}],"anyField":false}}}},"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"Lists tables","method":"GET","path":"BU_ID/depId6/gda/listTables","verb":"/gda/listTables","notes":["Returns a non paginated list of all defined tables.","You can use this for a bulk export of your table definitions."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":false,"responseBody":{"type":"Collection[GdaTableStructure]","resolved":{"types":{"GdaDataType":{"type":"GdaDataType","javaClass":"com.zetapush.common.messages.gda.GdaDataType","enumValues":[{"name":"LONG","description":"64-bit signed integer. This is the only eligible type for the 'inc' API call"},{"name":"STRING","description":"Character String"},{"name":"BOOLEAN","description":"Boolean value : true or false"},{"name":"DOUBLE","description":"Floating point number"},{"name":"OBJECT","description":"Complex object"}],"anyField":false},"GdaTableColumn":{"type":"GdaTableColumn","javaClass":"com.zetapush.common.messages.gda.GdaTableColumn","fields":[{"type":"boolean","name":"map","description":"False if the column contains a single piece of data or true when it can contain several data, mapped by (sub-)keys. Defaults to 'false'"},{"type":"String","name":"name","description":"Column name","required":true},{"type":"GdaDataType","name":"type","description":"Column type","required":true}],"anyField":false},"GdaTableStructure":{"type":"GdaTableStructure","javaClass":"com.zetapush.common.messages.gda.GdaTableStructure","fields":[{"type":"List[GdaTableColumn]","name":"columns","description":"List of column specifications","required":true},{"type":"String","name":"name","description":"Table name","required":true}],"anyField":false}}}}},{"shortDesc":"Alters a table (removes columns)","method":"POST","path":"BU_ID/depId6/gda/removeColumns","verb":"/gda/removeColumns","notes":["Alters an existing table, with the given removed columns.","The given columns are removed from the existing list of columns.","The given columns MUST exist."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":false,"requestBody":{"type":"GdaRemoveColumns","resolved":{"types":{"GdaRemoveColumns":{"type":"GdaRemoveColumns","javaClass":"com.zetapush.common.messages.gda.GdaRemoveColumns","fields":[{"type":"Set[String]","name":"columns","description":"List of column names","required":true},{"type":"String","name":"name","description":"Table name","required":true}],"anyField":false}}}},"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"Removes a table","method":"POST","path":"BU_ID/depId6/gda/removeTable","verb":"/gda/removeTable","notes":["Removes an existing table."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"GdaTableRemoval","resolved":{"types":{"GdaTableRemoval":{"type":"GdaTableRemoval","javaClass":"com.zetapush.common.messages.gda.GdaTableRemoval","fields":[{"type":"String","name":"name","description":"Table name","required":true}],"anyField":false}}}},"responseBody":{"type":"void","resolved":{"types":{}}}}]}]},{"description":{"name":"Groups Management","description":"Groups management for users, grants on resources, remote commands on devices. This is where you can configure rights for any resource.","deployableId":"groups","options":[{"name":"groups_presence_owner","shortDesc":"Notify group owner of presence","description":"Notify group owner of presence of members when they log in or out","defaultValue":"false","type":"BOOLEAN"},{"name":"groups_presence_group","shortDesc":"Notify group members of presence","description":"Notify group members of presence of members when they log in or out","defaultValue":"false","type":"BOOLEAN"}],"type":"SERVICE"},"authents":[],"services":[{"http":false,"name":"Remoting","description":"User API for remote control","grantSyntax":"","notes":[],"apis":[{"channel":"/service/BU_ID/depId9/addListener","description":"Adds a listener","verb":"addListener","notes":["A user requests notifications from a device owned by anyone who granted him the right authorizations.","Whenever the device calls 'notify', notifications will be sent to the caller of this verb."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"RemoteCommand","resolved":{"types":{"RemoteCommand":{"type":"RemoteCommand","javaClass":"com.zetapush.common.messages.remoting.RemoteCommand","fields":[{"type":"String","name":"cmd","description":"Command to be executed. This is an arbitrary identifier string whose semantics are left to the developer.","required":true},{"type":"Map[String,Object]","name":"data","description":"Optional data payload for the command. This is an arbitrary object whose semantics are left to the developer."},{"type":"String","name":"from","description":"User issuing the command"},{"type":"String","name":"fromResource","description":"Resource of the user issuing the command"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false}}}},"errors":[]},{"channel":"/service/BU_ID/depId9/capabilities","description":"Response to 'getCapabilities'","verb":"capabilities","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"DeviceCapabilities","resolved":{"types":{"DeviceCapabilities":{"type":"DeviceCapabilities","javaClass":"com.zetapush.common.messages.remoting.DeviceCapabilities","fields":[{"type":"String","name":"answeringResource","description":"Resource name of the answering device"},{"type":"String","name":"askingResource","description":"Resource name of the asking device"},{"type":"List[String]","name":"capabilities","description":"List of capabilities. Capabilities are developer-defined strings"}],"anyField":false}}}},"otherOutputs":[{"type":"DeviceCapabilities","resolved":{"types":{"DeviceCapabilities":{"type":"DeviceCapabilities","javaClass":"com.zetapush.common.messages.remoting.DeviceCapabilities","fields":[{"type":"String","name":"answeringResource","description":"Resource name of the answering device"},{"type":"String","name":"askingResource","description":"Resource name of the asking device"},{"type":"List[String]","name":"capabilities","description":"List of capabilities. Capabilities are developer-defined strings"}],"anyField":false}}},"channel":"/service/BU_ID/depId9/capabilities","target":"","description":"Response to 'getCapabilities'","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"DeviceCapabilities","imports":["com.zetapush.common.messages.remoting.DeviceCapabilities"]}}],"errors":[]},{"channel":"/service/BU_ID/depId9/execute","description":"Executes a command","verb":"execute","notes":["A user executes a command on a device owned by anyone who granted him the right authorizations.","The command is issued on channel 'command'"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"RemoteCommand","resolved":{"types":{"RemoteCommand":{"type":"RemoteCommand","javaClass":"com.zetapush.common.messages.remoting.RemoteCommand","fields":[{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"},{"type":"String","name":"fromResource","description":"Resource of the user issuing the command. \nCommanding user's resource","serverGenerated":true},{"type":"String","name":"cmd","description":"Command to be executed. This is an arbitrary identifier string whose semantics are left to the developer.","required":true},{"type":"String","name":"from","description":"User issuing the command. \nCommanding user's key","serverGenerated":true},{"type":"Map[String,Object]","name":"data","description":"Optional data payload for the command. This is an arbitrary object whose semantics are left to the developer."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user. \nTarget device's user key","serverGenerated":false}],"anyField":false}}}},"otherOutputs":[{"type":"RemoteCommand","resolved":{"types":{"RemoteCommand":{"type":"RemoteCommand","javaClass":"com.zetapush.common.messages.remoting.RemoteCommand","fields":[{"type":"String","name":"cmd","description":"Command to be executed. This is an arbitrary identifier string whose semantics are left to the developer.","required":true},{"type":"Map[String,Object]","name":"data","description":"Optional data payload for the command. This is an arbitrary object whose semantics are left to the developer."},{"type":"String","name":"from","description":"User issuing the command"},{"type":"String","name":"fromResource","description":"Resource of the user issuing the command"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false}}},"channel":"/service/BU_ID/depId9/execute","target":"","description":"Notifies when a command has been executed","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"RemoteCommand","imports":["com.zetapush.common.messages.remoting.RemoteCommand"]}}],"errors":[]},{"channel":"/service/BU_ID/depId9/getCapabilities","description":"Requests capabilities","verb":"getCapabilities","notes":["A user requests all his devices for the whole list of their capabilities.","Devices are expected to answer on channel 'capabilities'"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"otherOutputs":[{"type":"DeviceCapabilities","resolved":{"types":{"DeviceCapabilities":{"type":"DeviceCapabilities","javaClass":"com.zetapush.common.messages.remoting.DeviceCapabilities","fields":[{"type":"String","name":"answeringResource","description":"Resource name of the answering device"},{"type":"String","name":"askingResource","description":"Resource name of the asking device"},{"type":"List[String]","name":"capabilities","description":"List of capabilities. Capabilities are developer-defined strings"}],"anyField":false}}},"channel":"/service/BU_ID/depId9/getCapabilities","target":"","description":"Notifies with all device capabilities for the user","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"DeviceCapabilities","imports":["com.zetapush.common.messages.remoting.DeviceCapabilities"]}}],"errors":[]},{"channel":"/service/BU_ID/depId9/notify","description":"Notifies of some event","verb":"notify","notes":["A device notifies the registered users/devices on this channel.","The server forwards the notification to said users."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"RemoteCommand","resolved":{"types":{"RemoteCommand":{"type":"RemoteCommand","javaClass":"com.zetapush.common.messages.remoting.RemoteCommand","fields":[{"type":"String","name":"cmd","description":"Command to be executed. This is an arbitrary identifier string whose semantics are left to the developer.","required":true},{"type":"Map[String,Object]","name":"data","description":"Optional data payload for the command. This is an arbitrary object whose semantics are left to the developer."},{"type":"String","name":"from","description":"User issuing the command"},{"type":"String","name":"fromResource","description":"Resource of the user issuing the command"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false}}}},"otherOutputs":[{"type":"RemoteCommand","resolved":{"types":{"RemoteCommand":{"type":"RemoteCommand","javaClass":"com.zetapush.common.messages.remoting.RemoteCommand","fields":[{"type":"String","name":"cmd","description":"Command to be executed. This is an arbitrary identifier string whose semantics are left to the developer.","required":true},{"type":"Map[String,Object]","name":"data","description":"Optional data payload for the command. This is an arbitrary object whose semantics are left to the developer."},{"type":"String","name":"from","description":"User issuing the command"},{"type":"String","name":"fromResource","description":"Resource of the user issuing the command"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false}}},"channel":"/service/BU_ID/depId9/notify","target":"","description":"Notifies of some event","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"RemoteCommand","imports":["com.zetapush.common.messages.remoting.RemoteCommand"]}}],"errors":[]},{"channel":"/service/BU_ID/depId9/ping","description":"Pings devices","verb":"ping","notes":["A user requests all devices (of all owners) on which he has authorizations to respond on channel 'pong'"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"PingRequest","resolved":{"types":{"PingRequest":{"type":"PingRequest","javaClass":"com.zetapush.common.messages.remoting.PingRequest","fields":[{"type":"String","name":"action","description":"The action to probe","required":true}],"anyField":false}}}},"otherOutputs":[{"type":"DeviceAvailability","resolved":{"types":{"DeviceAvailability":{"type":"DeviceAvailability","javaClass":"com.zetapush.common.messages.remoting.DeviceAvailability","fields":[{"type":"String","name":"action","description":"Action for which the device's availability is tested"},{"type":"boolean","name":"available","description":"Whether the device is available or not"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"},{"type":"String","name":"uid","description":"Session id of the answering device"},{"type":"String","name":"user","description":"User inquiring about availability"}],"anyField":false}}},"channel":"/service/BU_ID/depId9/ping","target":"","description":"Notifies of ping","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"DeviceAvailability","imports":["com.zetapush.common.messages.remoting.DeviceAvailability"]}}],"errors":[]},{"channel":"/service/BU_ID/depId9/pong","description":"Response to ping","verb":"pong","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"DeviceAvailability","resolved":{"types":{"DeviceAvailability":{"type":"DeviceAvailability","javaClass":"com.zetapush.common.messages.remoting.DeviceAvailability","fields":[{"type":"String","name":"action","description":"Action for which the device's availability is tested"},{"type":"boolean","name":"available","description":"Whether the device is available or not"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"},{"type":"String","name":"uid","description":"Session id of the answering device"},{"type":"String","name":"user","description":"User inquiring about availability"}],"anyField":false}}}},"otherOutputs":[{"type":"DeviceAvailability","resolved":{"types":{"DeviceAvailability":{"type":"DeviceAvailability","javaClass":"com.zetapush.common.messages.remoting.DeviceAvailability","fields":[{"type":"String","name":"action","description":"Action for which the device's availability is tested"},{"type":"boolean","name":"available","description":"Whether the device is available or not"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"},{"type":"String","name":"uid","description":"Session id of the answering device"},{"type":"String","name":"user","description":"User inquiring about availability"}],"anyField":false}}},"channel":"/service/BU_ID/depId9/pong","target":"","description":"Response to ping","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"DeviceAvailability","imports":["com.zetapush.common.messages.remoting.DeviceAvailability"]}}],"errors":[]},{"channel":"/service/BU_ID/depId9/removeListener","description":"Removes a listener","verb":"removeListener","notes":["A user stops requesting notifications from a device owned by anyone who granted him the right authorizations"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"RemoteCommand","resolved":{"types":{"RemoteCommand":{"type":"RemoteCommand","javaClass":"com.zetapush.common.messages.remoting.RemoteCommand","fields":[{"type":"String","name":"cmd","description":"Command to be executed. This is an arbitrary identifier string whose semantics are left to the developer.","required":true},{"type":"Map[String,Object]","name":"data","description":"Optional data payload for the command. This is an arbitrary object whose semantics are left to the developer."},{"type":"String","name":"from","description":"User issuing the command"},{"type":"String","name":"fromResource","description":"Resource of the user issuing the command"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false}}}},"errors":[]}],"notifs":[]},{"http":false,"name":"GroupManagement","description":"User API for groups and rights.","grantSyntax":"owner:group","notes":["Groups are stored per user.","This means that two users can own a group with the same identifier. A couple (owner, group) is needed to uniquely identify a group inside a group management service.","The triplet (deploymentId, owner, group) is actually needed to fully qualify a group outside of the scope of this service."],"apis":[{"channel":"/service/BU_ID/depId9/addMe","description":"Adds me to a group","verb":"addMe","action":"ADDMYSELF","notes":["Adds me (the caller) to a group.","This verb exists so that group owners may grant the right to join their groups without granting the right to add other users to those groups.","The 'user' field is implicitly set to the current user's key."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"UserGroup","resolved":{"types":{"UserGroup":{"type":"UserGroup","javaClass":"com.zetapush.common.messages.remoting.UserGroup","fields":[{"type":"String","name":"user","description":"The user's key (as in __userKey). \nCurrent user's key","serverGenerated":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"responseInfo":{"type":"UserGroup","resolved":{"types":{"UserGroup":{"type":"UserGroup","javaClass":"com.zetapush.common.messages.remoting.UserGroup","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"user","description":"The user's key (as in __userKey)"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId9/addUser","description":"Adds a user to a group","verb":"addUser","action":"WRITE","notes":["Adds the given user to the given group.","Addition may fail if the given group does not already exist."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"UserGroup","resolved":{"types":{"UserGroup":{"type":"UserGroup","javaClass":"com.zetapush.common.messages.remoting.UserGroup","fields":[{"type":"String","name":"user","description":"The user's key (as in __userKey). \n","required":true,"serverGenerated":false},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"responseInfo":{"type":"UserGroup","resolved":{"types":{"UserGroup":{"type":"UserGroup","javaClass":"com.zetapush.common.messages.remoting.UserGroup","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"user","description":"The user's key (as in __userKey)"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId9/addUsers","description":"Adds users to a group","verb":"addUsers","action":"WRITE","notes":["Users are processed in the given order","In case of failure in the middle of a user list, this verb may have succeeded to add the first users, but will not continue processing the end of the list."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupUsers","resolved":{"types":{"GroupUsers":{"type":"GroupUsers","javaClass":"com.zetapush.common.messages.remoting.GroupUsers","fields":[{"type":"List[String]","name":"users","description":"User keys of the group members"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user. \n","serverGenerated":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"otherOutputs":[{"type":"UserGroup","resolved":{"types":{"UserGroup":{"type":"UserGroup","javaClass":"com.zetapush.common.messages.remoting.UserGroup","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"user","description":"The user's key (as in __userKey)"}],"anyField":false}}},"channel":"addUser","target":"","description":"","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"UserGroup","imports":["com.zetapush.common.messages.remoting.UserGroup"]}}],"errors":[]},{"channel":"/service/BU_ID/depId9/allGroups","description":"Lists my owned groups, with details","verb":"allGroups","action":"LIST","deprecation":"Replaced by listDetailedOwnedGroups","notes":["Returns the whole list of groups owned by the current user, with their members"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ImpersonatedRequest","resolved":{"types":{"ImpersonatedRequest":{"type":"ImpersonatedRequest","javaClass":"com.zetapush.common.messages.remoting.ImpersonatedRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"responseInfo":{"type":"List[GroupUsers]","resolved":{"types":{"GroupUsers":{"type":"GroupUsers","javaClass":"com.zetapush.common.messages.remoting.GroupUsers","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[String]","name":"users","description":"User keys of the group members"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId9/check","description":"Checks an authorization","verb":"check","notes":["This API checks if the given user has the proper authorizations to perform the given action on the owner's resource.","If you give the same value for 'user' and 'owner', the check always passes."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GrantCheckRequest","resolved":{"types":{"GrantCheckRequest":{"type":"GrantCheckRequest","javaClass":"com.zetapush.common.messages.remoting.GrantCheckRequest","fields":[{"type":"String","name":"action","description":"The action to check"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"The resource to check"},{"type":"String","name":"user","description":"The user needing authorization"}],"anyField":false}}}},"responseInfo":{"type":"GrantCheckResult","resolved":{"types":{"GrantCheckResult":{"type":"GrantCheckResult","javaClass":"com.zetapush.common.messages.remoting.GrantCheckResult","fields":[{"type":"boolean","name":"ok","description":"True when the check passed"},{"type":"GrantCheckRequest","name":"request","description":"The request"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false},"GrantCheckRequest":{"type":"GrantCheckRequest","javaClass":"com.zetapush.common.messages.remoting.GrantCheckRequest","fields":[{"type":"String","name":"action","description":"The action to check"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"The resource to check"},{"type":"String","name":"user","description":"The user needing authorization"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId9/createGroup","description":"Creates a group","verb":"createGroup","action":"WRITE","notes":["Creates a group owned by the current user.","Group creation may fail if the group already exists."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupInfo","resolved":{"types":{"GroupInfo":{"type":"GroupInfo","javaClass":"com.zetapush.common.messages.remoting.GroupInfo","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"GroupInfo","resolved":{"types":{"GroupInfo":{"type":"GroupInfo","javaClass":"com.zetapush.common.messages.remoting.GroupInfo","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"BAD_INPUT_DATA","desc":"Missing group id."},{"code":"BAD_NAME","desc":"Group id must be alphanumerical."}]},{"channel":"/service/BU_ID/depId9/delGroup","description":"Removes a group","verb":"delGroup","action":"WRITE","notes":["Removes the given group owned by the current user or the given owner.","Also removes all grants to that group."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupRelated","resolved":{"types":{"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"GroupRelated","resolved":{"types":{"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId9/delUser","description":"Removes a user from a group","verb":"delUser","action":"WRITE","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"UserGroup","resolved":{"types":{"UserGroup":{"type":"UserGroup","javaClass":"com.zetapush.common.messages.remoting.UserGroup","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"user","description":"The user's key (as in __userKey)"}],"anyField":false}}}},"responseInfo":{"type":"UserGroup","resolved":{"types":{"UserGroup":{"type":"UserGroup","javaClass":"com.zetapush.common.messages.remoting.UserGroup","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"user","description":"The user's key (as in __userKey)"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId9/delUsers","description":"Removes users from a group","verb":"delUsers","action":"WRITE","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupUsers","resolved":{"types":{"GroupUsers":{"type":"GroupUsers","javaClass":"com.zetapush.common.messages.remoting.GroupUsers","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[String]","name":"users","description":"User keys of the group members"}],"anyField":false}}}},"errors":[]},{"channel":"/service/BU_ID/depId9/exists","description":"Tests for a group's existence","verb":"exists","action":"LIST","notes":["Returns whether a group exists or not."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupRelated","resolved":{"types":{"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"GroupExistence","resolved":{"types":{"GroupExistence":{"type":"GroupExistence","javaClass":"com.zetapush.common.messages.remoting.GroupExistence","fields":[{"type":"boolean","name":"exists","description":"Existence of the group"},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId9/grant","description":"Grants a right to a group","verb":"grant","action":"GRANT","notes":["The granting API does not do any check when storing permissions.","In particular when granting rights on a verb and resource of another API, the existence of said verb and resource is not checked."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"Grant","resolved":{"types":{"Grant":{"type":"Grant","javaClass":"com.zetapush.common.messages.remoting.Grant","fields":[{"type":"String","name":"action","description":"Action which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false}}}},"responseInfo":{"type":"Grant","resolved":{"types":{"Grant":{"type":"Grant","javaClass":"com.zetapush.common.messages.remoting.Grant","fields":[{"type":"String","name":"action","description":"Action which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId9/groupUsers","description":"Lists the group users","verb":"groupUsers","action":"LIST","notes":["Returns the whole list of users configured inside the given group."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupRelated","resolved":{"types":{"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"GroupUsers","resolved":{"types":{"GroupUsers":{"type":"GroupUsers","javaClass":"com.zetapush.common.messages.remoting.GroupUsers","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[String]","name":"users","description":"User keys of the group members"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId9/groups","description":"Lists my owned groups","verb":"groups","action":"LIST","deprecation":"Replaced by listOwnedGroups","notes":["Returns the whole list of groups owned by the current user"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ImpersonatedRequest","resolved":{"types":{"ImpersonatedRequest":{"type":"ImpersonatedRequest","javaClass":"com.zetapush.common.messages.remoting.ImpersonatedRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"responseInfo":{"type":"List[GroupInfo]","resolved":{"types":{"GroupInfo":{"type":"GroupInfo","javaClass":"com.zetapush.common.messages.remoting.GroupInfo","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId9/listDetailedOwnedGroups","description":"Lists my owned groups, with details","verb":"listDetailedOwnedGroups","action":"LIST","notes":["Returns the whole list of groups owned by the current user, with their members"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TraceablePaginatedImpersonatedRequest","resolved":{"types":{"TraceablePaginatedImpersonatedRequest":{"type":"TraceablePaginatedImpersonatedRequest","javaClass":"com.zetapush.common.messages.TraceablePaginatedImpersonatedRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"OwnedGroupsWithDetails","resolved":{"types":{"OwnedGroupsWithDetails":{"type":"OwnedGroupsWithDetails","javaClass":"com.zetapush.common.messages.remoting.OwnedGroupsWithDetails","fields":[{"type":"PageContent[GroupUsers]","name":"groups","description":"Detailed groups owned by the user."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GroupUsers":{"type":"GroupUsers","javaClass":"com.zetapush.common.messages.remoting.GroupUsers","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[String]","name":"users","description":"User keys of the group members"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId9/listGrants","description":"Lists rights for a group","verb":"listGrants","action":"LIST","deprecation":"Use listGroupGrants","notes":["This API lists explicitly configured rights.","Effective rights include configured rights, implicit rights and inherited rights."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupRelated","resolved":{"types":{"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"GrantList","resolved":{"types":{"GrantList":{"type":"GrantList","javaClass":"com.zetapush.common.messages.remoting.GrantList","fields":[{"type":"List[GrantListItem]","name":"grants","description":"List of granted rights"},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GrantListItem":{"type":"GrantListItem","javaClass":"com.zetapush.common.messages.remoting.GrantListItem","fields":[{"type":"String","name":"action","description":"Configured authorized action"},{"type":"String","name":"resource","description":"Configured authorized resource"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId9/listGroupGrants","description":"Lists rights for a group","verb":"listGroupGrants","action":"LIST","notes":["This API lists explicitly configured rights.","Effective rights include configured rights, implicit rights and inherited rights."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupRelatedAndPaged","resolved":{"types":{"GroupRelatedAndPaged":{"type":"GroupRelatedAndPaged","javaClass":"com.zetapush.common.messages.remoting.GroupRelatedAndPaged","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"PagedGrantList","resolved":{"types":{"PagedGrantList":{"type":"PagedGrantList","javaClass":"com.zetapush.common.messages.remoting.PagedGrantList","fields":[{"type":"PageContent[GrantListItem]","name":"grants","description":"List of granted rights"},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GrantListItem":{"type":"GrantListItem","javaClass":"com.zetapush.common.messages.remoting.GrantListItem","fields":[{"type":"String","name":"action","description":"Configured authorized action"},{"type":"String","name":"resource","description":"Configured authorized resource"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId9/listGroupPresences","description":"Lists presences for a group","verb":"listGroupPresences","action":"LIST","notes":["Returns the list of members of the given groups, along with their actual and current presence on the zetapush server.","The current implementation does not include information about the particular devices users are connected with.","If a user is connected twice with two different devices, two identical entries will be returned."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupRelatedAndPaged","resolved":{"types":{"GroupRelatedAndPaged":{"type":"GroupRelatedAndPaged","javaClass":"com.zetapush.common.messages.remoting.GroupRelatedAndPaged","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"PagedGroupPresence","resolved":{"types":{"PagedGroupPresence":{"type":"PagedGroupPresence","javaClass":"com.zetapush.common.messages.presence.PagedGroupPresence","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"PageContent[Presence]","name":"presences","description":"List of group users, with their presence information."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"OwnerResource":{"type":"OwnerResource","javaClass":"com.zetapush.common.messages.remoting.OwnerResource","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"Presence":{"type":"Presence","javaClass":"com.zetapush.common.messages.presence.Presence","fields":[{"type":"GroupRelated","name":"group","description":"Group information"},{"type":"String","name":"presence","description":"Presence status. OFF or ON"},{"type":"OwnerResource","name":"user","description":"User information"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId9/listJoinedGroups","description":"Lists the groups I am part of","verb":"listJoinedGroups","action":"LIST","notes":["Returns the whole list of groups the current user is part of.","Groups may be owned by anyone, including the current user."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TraceablePaginatedImpersonatedRequest","resolved":{"types":{"TraceablePaginatedImpersonatedRequest":{"type":"TraceablePaginatedImpersonatedRequest","javaClass":"com.zetapush.common.messages.TraceablePaginatedImpersonatedRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"JoinedGroups","resolved":{"types":{"JoinedGroups":{"type":"JoinedGroups","javaClass":"com.zetapush.common.messages.remoting.JoinedGroups","fields":[{"type":"PageContent[GroupInfo]","name":"groups","description":"Groups joined by the user."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GroupInfo":{"type":"GroupInfo","javaClass":"com.zetapush.common.messages.remoting.GroupInfo","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId9/listOwnedGroups","description":"Lists my owned groups","verb":"listOwnedGroups","action":"LIST","notes":["Returns the whole list of groups owned by the current user"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TraceablePaginatedImpersonatedRequest","resolved":{"types":{"TraceablePaginatedImpersonatedRequest":{"type":"TraceablePaginatedImpersonatedRequest","javaClass":"com.zetapush.common.messages.TraceablePaginatedImpersonatedRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"OwnedGroups","resolved":{"types":{"OwnedGroups":{"type":"OwnedGroups","javaClass":"com.zetapush.common.messages.remoting.OwnedGroups","fields":[{"type":"PageContent[GroupInfo]","name":"groups","description":"Groups owned by the user."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GroupInfo":{"type":"GroupInfo","javaClass":"com.zetapush.common.messages.remoting.GroupInfo","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId9/listPresences","description":"Lists presences for a group","verb":"listPresences","action":"LIST","deprecation":"Use listGroupPresences","notes":["Returns the list of members of the given groups, along with their actual and current presence on the zetapush server.","The current implementation does not include information about the particular devices users are connected with.","If a user is connected twice with two different devices, two identical entries will be returned."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupRelated","resolved":{"types":{"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"GroupPresence","resolved":{"types":{"GroupPresence":{"type":"GroupPresence","javaClass":"com.zetapush.common.messages.presence.GroupPresence","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"List[Presence]","name":"presences","description":"List of group users, with their presence information."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"OwnerResource":{"type":"OwnerResource","javaClass":"com.zetapush.common.messages.remoting.OwnerResource","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false},"Presence":{"type":"Presence","javaClass":"com.zetapush.common.messages.presence.Presence","fields":[{"type":"GroupRelated","name":"group","description":"Group information"},{"type":"String","name":"presence","description":"Presence status. OFF or ON"},{"type":"OwnerResource","name":"user","description":"User information"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId9/memberOf","description":"Tests membership","verb":"memberOf","notes":["Tests whether I (the caller) am a member of the given group.","This verb exists so that users can determine if they are part of a group without being granted particular rights.","The 'user' field is implicitly set to the current user's key."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"UserMembership","resolved":{"types":{"UserMembership":{"type":"UserMembership","javaClass":"com.zetapush.common.messages.remoting.UserMembership","fields":[{"type":"String","name":"user","description":"The user's key (as in __userKey). \nCurrent user's key","serverGenerated":true},{"type":"boolean","name":"hardFail","description":"True if lack of effective membership should be treated as an error. False to return the information as a boolean in the response."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"responseInfo":{"type":"UserGroupMembership","resolved":{"types":{"UserGroupMembership":{"type":"UserGroupMembership","javaClass":"com.zetapush.common.messages.remoting.UserGroupMembership","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"boolean","name":"member","description":"Whether the user is member of the group"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"user","description":"The user's key (as in __userKey)"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId9/mgrant","description":"Grants rights to a group","verb":"mgrant","action":"GRANT","notes":["Grant several rights at once."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"Grants","resolved":{"types":{"Grants":{"type":"Grants","javaClass":"com.zetapush.common.messages.remoting.Grants","fields":[{"type":"List[String]","name":"actions","description":"Actions which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false}}}},"responseInfo":{"type":"Grants","resolved":{"types":{"Grants":{"type":"Grants","javaClass":"com.zetapush.common.messages.remoting.Grants","fields":[{"type":"List[String]","name":"actions","description":"Actions which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId9/mrevoke","description":"Revokes rights for a group","verb":"mrevoke","action":"GRANT","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"Grants","resolved":{"types":{"Grants":{"type":"Grants","javaClass":"com.zetapush.common.messages.remoting.Grants","fields":[{"type":"List[String]","name":"actions","description":"Actions which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false}}}},"responseInfo":{"type":"Grants","resolved":{"types":{"Grants":{"type":"Grants","javaClass":"com.zetapush.common.messages.remoting.Grants","fields":[{"type":"List[String]","name":"actions","description":"Actions which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId9/myGroups","description":"Lists the groups I am part of","verb":"myGroups","action":"LIST","deprecation":"Replaced by listJoinedGroups","notes":["Returns the whole list of groups the current user is part of.","Groups may be owned by anyone, including the current user."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ImpersonatedRequest","resolved":{"types":{"ImpersonatedRequest":{"type":"ImpersonatedRequest","javaClass":"com.zetapush.common.messages.remoting.ImpersonatedRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"responseInfo":{"type":"List[GroupInfo]","resolved":{"types":{"GroupInfo":{"type":"GroupInfo","javaClass":"com.zetapush.common.messages.remoting.GroupInfo","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId9/revoke","description":"Revokes a right for a group","verb":"revoke","action":"GRANT","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"Grant","resolved":{"types":{"Grant":{"type":"Grant","javaClass":"com.zetapush.common.messages.remoting.Grant","fields":[{"type":"String","name":"action","description":"Action which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false}}}},"responseInfo":{"type":"Grant","resolved":{"types":{"Grant":{"type":"Grant","javaClass":"com.zetapush.common.messages.remoting.Grant","fields":[{"type":"String","name":"action","description":"Action which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]}],"notifs":[{"type":"Presence","resolved":{"types":{"Presence":{"type":"Presence","javaClass":"com.zetapush.common.messages.presence.Presence","fields":[{"type":"GroupRelated","name":"group","description":"Group information"},{"type":"String","name":"presence","description":"Presence status. OFF or ON"},{"type":"OwnerResource","name":"user","description":"User information"}],"anyField":false},"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"OwnerResource":{"type":"OwnerResource","javaClass":"com.zetapush.common.messages.remoting.OwnerResource","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false}}},"channel":"presence","target":"either a group's members or a group owner, or both, depending on the configuration of this service","description":"","variableChannelName":false,"notes":["This notification is automatically sent each time a user connects.","It will be sent to the members of the groups the user is member of, and to the owners of those groups (depending on service configuration).","One notification per group is sent."],"resolvedType":{"typeName":"Presence","imports":["com.zetapush.common.messages.presence.Presence"]}}]}],"controllers":[{"description":"Administrative Group Management","notes":["You can manage all the groups of all your users from here: create, delete, add users, grant or revoke rights.","When using the administrative API, the 'owner' field is mandatory and MUST NOT be null.","You also can configure additional things: grants on global groups, using the wildcard '*' as the group's owner."],"apis":[{"shortDesc":"Adds a user to a group","method":"POST","path":"BU_ID/depId9/groups/addUser","verb":"/groups/addUser","notes":["Adds the given user to given group for the given owner, or for a global group.","Addition may fail if the group does not exist."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"UserGroup","resolved":{"types":{"UserGroup":{"type":"UserGroup","javaClass":"com.zetapush.common.messages.remoting.UserGroup","fields":[{"type":"String","name":"user","description":"The user's key (as in __userKey). \n","required":true,"serverGenerated":false},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user. \n","required":true,"serverGenerated":false}],"anyField":false}}}},"responseBody":{"type":"UserGroup","resolved":{"types":{"UserGroup":{"type":"UserGroup","javaClass":"com.zetapush.common.messages.remoting.UserGroup","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"user","description":"The user's key (as in __userKey)"}],"anyField":false}}},"fields":[{"name":"owner","description":"","required":true,"serverGenerated":false},{"name":"user","description":"","required":true,"serverGenerated":false}]}},{"shortDesc":"Lists all the groups","method":"GET","path":"BU_ID/depId9/groups/allGroups","verb":"/groups/allGroups","notes":["Returns the paginated list of all groups."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":false,"responseBody":{"type":"PageContent[GroupInfo]","resolved":{"types":{"GroupInfo":{"type":"GroupInfo","javaClass":"com.zetapush.common.messages.remoting.GroupInfo","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}}},{"shortDesc":"Creates a group","method":"POST","path":"BU_ID/depId9/groups/create","verb":"/groups/create","notes":["Creates a new group for the given owner, or a global group.","Creation may fail if the group already exists or if the group id does not follow the naming rules"],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"GroupInfo","resolved":{"types":{"GroupInfo":{"type":"GroupInfo","javaClass":"com.zetapush.common.messages.remoting.GroupInfo","fields":[{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user. \n","required":true,"serverGenerated":false}],"anyField":false}}}},"responseBody":{"type":"GroupInfo","resolved":{"types":{"GroupInfo":{"type":"GroupInfo","javaClass":"com.zetapush.common.messages.remoting.GroupInfo","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"fields":[{"name":"owner","description":"","required":true,"serverGenerated":false}]}},{"shortDesc":"Removes a user from a group","method":"POST","path":"BU_ID/depId9/groups/delUser","verb":"/groups/delUser","notes":["Removes the given user from the given group for the given owner, or for a global group."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"UserGroup","resolved":{"types":{"UserGroup":{"type":"UserGroup","javaClass":"com.zetapush.common.messages.remoting.UserGroup","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"user","description":"The user's key (as in __userKey)"}],"anyField":false}}}},"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"Removes a group","method":"POST","path":"BU_ID/depId9/groups/deleteGroup","verb":"/groups/deleteGroup","notes":["Removes an existing group for the given owner, or a global group."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"GroupRelated","resolved":{"types":{"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"Grants rights to a group","method":"POST","path":"BU_ID/depId9/groups/grant","verb":"/groups/grant","notes":["Grants the given rights to the given group for the given owner, or for a global group."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"Grants","resolved":{"types":{"Grants":{"type":"Grants","javaClass":"com.zetapush.common.messages.remoting.Grants","fields":[{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true},{"type":"List[String]","name":"actions","description":"Actions which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user. \n","required":true,"serverGenerated":false}],"anyField":false}}}},"responseBody":{"type":"Grants","resolved":{"types":{"Grants":{"type":"Grants","javaClass":"com.zetapush.common.messages.remoting.Grants","fields":[{"type":"List[String]","name":"actions","description":"Actions which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false}}},"fields":[{"name":"owner","description":"","required":true,"serverGenerated":false}]}},{"shortDesc":"Lists the grants for a group","method":"POST","path":"BU_ID/depId9/groups/grants","verb":"/groups/grants","notes":["Lists all the grants that have been previously given by 'grant' to the given group for the given owner, or for a global group.","Listing may fail if the group does not exist."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":false,"requestBody":{"type":"GroupRelated","resolved":{"types":{"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseBody":{"type":"GrantList","resolved":{"types":{"GrantList":{"type":"GrantList","javaClass":"com.zetapush.common.messages.remoting.GrantList","fields":[{"type":"List[GrantListItem]","name":"grants","description":"List of granted rights"},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GrantListItem":{"type":"GrantListItem","javaClass":"com.zetapush.common.messages.remoting.GrantListItem","fields":[{"type":"String","name":"action","description":"Configured authorized action"},{"type":"String","name":"resource","description":"Configured authorized resource"}],"anyField":false}}}}},{"shortDesc":"Lists the users of a group","method":"POST","path":"BU_ID/depId9/groups/groupUsers","verb":"/groups/groupUsers","notes":["Lists all the users of the given group for the given owner, or for a global group.","Listing may fail if the group does not exist."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":false,"requestBody":{"type":"GroupRelated","resolved":{"types":{"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseBody":{"type":"GroupUsers","resolved":{"types":{"GroupUsers":{"type":"GroupUsers","javaClass":"com.zetapush.common.messages.remoting.GroupUsers","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[String]","name":"users","description":"User keys of the group members"}],"anyField":false}}}}},{"shortDesc":"Lists the groups of a user","method":"GET","path":"BU_ID/depId9/groups/groups/{owner}","verb":"/groups/groups/{owner}","notes":["Returns the whole list of groups for the given owner."],"audience":"DEVELOPER","pathVariables":[{"name":"owner","type":"String","desc":"Owner of the groups to be listed"}],"requestParams":[],"scriptable":false,"responseBody":{"type":"List[GroupInfo]","resolved":{"types":{"GroupInfo":{"type":"GroupInfo","javaClass":"com.zetapush.common.messages.remoting.GroupInfo","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}}},{"shortDesc":"Revokes a right for a group","method":"POST","path":"BU_ID/depId9/groups/revoke","verb":"/groups/revoke","notes":["Revokes the given rights, previously given with 'grant' to the given group for the given owner, or for a global group."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"Grants","resolved":{"types":{"Grants":{"type":"Grants","javaClass":"com.zetapush.common.messages.remoting.Grants","fields":[{"type":"List[String]","name":"actions","description":"Actions which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false}}}},"responseBody":{"type":"Grants","resolved":{"types":{"Grants":{"type":"Grants","javaClass":"com.zetapush.common.messages.remoting.Grants","fields":[{"type":"List[String]","name":"actions","description":"Actions which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false}}}}}]}]},{"description":{"name":"HTTP client","description":"Web-service client. An admin records URL templates that can be called by users. Calls are not configurable by end-users. However an admin may leverage the macro service to achieve URL, headers and body configurability","deployableId":"httpclient","options":[{"name":"http_client_timeout","shortDesc":"HTTP timeout","description":"HTTP timeout (milliseconds). 5000 ms by default","defaultValue":"5000","type":"LONG"}],"type":"SERVICE"},"authents":[],"services":[{"http":true,"name":"Httpclient","description":"User API for http requests","grantSyntax":"","notes":[],"apis":[{"channel":"/service/BU_ID/depId18/call","description":"Makes a predefined request","verb":"call","notes":["Lookups a predefined request by name, and executes it."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"HttpClientCall","resolved":{"types":{"HttpClientCall":{"type":"HttpClientCall","javaClass":"com.zetapush.common.messages.httpclient.HttpClientCall","fields":[{"type":"String","name":"name","description":"name of the configured template","required":true},{"type":"String","name":"requestId","description":"optional client generated call ID to identify responses"}],"anyField":false}}}},"responseInfo":{"type":"HttpClientResponse","resolved":{"types":{"HttpClientResponse":{"type":"HttpClientResponse","javaClass":"com.zetapush.common.messages.httpclient.HttpClientResponse","fields":[{"type":"Object","name":"content","description":"received content"},{"type":"List[HttpClientHeader]","name":"headers","description":"received headers"},{"type":"int","name":"httpStatus","description":"response http status code"},{"type":"String","name":"requestId","description":"optional client generated call ID to identify responses"}],"anyField":false},"HttpClientHeader":{"type":"HttpClientHeader","javaClass":"com.zetapush.common.messages.httpclient.HttpClientHeader","fields":[{"type":"String","name":"name","description":"Header name","required":true},{"type":"String","name":"value","description":"Header value"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"The predefined request was not found."},{"code":"BAD_FORMAT","desc":"The given body could not be converted to a stream of bytes."}]},{"channel":"/service/BU_ID/depId18/request","description":"Makes a parameterized request","verb":"request","notes":["Executes an HTTP request with the given url, method, headers and body."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"HttpClientRequest","resolved":{"types":{"HttpClientRequest":{"type":"HttpClientRequest","javaClass":"com.zetapush.common.messages.httpclient.HttpClientRequest","fields":[{"type":"Object","name":"content","description":"Request body. String (passed as is) or complex object (serialized to json)"},{"type":"List[HttpClientHeader]","name":"headers","description":"Headers to be sent"},{"type":"String","name":"method","description":"HTTP method","required":true},{"type":"HttpClientParseMode","name":"parseMode","description":"How to parse the response content","required":true},{"type":"String","name":"requestId","description":"optional client generated call ID to identify responses"},{"type":"String","name":"url","description":"Remote URL. a literal string","required":true}],"anyField":false},"HttpClientHeader":{"type":"HttpClientHeader","javaClass":"com.zetapush.common.messages.httpclient.HttpClientHeader","fields":[{"type":"String","name":"name","description":"Header name","required":true},{"type":"String","name":"value","description":"Header value"}],"anyField":false},"HttpClientParseMode":{"type":"HttpClientParseMode","javaClass":"com.zetapush.common.messages.httpclient.HttpClientParseMode","enumValues":[{"name":"STRING","description":"Content is interpreted as a UTF8 character string"},{"name":"OBJECT","description":"Content is parsed as UTF8 JSON"},{"name":"BYTES","description":"Content is not interpreted, but available as a raw array of bytes"}],"anyField":false}}}},"responseInfo":{"type":"HttpClientResponse","resolved":{"types":{"HttpClientResponse":{"type":"HttpClientResponse","javaClass":"com.zetapush.common.messages.httpclient.HttpClientResponse","fields":[{"type":"Object","name":"content","description":"received content"},{"type":"List[HttpClientHeader]","name":"headers","description":"received headers"},{"type":"int","name":"httpStatus","description":"response http status code"},{"type":"String","name":"requestId","description":"optional client generated call ID to identify responses"}],"anyField":false},"HttpClientHeader":{"type":"HttpClientHeader","javaClass":"com.zetapush.common.messages.httpclient.HttpClientHeader","fields":[{"type":"String","name":"name","description":"Header name","required":true},{"type":"String","name":"value","description":"Header value"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"The predefined request was not found."},{"code":"BAD_FORMAT","desc":"The given body could not be converted to a stream of bytes."}]},{"channel":"/service/BU_ID/depId18/soap","description":"Makes a soap request","verb":"soap","notes":["Executes an HTTP SOAP request with the given url, method, headers and body."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"HttpClientSOAPRequest","resolved":{"types":{"HttpClientSOAPRequest":{"type":"HttpClientSOAPRequest","javaClass":"com.zetapush.common.messages.httpclient.HttpClientSOAPRequest","fields":[{"type":"Object","name":"content","description":"Request body. String (passed as is) or complex object (serialized to json)"},{"type":"List[HttpClientHeader]","name":"headers","description":"Headers to be sent"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"requestWrapperNamespace","description":"Use when the xml root type does not declare any namespace, but does need it"},{"type":"String","name":"soapAction","description":"SOAP action, as defined in the WSDL, for inclusion in the generated request headers"},{"type":"List[SoapFaultDefinition]","name":"soapFaults","description":"List of possible soap fault classes for this request"},{"type":"List[Object]","name":"soapHeaders","description":"Soap headers : the content of &lt;soapenv:Header&gt;"},{"type":"MacroTypeDefinition","name":"typeDefinition","description":"Type reference, as returned in ZMS by 'YourClassName.class' "},{"type":"String","name":"url","description":"Remote URL. a literal string","required":true}],"anyField":false},"HttpClientHeader":{"type":"HttpClientHeader","javaClass":"com.zetapush.common.messages.httpclient.HttpClientHeader","fields":[{"type":"String","name":"name","description":"Header name","required":true},{"type":"String","name":"value","description":"Header value"}],"anyField":false},"MacroScriptParam":{"type":"MacroScriptParam","javaClass":"com.zetapush.common.messages.macro.MacroScriptParam","fields":[{"type":"List[MacroScriptParamConstraint]","name":"constraints","description":"Optional parameter constraints"},{"type":"String","name":"name","description":"Parameter name"}],"anyField":false},"MacroScriptParamConstraint":{"type":"MacroScriptParamConstraint","javaClass":"com.zetapush.common.messages.macro.MacroScriptParamConstraint","fields":[{"type":"Map[String,Object]","name":"config","description":"Constraint configuration"},{"type":"String","name":"name","description":"Constraint name"}],"anyField":false},"MacroTypeDefinition":{"type":"MacroTypeDefinition","javaClass":"com.zetapush.common.messages.macro.MacroTypeDefinition","fields":[{"type":"List[MacroScriptParam]","name":"fields","description":"List of field definitions"},{"type":"String","name":"name","description":"Type name"},{"type":"Map[String,Object]","name":"thisObject","description":"Initializer. contains class common fields, copied into each new instance"}],"anyField":false},"SoapFaultDefinition":{"type":"SoapFaultDefinition","javaClass":"com.zetapush.common.messages.httpclient.HttpClientSOAPRequest.SoapFaultDefinition","fields":[{"type":"String","name":"targetNamespace"},{"type":"MacroTypeDefinition","name":"type","required":true}],"anyField":false}}}},"responseInfo":{"type":"HttpClientSOAPResponse","resolved":{"types":{"HttpClientSOAPResponse":{"type":"HttpClientSOAPResponse","javaClass":"com.zetapush.common.messages.httpclient.HttpClientSOAPResponse","fields":[{"type":"Object","name":"content","description":"received content"},{"type":"SoapFault","name":"fault"},{"type":"List[HttpClientHeader]","name":"headers","description":"received headers"},{"type":"int","name":"httpStatus","description":"response http status code"},{"type":"String","name":"requestId","description":"optional client generated call ID to identify responses"}],"anyField":false},"HttpClientHeader":{"type":"HttpClientHeader","javaClass":"com.zetapush.common.messages.httpclient.HttpClientHeader","fields":[{"type":"String","name":"name","description":"Header name","required":true},{"type":"String","name":"value","description":"Header value"}],"anyField":false},"SoapFault":{"type":"SoapFault","javaClass":"com.zetapush.common.messages.httpclient.SoapFault","fields":[{"type":"List[Object]","name":"detail"},{"type":"String","name":"faultcode"},{"type":"String","name":"faultstring"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"The predefined request was not found."},{"code":"BAD_FORMAT","desc":"The given body could not be converted to a stream of bytes."}]}],"notifs":[]}],"controllers":[{"description":"Administrative API for the http client","notes":["Here you can manage predefined http requests."],"apis":[{"shortDesc":"Stores a request","method":"POST","path":"BU_ID/depId18/http/create","verb":"/http/create","notes":["Stores an http request template.","This API can only be used for static requests ; use the real-time API for dynamic behaviour."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":false,"requestBody":{"type":"HttpClientTemplate","resolved":{"types":{"HttpClientTemplate":{"type":"HttpClientTemplate","javaClass":"com.zetapush.common.messages.httpclient.HttpClientTemplate","fields":[{"type":"Object","name":"content","description":"Request body. String (passed as is) or complex object (serialized to json)"},{"type":"List[HttpClientHeader]","name":"headers","description":"Headers to be sent"},{"type":"String","name":"method","description":"HTTP method","required":true},{"type":"String","name":"name","description":"Name of the request template (primary key)","required":true},{"type":"HttpClientParseMode","name":"parseMode","description":"How to parse the response content","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"url","description":"Remote URL. a literal string","required":true}],"anyField":false},"HttpClientHeader":{"type":"HttpClientHeader","javaClass":"com.zetapush.common.messages.httpclient.HttpClientHeader","fields":[{"type":"String","name":"name","description":"Header name","required":true},{"type":"String","name":"value","description":"Header value"}],"anyField":false},"HttpClientParseMode":{"type":"HttpClientParseMode","javaClass":"com.zetapush.common.messages.httpclient.HttpClientParseMode","enumValues":[{"name":"STRING","description":"Content is interpreted as a UTF8 character string"},{"name":"OBJECT","description":"Content is parsed as UTF8 JSON"},{"name":"BYTES","description":"Content is not interpreted, but available as a raw array of bytes"}],"anyField":false}}}},"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"Deletes a request","method":"GET","path":"BU_ID/depId18/http/delete/{name}","verb":"/http/delete/{name}","notes":["Deletes an existing request template with the given 'name'."],"audience":"DEVELOPER","pathVariables":[{"name":"name","type":"String","desc":"no description"}],"requestParams":[],"scriptable":false,"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"Lists the requests","method":"GET","path":"BU_ID/depId18/http/list","verb":"/http/list","notes":["Returns a paginated list of defined request templates."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":false,"responseBody":{"type":"PageContent[HttpClientTemplate]","resolved":{"types":{"HttpClientHeader":{"type":"HttpClientHeader","javaClass":"com.zetapush.common.messages.httpclient.HttpClientHeader","fields":[{"type":"String","name":"name","description":"Header name","required":true},{"type":"String","name":"value","description":"Header value"}],"anyField":false},"HttpClientParseMode":{"type":"HttpClientParseMode","javaClass":"com.zetapush.common.messages.httpclient.HttpClientParseMode","enumValues":[{"name":"STRING","description":"Content is interpreted as a UTF8 character string"},{"name":"OBJECT","description":"Content is parsed as UTF8 JSON"},{"name":"BYTES","description":"Content is not interpreted, but available as a raw array of bytes"}],"anyField":false},"HttpClientTemplate":{"type":"HttpClientTemplate","javaClass":"com.zetapush.common.messages.httpclient.HttpClientTemplate","fields":[{"type":"Object","name":"content","description":"Request body. String (passed as is) or complex object (serialized to json)"},{"type":"List[HttpClientHeader]","name":"headers","description":"Headers to be sent"},{"type":"String","name":"method","description":"HTTP method","required":true},{"type":"String","name":"name","description":"Name of the request template (primary key)","required":true},{"type":"HttpClientParseMode","name":"parseMode","description":"How to parse the response content","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"url","description":"Remote URL. a literal string","required":true}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}}}]}]},{"description":{"name":"Logs","description":"Log service","deployableId":"logs","type":"SERVICE"},"authents":[],"services":[{"http":false,"name":"Logs","description":"Log API","grantSyntax":"","notes":["User API for logging."],"apis":[{"channel":"/service/BU_ID/depId3/log","description":"Creates a log entry","verb":"log","notes":["Adds some server generated data and stores the entry into the sink defined by configuration."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"LogRequest","resolved":{"types":{"LogRequest":{"type":"LogRequest","javaClass":"com.zetapush.common.log.LogRequest","fields":[{"type":"String","name":"contextId","description":"Context ID. Clients and developers must not pass this explicitly. This value was generated by the server and passed back by the worker SDKs."},{"type":"Map[String,Object]","name":"custom","description":"For developer-defined values, tags, etc... A typical usage is to trace an application-generated transaction ID across several API calls, to be able to retrace a full click-stream afterwards"},{"type":"Object","name":"data","description":"The actual data you are logging. Can be a text message, or more structured data."},{"type":"LogLevel","name":"level","description":"By setting the level you ensure that this request ends up in the logs only when configured to do so."},{"type":"String","name":"logger","description":"Logger name. Hierarchical, dot-separated identifier, such as 'myClass.myVerb' to ease log storage and filtering."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Refines the identification of a connected client. Automtically set by the server."},{"type":"long","name":"timestampOverride","description":"User supplied timestamp. The server will still store its own timestamp."}],"anyField":false},"LogLevel":{"type":"LogLevel","javaClass":"com.zetapush.common.log.LogLevel","enumValues":[{"name":"DEBUG","description":"All information usually needed by developers or administrators to help diagnose problems."},{"name":"ERROR","description":"Something is wrong enough to compromise the correct processing of a request (for example a mandatory external resource, e.g. another HTTP server, is not responding)"},{"name":"TRACE","description":"Lowest level of traces. All service verbs at the TRACE level will dump all input and output. DO NOT enable TRACE unless you are prepared to go through a very high volume of logs. Enabling TRACE may degrade application performance."},{"name":"WARN","description":"Anything that can cause application misbehaviour, but that does not need human intervention."},{"name":"INFO","description":"Events meaningful for your application should go there : the creation of a user, a purchase, etc ..."}],"anyField":false}}}},"errors":[]}],"notifs":[{"type":"LogEntry","resolved":{"types":{"LogEntry":{"type":"LogEntry","javaClass":"com.zetapush.common.log.LogEntry","fields":[{"type":"String","name":"contextId","description":"Context ID. Clients and developers must not pass this explicitly. This value was generated by the server and passed back by the worker SDKs."},{"type":"Map[String,Object]","name":"custom","description":"For developer-defined values, tags, etc... A typical usage is to trace an application-generated transaction ID across several API calls, to be able to retrace a full click-stream afterwards"},{"type":"Object","name":"data","description":"The actual data you are logging. Can be a text message, or more structured data."},{"type":"LogLevel","name":"level","description":"By setting the level you ensure that this request ends up in the logs only when configured to do so."},{"type":"String","name":"logger","description":"Logger name. Hierarchical, dot-separated identifier, such as 'myClass.myVerb' to ease log storage and filtering."},{"type":"String","name":"node","description":"server node name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Refines the identification of a connected client. Automtically set by the server."},{"type":"Long","name":"timestamp","description":"server-generated timestamp"},{"type":"long","name":"timestampOverride","description":"User supplied timestamp. The server will still store its own timestamp."}],"anyField":false},"LogLevel":{"type":"LogLevel","javaClass":"com.zetapush.common.log.LogLevel","enumValues":[{"name":"DEBUG","description":"All information usually needed by developers or administrators to help diagnose problems."},{"name":"ERROR","description":"Something is wrong enough to compromise the correct processing of a request (for example a mandatory external resource, e.g. another HTTP server, is not responding)"},{"name":"TRACE","description":"Lowest level of traces. All service verbs at the TRACE level will dump all input and output. DO NOT enable TRACE unless you are prepared to go through a very high volume of logs. Enabling TRACE may degrade application performance."},{"name":"WARN","description":"Anything that can cause application misbehaviour, but that does not need human intervention."},{"name":"INFO","description":"Events meaningful for your application should go there : the creation of a user, a purchase, etc ..."}],"anyField":false}}},"channel":"logged","target":"users with read or all privileges on the sandbox","description":"","variableChannelName":false,"notes":["This notification is automatically sent each time a log entry is created.","Notifications are sent if and only if  the appropriate loggers are configured to do so and the sink type is set to REAL_TIME."],"resolvedType":{"typeName":"LogEntry","imports":["com.zetapush.common.log.LogEntry"]}}]}],"controllers":[{"description":"Administrative API for log management.","notes":["You can configure and list logs"],"apis":[{"shortDesc":"Configures the logs","method":"POST","path":"BU_ID/depId3/logs/configure","verb":"/logs/configure","notes":["Creates a table, with the given structure.","A table consists of a name and column definitions. You can provide as many columns as you wish.","This API never deletes columns."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"LogConfig","resolved":{"types":{"LogConfig":{"type":"LogConfig","javaClass":"com.zetapush.common.log.LogConfig","fields":[{"type":"Map[String,LogLevel]","name":"levels","description":"Maps loggers to levels (DEBUG, INFO, ...)"},{"type":"LogLevel","name":"rootLevel","description":"Level for the root logger"},{"type":"LogSinkConfig","name":"sinkConfig","description":"specific to each sink type"}],"anyField":false},"LogLevel":{"type":"LogLevel","javaClass":"com.zetapush.common.log.LogLevel","enumValues":[{"name":"DEBUG","description":"All information usually needed by developers or administrators to help diagnose problems."},{"name":"ERROR","description":"Something is wrong enough to compromise the correct processing of a request (for example a mandatory external resource, e.g. another HTTP server, is not responding)"},{"name":"TRACE","description":"Lowest level of traces. All service verbs at the TRACE level will dump all input and output. DO NOT enable TRACE unless you are prepared to go through a very high volume of logs. Enabling TRACE may degrade application performance."},{"name":"WARN","description":"Anything that can cause application misbehaviour, but that does not need human intervention."},{"name":"INFO","description":"Events meaningful for your application should go there : the creation of a user, a purchase, etc ..."}],"anyField":false},"LogSinkConfig":{"type":"LogSinkConfig","javaClass":"com.zetapush.common.log.LogSinkConfig","fields":[{"type":"Map[String,Object]","name":"sinkConfig"},{"type":"LogSinkType","name":"sinkType"}],"anyField":false},"LogSinkType":{"type":"LogSinkType","javaClass":"com.zetapush.common.log.LogSinkType","enumValues":[{"name":"TODO","description":"missing enum desc"},{"name":"INTERNAL","description":"missing enum desc"},{"name":"REAL_TIME","description":"missing enum desc"}],"anyField":false}}}},"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"List log entries","method":"POST","path":"BU_ID/depId3/logs/list","verb":"/logs/list","notes":[],"audience":"PUBLIC","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"LogListRequest","resolved":{"types":{"LogListRequest":{"type":"LogListRequest","javaClass":"com.zetapush.common.log.LogListRequest","fields":[{"type":"Pagination","name":"page"},{"type":"long","name":"start"},{"type":"long","name":"stop"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseBody":{"type":"LogEntries","resolved":{"types":{"LogEntries":{"type":"LogEntries","javaClass":"com.zetapush.common.log.LogEntries","fields":[{"type":"PageContent[LogEntry]","name":"entries"},{"type":"Pagination","name":"page"},{"type":"long","name":"start"},{"type":"long","name":"stop"}],"anyField":false},"LogEntry":{"type":"LogEntry","javaClass":"com.zetapush.common.log.LogEntry","fields":[{"type":"String","name":"contextId","description":"Context ID. Clients and developers must not pass this explicitly. This value was generated by the server and passed back by the worker SDKs."},{"type":"Map[String,Object]","name":"custom","description":"For developer-defined values, tags, etc... A typical usage is to trace an application-generated transaction ID across several API calls, to be able to retrace a full click-stream afterwards"},{"type":"Object","name":"data","description":"The actual data you are logging. Can be a text message, or more structured data."},{"type":"LogLevel","name":"level","description":"By setting the level you ensure that this request ends up in the logs only when configured to do so."},{"type":"String","name":"logger","description":"Logger name. Hierarchical, dot-separated identifier, such as 'myClass.myVerb' to ease log storage and filtering."},{"type":"String","name":"node","description":"server node name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Refines the identification of a connected client. Automtically set by the server."},{"type":"Long","name":"timestamp","description":"server-generated timestamp"},{"type":"long","name":"timestampOverride","description":"User supplied timestamp. The server will still store its own timestamp."}],"anyField":false},"LogLevel":{"type":"LogLevel","javaClass":"com.zetapush.common.log.LogLevel","enumValues":[{"name":"DEBUG","description":"All information usually needed by developers or administrators to help diagnose problems."},{"name":"ERROR","description":"Something is wrong enough to compromise the correct processing of a request (for example a mandatory external resource, e.g. another HTTP server, is not responding)"},{"name":"TRACE","description":"Lowest level of traces. All service verbs at the TRACE level will dump all input and output. DO NOT enable TRACE unless you are prepared to go through a very high volume of logs. Enabling TRACE may degrade application performance."},{"name":"WARN","description":"Anything that can cause application misbehaviour, but that does not need human intervention."},{"name":"INFO","description":"Events meaningful for your application should go there : the creation of a user, a purchase, etc ..."}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}}}]}]},{"description":{"name":"Macros","description":"Macro-command service. An admin defines macro-commands that can sequentially call any number of other api verbs, loop on collections of data, make decisions, etc... End-users play them, with contextual parameters","deployableId":"macro","type":"SERVICE"},"authents":[],"services":[{"http":false,"name":"MacroDebug","description":"User API for macro debugging","grantSyntax":"","notes":["Debugger API for macro.","These API verbs are not intended for use by most developers."],"apis":[{"channel":"/service/BU_ID/depId15/breakpoint","description":"Enables or disables a breakpoint","verb":"breakpoint","serverOnly":false,"clientOnly":true,"slaveDisabled":false,"paramInfo":{"type":"MacroDebugBreakpointSet","resolved":{"types":{"MacroDebugBreakpointSet":{"type":"MacroDebugBreakpointSet","javaClass":"com.zetapush.common.messages.macro.MacroDebugBreakpointSet","fields":[{"type":"MacroDebugBreakpoint","name":"breakpoint","description":"Breakpoint information","required":true},{"type":"boolean","name":"enabled","description":"Whether the breakpoint is enabled or not"},{"type":"String","name":"token","description":"Debug token, previously generated by a call to the admin verb 'livedebugToken'"}],"anyField":false},"MacroDebugBreakpoint":{"type":"MacroDebugBreakpoint","javaClass":"com.zetapush.common.messages.macro.MacroDebugBreakpoint","fields":[{"type":"int","name":"line","description":"Line number inside the source file"},{"type":"String","name":"location","description":"Source file information"}],"anyField":false}}}},"errors":[{"code":"DEBUG_FORBIDDEN","desc":"Invalid or missing debug token."}]},{"channel":"/service/BU_ID/depId15/info","description":"Requests some information","verb":"info","serverOnly":false,"clientOnly":true,"slaveDisabled":false,"paramInfo":{"type":"MacroDebugInfoRequest","resolved":{"types":{"MacroDebugInfoRequest":{"type":"MacroDebugInfoRequest","javaClass":"com.zetapush.common.messages.macro.MacroDebugInfoRequest","fields":[{"type":"String","name":"exp","description":"expression to evaluate"},{"type":"int","name":"frame","description":"Frame index, as sent by the server by 'resume'"},{"type":"String","name":"path","description":"optional path to apply on the result of the evaluation of exp"},{"type":"String","name":"requestId","description":"request ID"},{"type":"String","name":"token","description":"Debug token, previously generated by a call to the admin verb 'livedebugToken'"}],"anyField":false}}}},"errors":[{"code":"DEBUG_FORBIDDEN","desc":"Invalid or missing debug token."}]},{"channel":"/service/BU_ID/depId15/livedebug","description":"Debugs a previously recorded macro","verb":"livedebug","notes":["The given breakpoints will be honored, causing a suspension of the execution, resumable via 'resume'.","Only one debug session can be active at any given time."],"serverOnly":false,"clientOnly":true,"slaveDisabled":false,"paramInfo":{"type":"MacroDebugSession","resolved":{"types":{"MacroDebugSession":{"type":"MacroDebugSession","javaClass":"com.zetapush.common.messages.macro.MacroDebugSession","fields":[{"type":"List[MacroDebugBreakpoint]","name":"breakpoints","description":"List of breakpoints for the session"},{"type":"int","name":"debug","description":"Deprecated. Use the 'livedebug' API."},{"type":"boolean","name":"hardFail","description":"True if an error should trigger a response on an error channel, or false (the default) if the error should be simply reported in an error field"},{"type":"String","name":"name","description":"Macro name","required":true},{"type":"Map[String,Object]","name":"parameters","description":"Macro named parameters"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"token","description":"Debug token, previously generated by a call to the admin verb 'livedebugToken'"}],"anyField":false},"MacroDebugBreakpoint":{"type":"MacroDebugBreakpoint","javaClass":"com.zetapush.common.messages.macro.MacroDebugBreakpoint","fields":[{"type":"int","name":"line","description":"Line number inside the source file"},{"type":"String","name":"location","description":"Source file information"}],"anyField":false}}}},"otherOutputs":[{"type":"MacroCompletion","resolved":{"types":{"MacroCompletion":{"type":"MacroCompletion","javaClass":"com.zetapush.common.messages.macro.MacroCompletion","fields":[{"type":"List[ZetaApiError]","name":"errors","description":"Encountered errors. Error reporting behavior can be changed with the hardFail parameter."},{"type":"List[String]","name":"log","description":"Generated debug output, if applicable"},{"type":"String","name":"name","description":"Macro name"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Object","name":"result","description":"Generated result, if applicable"},{"type":"MacroCompletionStats","name":"stats","description":"Execution statistics, when debug is enabled"}],"anyField":false},"MacroCompletionStats":{"type":"MacroCompletionStats","javaClass":"com.zetapush.common.messages.macro.MacroCompletion.MacroCompletionStats","fields":[{"type":"long","name":"cycles","description":"Total number of VM cycles"},{"type":"long","name":"elapsedMillis","description":"Elapsed server time for the execution of the macro"},{"type":"long","name":"nbCalls","description":"Total number of called verbs"},{"type":"long","name":"ram","description":"Total number of RAM bytes"}],"anyField":false},"ZetaApiError":{"type":"ZetaApiError","javaClass":"com.zetapush.common.messages.ZetaApiError","fields":[{"type":"String","name":"code","description":"Symbolic error code"},{"type":"Object","name":"context","description":"Developer-generated context. Each code can have a specific context format."},{"type":"String","name":"location","description":"Error location, if available"},{"type":"String","name":"message","description":"Human readable message. May vary depending on one or more of locale, input, developer code."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false}}},"channel":"completed","target":"","description":"The macro is debugged. Upon completion the caller is asynchronously notified.","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"MacroCompletion","imports":["com.zetapush.common.messages.macro.MacroCompletion"]}}],"errors":[{"code":"DEBUG_FORBIDDEN","desc":"Invalid or missing debug token."}]},{"channel":"/service/BU_ID/depId15/resume","description":"Resumes a paused macro","verb":"resume","serverOnly":false,"clientOnly":true,"slaveDisabled":false,"paramInfo":{"type":"MacroDebugStep","resolved":{"types":{"MacroDebugStep":{"type":"MacroDebugStep","javaClass":"com.zetapush.common.messages.macro.MacroDebugStep","fields":[{"type":"String","name":"token","description":"Debug token, previously generated by a call to the admin verb 'livedebugToken'"},{"type":"MacroDebugStepType","name":"type","description":"Step type"}],"anyField":false},"MacroDebugStepType":{"type":"MacroDebugStepType","javaClass":"com.zetapush.common.messages.macro.MacroDebugStep.MacroDebugStepType","enumValues":[{"name":"STEP_OVER","description":"Step over the next instruction"},{"name":"RESUME","description":"Resume execution"},{"name":"TERMINATE","description":"Terminate execution"},{"name":"STEP_INTO","description":"Step into the next macrvo call"}],"anyField":false}}}},"errors":[{"code":"DEBUG_FORBIDDEN","desc":"Invalid or missing debug token."}]},{"channel":"/service/BU_ID/depId15/variable","description":"Sets a variable value","verb":"variable","serverOnly":false,"clientOnly":true,"slaveDisabled":false,"paramInfo":{"type":"MacroDebugVariableChange","resolved":{"types":{"MacroDebugVariableChange":{"type":"MacroDebugVariableChange","javaClass":"com.zetapush.common.messages.macro.MacroDebugVariableChange","fields":[{"type":"Object","name":"data","description":"Variable value"},{"type":"int","name":"frame","description":"Frame index, as sent by the server by 'resume'"},{"type":"String","name":"name","description":"Variable name","required":true},{"type":"String","name":"token","description":"Debug token, previously generated by a call to the admin verb 'livedebugToken'"}],"anyField":false}}}},"errors":[{"code":"DEBUG_FORBIDDEN","desc":"Invalid or missing debug token."}]}],"notifs":[{"type":"MacroTrace","resolved":{"types":{"MacroTrace":{"type":"MacroTrace","javaClass":"com.zetapush.common.messages.macro.MacroTrace","fields":[{"type":"long","name":"ctx","description":"Trace context (differentiates client calls)"},{"type":"Object","name":"data","description":"Trace data"},{"type":"TraceLevel","name":"level","description":"Trace level"},{"type":"int","name":"line","description":"Line number in the source code."},{"type":"String","name":"location","description":"Location of the source code."},{"type":"int","name":"n","description":"Trace number (monotonous increase)"},{"type":"String","name":"owner","description":"Zetapush key of the user generating the trace"},{"type":"TraceType","name":"type","description":"Trace type (differentiates client calls)"}],"anyField":false},"TraceLevel":{"type":"TraceLevel","javaClass":"com.zetapush.common.messages.macro.MacroTrace.TraceLevel","enumValues":[{"name":"DEBUG","description":"Debug (server-generated traces are DEBUG)"},{"name":"ERROR","description":"Currently unused"},{"name":"TRACE","description":"From the 'trace' keyword"},{"name":"WARN","description":"Currently unused"},{"name":"INFO","description":"Currently unused"}],"anyField":false},"TraceType":{"type":"TraceType","javaClass":"com.zetapush.common.messages.macro.MacroTrace.TraceType","enumValues":[{"name":"MS","description":"A macro is starting"},{"name":"ME","description":"A macro has ended"},{"name":"CMT","description":"User comment"},{"name":"USR","description":"Developer-generated"}],"anyField":false}}},"channel":"trace","target":"the developer","description":"Server traces are sent to the developer when debug is enabled.","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"MacroTrace","imports":["com.zetapush.common.messages.macro.MacroTrace"]}},{"type":"MacroDebugEvent","resolved":{"types":{"MacroDebugEvent":{"type":"MacroDebugEvent","subTypeMarker":"_t","javaClass":"com.zetapush.common.messages.macro.MacroDebugEvent","subtypes":{"p":"MacroDebugEventPause","r":"MacroDebugEventResume","t":"MacroDebugEventTermination","v":"MacroDebugEventVar"},"fields":[],"anyField":false},"MacroDebugEventPause":{"type":"MacroDebugEventPause","javaClass":"com.zetapush.common.messages.macro.MacroDebugEventPause","fields":[{"type":"List[MacroDebugFrame]","name":"frames","description":"Stack frames"},{"type":"int","name":"line","description":"Line number"},{"type":"String","name":"location","description":"Source location"},{"type":"boolean","name":"stepIntoPossible","description":"Whether it is possible to step into."}],"anyField":false},"MacroDebugEventResume":{"type":"MacroDebugEventResume","javaClass":"com.zetapush.common.messages.macro.MacroDebugEventResume","fields":[],"anyField":false},"MacroDebugEventTermination":{"type":"MacroDebugEventTermination","javaClass":"com.zetapush.common.messages.macro.MacroDebugEventTermination","fields":[],"anyField":false},"MacroDebugEventVar":{"type":"MacroDebugEventVar","javaClass":"com.zetapush.common.messages.macro.MacroDebugEventVar","fields":[{"type":"ZetaApiError","name":"error","description":"The request may have caused an error"},{"type":"int","name":"frame","description":"Frame index, as requested"},{"type":"String","name":"requestId","description":"request ID"},{"type":"String","name":"type","description":"Data type"},{"type":"MacroDebugFrameValue","name":"value","description":"Data value"},{"type":"String","name":"var","description":"Evaluated expression, as requested"}],"anyField":false},"MacroDebugFrame":{"type":"MacroDebugFrame","javaClass":"com.zetapush.common.messages.macro.MacroDebugFrame","fields":[{"type":"int","name":"line","description":"Line number"},{"type":"String","name":"location","description":"Source location"},{"type":"String","name":"macroName","description":"Macro name"},{"type":"List[MacroDebugFrameVariable]","name":"vars","description":"Variables"}],"anyField":false},"MacroDebugFrameValue":{"type":"MacroDebugFrameValue","javaClass":"com.zetapush.common.messages.macro.MacroDebugFrameValue","fields":[{"type":"String","name":"type","description":"Value type"},{"type":"Object","name":"value","description":"Actual value, for primitive types. Size for complex types"},{"type":"List[MacroDebugFrameVariable]","name":"vars","description":"Sub fields, for complex types"}],"anyField":false},"MacroDebugFrameVariable":{"type":"MacroDebugFrameVariable","javaClass":"com.zetapush.common.messages.macro.MacroDebugFrameVariable","fields":[{"type":"String","name":"name","description":"Variable name"},{"type":"String","name":"type","description":"Variable type"},{"type":"MacroDebugFrameValue","name":"value","description":"Variable value"}],"anyField":false},"ZetaApiError":{"type":"ZetaApiError","javaClass":"com.zetapush.common.messages.ZetaApiError","fields":[{"type":"String","name":"code","description":"Symbolic error code"},{"type":"Object","name":"context","description":"Developer-generated context. Each code can have a specific context format."},{"type":"String","name":"location","description":"Error location, if available"},{"type":"String","name":"message","description":"Human readable message. May vary depending on one or more of locale, input, developer code."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false}}},"channel":"debug","target":"the developer","description":"Debug events are sent to the developer (this is used by the Eclipse plugin)","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"MacroDebugEvent","imports":["com.zetapush.common.messages.macro.MacroDebugEvent"]}}]},{"http":true,"name":"Macro","description":"User API for macro execution","grantSyntax":"","notes":["Simple errors are reported as usual.","However, the macro execution verbs treat most errors in a particular way : instead of reporting errors on the usual 'error' channel, errors are put in the returned 'MacroCompletion' result.","This behavior can be tuned on a per-call basis with the hardFail parameter.","Note that some particular errors will always behave as if hardFail were true, because they are related to programming errors, or prevent processing from ending gracefully : STACK_OVERFLOW, NO_SUCH_FUNCTION, RAM_EXCEEDED, CYCLES_EXCEEDED, TIME_EXCEEDED, QUOTA_EXCEEDED, RATE_EXCEEDED, BAD_COMPARATOR_VALUE"],"apis":[{"channel":"/service/BU_ID/depId15/call","description":"Plays a previously recorded macro","verb":"call","notes":["DO NOT use this verb from inside an enclosing macro when you need the result in order to proceed with the enclosing macro.","You can override the default notification channel when defining the macro."],"serverOnly":false,"clientOnly":true,"slaveDisabled":false,"paramInfo":{"type":"MacroPlay","resolved":{"types":{"MacroPlay":{"type":"MacroPlay","javaClass":"com.zetapush.common.messages.macro.MacroPlay","fields":[{"type":"int","name":"debug","description":"Deprecated. Use the 'livedebug' API."},{"type":"boolean","name":"hardFail","description":"True if an error should trigger a response on an error channel, or false (the default) if the error should be simply reported in an error field"},{"type":"String","name":"name","description":"Macro name","required":true},{"type":"Map[String,Object]","name":"parameters","description":"Macro named parameters"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"otherOutputs":[{"type":"MacroCompletion","resolved":{"types":{"MacroCompletion":{"type":"MacroCompletion","javaClass":"com.zetapush.common.messages.macro.MacroCompletion","fields":[{"type":"List[ZetaApiError]","name":"errors","description":"Encountered errors. Error reporting behavior can be changed with the hardFail parameter."},{"type":"List[String]","name":"log","description":"Generated debug output, if applicable"},{"type":"String","name":"name","description":"Macro name"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Object","name":"result","description":"Generated result, if applicable"},{"type":"MacroCompletionStats","name":"stats","description":"Execution statistics, when debug is enabled"}],"anyField":false},"MacroCompletionStats":{"type":"MacroCompletionStats","javaClass":"com.zetapush.common.messages.macro.MacroCompletion.MacroCompletionStats","fields":[{"type":"long","name":"cycles","description":"Total number of VM cycles"},{"type":"long","name":"elapsedMillis","description":"Elapsed server time for the execution of the macro"},{"type":"long","name":"nbCalls","description":"Total number of called verbs"},{"type":"long","name":"ram","description":"Total number of RAM bytes"}],"anyField":false},"ZetaApiError":{"type":"ZetaApiError","javaClass":"com.zetapush.common.messages.ZetaApiError","fields":[{"type":"String","name":"code","description":"Symbolic error code"},{"type":"Object","name":"context","description":"Developer-generated context. Each code can have a specific context format."},{"type":"String","name":"location","description":"Error location, if available"},{"type":"String","name":"message","description":"Human readable message. May vary depending on one or more of locale, input, developer code."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false}}},"channel":"completed","target":"","description":"The macro is ran. Upon completion the caller is asynchronously notified.","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"MacroCompletion","imports":["com.zetapush.common.messages.macro.MacroCompletion"]}}],"errors":[{"code":"NOT_FOUND","desc":"A macro with the given name could not be found."},{"code":"CAPACITY_EXCEEDED","desc":"The macro execution engine allows only a fixed amount of macros to be run concurrently."}]},{"channel":"/service/BU_ID/depId15/evaluate","description":"Evaluates a function result.","verb":"evaluate","serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"MacroFunctionRequest","resolved":{"types":{"MacroFunctionRequest":{"type":"MacroFunctionRequest","javaClass":"com.zetapush.str.services.macro.MacroFunctionRequest","fields":[{"type":"String","name":"name","description":"Function name","required":true},{"type":"List[Object]","name":"params","description":"Function parameter values","required":true}],"anyField":false}}}},"responseInfo":{"type":"MacroFunctionResult","resolved":{"types":{"MacroFunctionResult":{"type":"MacroFunctionResult","javaClass":"com.zetapush.str.services.macro.MacroFunctionResult","fields":[{"type":"Object","name":"result","description":"Function evaluation result"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"A macro with the given name could not be found."},{"code":"CAPACITY_EXCEEDED","desc":"The macro execution engine allows only a fixed amount of macros to be run concurrently."}]},{"channel":"/service/BU_ID/depId15/func","description":"Plays a previously recorded macro and returns the result.","verb":"func","notes":["Use this verb when you want to synchronously call a macro from inside another macro.","Despite being a server verb, func will honor the 'loud' modifier in ZMS."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"MacroPlay","resolved":{"types":{"MacroPlay":{"type":"MacroPlay","javaClass":"com.zetapush.common.messages.macro.MacroPlay","fields":[{"type":"int","name":"debug","description":"Deprecated. Use the 'livedebug' API."},{"type":"boolean","name":"hardFail","description":"True if an error should trigger a response on an error channel, or false (the default) if the error should be simply reported in an error field"},{"type":"String","name":"name","description":"Macro name","required":true},{"type":"Map[String,Object]","name":"parameters","description":"Macro named parameters"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"MacroCompletion","resolved":{"types":{"MacroCompletion":{"type":"MacroCompletion","javaClass":"com.zetapush.common.messages.macro.MacroCompletion","fields":[{"type":"List[ZetaApiError]","name":"errors","description":"Encountered errors. Error reporting behavior can be changed with the hardFail parameter."},{"type":"List[String]","name":"log","description":"Generated debug output, if applicable"},{"type":"String","name":"name","description":"Macro name"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Object","name":"result","description":"Generated result, if applicable"},{"type":"MacroCompletionStats","name":"stats","description":"Execution statistics, when debug is enabled"}],"anyField":false},"MacroCompletionStats":{"type":"MacroCompletionStats","javaClass":"com.zetapush.common.messages.macro.MacroCompletion.MacroCompletionStats","fields":[{"type":"long","name":"cycles","description":"Total number of VM cycles"},{"type":"long","name":"elapsedMillis","description":"Elapsed server time for the execution of the macro"},{"type":"long","name":"nbCalls","description":"Total number of called verbs"},{"type":"long","name":"ram","description":"Total number of RAM bytes"}],"anyField":false},"ZetaApiError":{"type":"ZetaApiError","javaClass":"com.zetapush.common.messages.ZetaApiError","fields":[{"type":"String","name":"code","description":"Symbolic error code"},{"type":"Object","name":"context","description":"Developer-generated context. Each code can have a specific context format."},{"type":"String","name":"location","description":"Error location, if available"},{"type":"String","name":"message","description":"Human readable message. May vary depending on one or more of locale, input, developer code."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"A macro with the given name could not be found."},{"code":"CAPACITY_EXCEEDED","desc":"The macro execution engine allows only a fixed amount of macros to be run concurrently."}]},{"channel":"/service/BU_ID/depId15/getPublicHttpUrl","description":"Returns the base HTTP URL for 'macro/exec' in this macro service.","verb":"getPublicHttpUrl","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"responseInfo":{"type":"MacroExecBaseUrl","resolved":{"types":{"MacroExecBaseUrl":{"type":"MacroExecBaseUrl","javaClass":"com.zetapush.common.messages.macro.MacroExecBaseUrl","fields":[{"type":"String","name":"url"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"A macro with the given name could not be found."},{"code":"CAPACITY_EXCEEDED","desc":"The macro execution engine allows only a fixed amount of macros to be run concurrently."}]},{"channel":"/service/BU_ID/depId15/sudo","description":"Similar to func, with the ability to impersonate any user at will.","verb":"sudo","deprecation":"Starting with STR v2.3.15 and plugin v1.1.53, all API calls can use the sudo keyword from ZMS macro code.","notes":["Use this verb when you do not want to use or cannot use the standard rights system and wish to bypass it completely.","Use this verb sparingly, as it can give the caller any right on any resource."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"SuMacroPlay","resolved":{"types":{"SuMacroPlay":{"type":"SuMacroPlay","javaClass":"com.zetapush.common.messages.macro.SuMacroPlay","fields":[{"type":"int","name":"debug","description":"Deprecated. Use the 'livedebug' API."},{"type":"boolean","name":"hardFail","description":"True if an error should trigger a response on an error channel, or false (the default) if the error should be simply reported in an error field"},{"type":"String","name":"name","description":"Macro name","required":true},{"type":"Map[String,Object]","name":"parameters","description":"Macro named parameters"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"suKey","description":"Key of the impersonated user","required":true},{"type":"List[MacroInfo]","name":"tempMacros","description":"Temporary macros. This feature does not support concurrent calls."}],"anyField":false},"MacroBlock":{"type":"MacroBlock","javaClass":"com.zetapush.common.messages.macro.MacroBlock","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true}],"anyField":false},"MacroCall":{"type":"MacroCall","javaClass":"com.zetapush.common.messages.macro.MacroCall","fields":[{"type":"String","name":"deploymentId","description":"DeploymentId of the service to be called","required":true},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"boolean","name":"noExpand","description":"Specifies whether parameter expansion should be avoided. The server will of course set this to true automatically if no refs are present. Defaults to false"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the verb. The format is the format expected by the target verb, with the following exception : any field can be replaced by a placeholder. A placeholder is an object with a '__ref' field. The value of the ref field follows java EL syntax with some pre-defined objects and functions (see the documentation on macros)"},{"type":"String","name":"resultName","description":"Name of the result, for future reference"},{"type":"String","name":"suKey","description":"Key of the impersonated user"},{"type":"String","name":"verb","description":"Verb to be called inside the specified service","required":true}],"anyField":false},"MacroFunction":{"type":"MacroFunction","javaClass":"com.zetapush.common.messages.macro.MacroFunction","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"String","name":"name","description":"Function name","required":true},{"type":"List[MacroFunctionParam]","name":"parameters","description":"Function parameters"},{"type":"Object","name":"result","description":"Function result","required":true},{"type":"String","name":"source","description":"source file"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true}],"anyField":false},"MacroFunctionParam":{"type":"MacroFunctionParam","javaClass":"com.zetapush.common.messages.macro.MacroFunctionParam","fields":[{"type":"String","name":"name","description":"Parameter name"}],"anyField":false},"MacroInfo":{"type":"MacroInfo","javaClass":"com.zetapush.common.messages.macro.MacroInfo","fields":[{"type":"boolean","name":"broadcast","description":"Whether to broadcast to all the user's sessions, or just to the asking session. Defaults to false (request-response paradigm)."},{"type":"String","name":"channel","description":"Optional return channel. Defaults to completed"},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"String","name":"name","description":"Macro name","required":true},{"type":"List[MacroScriptParam]","name":"params","description":"Optional parameter specifications"},{"type":"Map[String,Object]","name":"result","description":"Optional macro result"},{"type":"List[MacroScriptParam]","name":"returned","description":"Optional output field specifications"},{"type":"String","name":"source","description":"source file (for debug)"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true},{"type":"Object","name":"target","description":"Target for the response (the syntax is the same as in messaging.send). Overrides 'broadcast' when set."},{"type":"String","name":"userKey","description":"Setting this field effectively overrides the __userKey pseudo-constant for the duration of the macro. All non-sudoed internal calls will behave as if sudoed with the given user key. When this field is set, there is not point in calling this macro with sudo"}],"anyField":false},"MacroJump":{"type":"MacroJump","javaClass":"com.zetapush.common.messages.macro.MacroJump","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"Type","name":"type","description":"jump type","required":true}],"anyField":false},"MacroLocalFunction":{"type":"MacroLocalFunction","javaClass":"com.zetapush.common.messages.macro.MacroLocalFunction","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"MacroFunction","name":"f","description":"Function definition","required":true},{"type":"int","name":"line","description":"Line number in source file"},{"type":"String","name":"var","description":"Function local name","required":true}],"anyField":false},"MacroLog":{"type":"MacroLog","javaClass":"com.zetapush.common.messages.macro.MacroLog","fields":[{"type":"Object","name":"data","description":"Data to be logged. The server will fail to produce an accurate result if the actual evaluated data is too big."},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"}],"anyField":false},"MacroLoop":{"type":"MacroLoop","javaClass":"com.zetapush.common.messages.macro.MacroLoop","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"String","name":"items","description":"Collection to iterate on","required":true},{"type":"int","name":"line","description":"Line number in source file"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true},{"type":"String","name":"var","description":"Loop variable","required":true}],"anyField":false},"MacroScriptParam":{"type":"MacroScriptParam","javaClass":"com.zetapush.common.messages.macro.MacroScriptParam","fields":[{"type":"List[MacroScriptParamConstraint]","name":"constraints","description":"Optional parameter constraints"},{"type":"String","name":"name","description":"Parameter name"}],"anyField":false},"MacroScriptParamConstraint":{"type":"MacroScriptParamConstraint","javaClass":"com.zetapush.common.messages.macro.MacroScriptParamConstraint","fields":[{"type":"Map[String,Object]","name":"config","description":"Constraint configuration"},{"type":"String","name":"name","description":"Constraint name"}],"anyField":false},"MacroStatement":{"type":"MacroStatement","javaClass":"com.zetapush.common.messages.macro.MacroStatement","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"String","name":"exec","description":"Statement to be executed","required":true},{"type":"int","name":"line","description":"Line number in source file"}],"anyField":false},"MacroStep":{"type":"MacroStep","subTypeMarker":"_type","javaClass":"com.zetapush.common.messages.macro.MacroStep","subtypes":{"call":"MacroCall","macro":"MacroInfo","test":"MacroTest","log":"MacroLog","var":"MacroVariable","loop":"MacroLoop","lf":"MacroLocalFunction","exec":"MacroStatement","jump":"MacroJump"},"fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"}],"anyField":false},"MacroTest":{"type":"MacroTest","javaClass":"com.zetapush.common.messages.macro.MacroTest","fields":[{"type":"String","name":"condition","description":"Macro step condition. when evaluated to true, allows for execution of the steps","required":true},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"MacroBlock","name":"otherwise","description":"Else"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true}],"anyField":false},"MacroVariable":{"type":"MacroVariable","javaClass":"com.zetapush.common.messages.macro.MacroVariable","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"Object","name":"value","description":"value to be evaluated","required":true},{"type":"String","name":"var","description":"Variable identifier","required":true}],"anyField":false},"Type":{"type":"Type","javaClass":"com.zetapush.common.messages.macro.MacroJump.Type","enumValues":[{"name":"BREAK","description":"missing enum desc"},{"name":"CONTINUE","description":"missing enum desc"}],"anyField":false}}}},"responseInfo":{"type":"MacroCompletion","resolved":{"types":{"MacroCompletion":{"type":"MacroCompletion","javaClass":"com.zetapush.common.messages.macro.MacroCompletion","fields":[{"type":"List[ZetaApiError]","name":"errors","description":"Encountered errors. Error reporting behavior can be changed with the hardFail parameter."},{"type":"List[String]","name":"log","description":"Generated debug output, if applicable"},{"type":"String","name":"name","description":"Macro name"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Object","name":"result","description":"Generated result, if applicable"},{"type":"MacroCompletionStats","name":"stats","description":"Execution statistics, when debug is enabled"}],"anyField":false},"MacroCompletionStats":{"type":"MacroCompletionStats","javaClass":"com.zetapush.common.messages.macro.MacroCompletion.MacroCompletionStats","fields":[{"type":"long","name":"cycles","description":"Total number of VM cycles"},{"type":"long","name":"elapsedMillis","description":"Elapsed server time for the execution of the macro"},{"type":"long","name":"nbCalls","description":"Total number of called verbs"},{"type":"long","name":"ram","description":"Total number of RAM bytes"}],"anyField":false},"ZetaApiError":{"type":"ZetaApiError","javaClass":"com.zetapush.common.messages.ZetaApiError","fields":[{"type":"String","name":"code","description":"Symbolic error code"},{"type":"Object","name":"context","description":"Developer-generated context. Each code can have a specific context format."},{"type":"String","name":"location","description":"Error location, if available"},{"type":"String","name":"message","description":"Human readable message. May vary depending on one or more of locale, input, developer code."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"A macro with the given name could not be found."},{"code":"CAPACITY_EXCEEDED","desc":"The macro execution engine allows only a fixed amount of macros to be run concurrently."}]}],"notifs":[]}],"controllers":[{"description":"Administrative API for macros","notes":["Manage your macro definitions here.","Create, validate, delete and list macros.","These APIs are used by the eclipse plugin and the CLI : most users will never use them directly."],"apis":[{"shortDesc":"Creates a macro","method":"POST","path":"BU_ID/depId15/macro/create","verb":"/macro/create","notes":["Creates or updates a macro definition."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":false,"requestBody":{"type":"MacroInfo","resolved":{"types":{"MacroInfo":{"type":"MacroInfo","javaClass":"com.zetapush.common.messages.macro.MacroInfo","fields":[{"type":"boolean","name":"broadcast","description":"Whether to broadcast to all the user's sessions, or just to the asking session. Defaults to false (request-response paradigm)."},{"type":"String","name":"channel","description":"Optional return channel. Defaults to completed"},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"String","name":"name","description":"Macro name","required":true},{"type":"List[MacroScriptParam]","name":"params","description":"Optional parameter specifications"},{"type":"Map[String,Object]","name":"result","description":"Optional macro result"},{"type":"List[MacroScriptParam]","name":"returned","description":"Optional output field specifications"},{"type":"String","name":"source","description":"source file (for debug)"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true},{"type":"Object","name":"target","description":"Target for the response (the syntax is the same as in messaging.send). Overrides 'broadcast' when set."},{"type":"String","name":"userKey","description":"Setting this field effectively overrides the __userKey pseudo-constant for the duration of the macro. All non-sudoed internal calls will behave as if sudoed with the given user key. When this field is set, there is not point in calling this macro with sudo"}],"anyField":false},"MacroBlock":{"type":"MacroBlock","javaClass":"com.zetapush.common.messages.macro.MacroBlock","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true}],"anyField":false},"MacroCall":{"type":"MacroCall","javaClass":"com.zetapush.common.messages.macro.MacroCall","fields":[{"type":"String","name":"deploymentId","description":"DeploymentId of the service to be called","required":true},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"boolean","name":"noExpand","description":"Specifies whether parameter expansion should be avoided. The server will of course set this to true automatically if no refs are present. Defaults to false"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the verb. The format is the format expected by the target verb, with the following exception : any field can be replaced by a placeholder. A placeholder is an object with a '__ref' field. The value of the ref field follows java EL syntax with some pre-defined objects and functions (see the documentation on macros)"},{"type":"String","name":"resultName","description":"Name of the result, for future reference"},{"type":"String","name":"suKey","description":"Key of the impersonated user"},{"type":"String","name":"verb","description":"Verb to be called inside the specified service","required":true}],"anyField":false},"MacroFunction":{"type":"MacroFunction","javaClass":"com.zetapush.common.messages.macro.MacroFunction","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"String","name":"name","description":"Function name","required":true},{"type":"List[MacroFunctionParam]","name":"parameters","description":"Function parameters"},{"type":"Object","name":"result","description":"Function result","required":true},{"type":"String","name":"source","description":"source file"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true}],"anyField":false},"MacroFunctionParam":{"type":"MacroFunctionParam","javaClass":"com.zetapush.common.messages.macro.MacroFunctionParam","fields":[{"type":"String","name":"name","description":"Parameter name"}],"anyField":false},"MacroJump":{"type":"MacroJump","javaClass":"com.zetapush.common.messages.macro.MacroJump","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"Type","name":"type","description":"jump type","required":true}],"anyField":false},"MacroLocalFunction":{"type":"MacroLocalFunction","javaClass":"com.zetapush.common.messages.macro.MacroLocalFunction","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"MacroFunction","name":"f","description":"Function definition","required":true},{"type":"int","name":"line","description":"Line number in source file"},{"type":"String","name":"var","description":"Function local name","required":true}],"anyField":false},"MacroLog":{"type":"MacroLog","javaClass":"com.zetapush.common.messages.macro.MacroLog","fields":[{"type":"Object","name":"data","description":"Data to be logged. The server will fail to produce an accurate result if the actual evaluated data is too big."},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"}],"anyField":false},"MacroLoop":{"type":"MacroLoop","javaClass":"com.zetapush.common.messages.macro.MacroLoop","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"String","name":"items","description":"Collection to iterate on","required":true},{"type":"int","name":"line","description":"Line number in source file"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true},{"type":"String","name":"var","description":"Loop variable","required":true}],"anyField":false},"MacroScriptParam":{"type":"MacroScriptParam","javaClass":"com.zetapush.common.messages.macro.MacroScriptParam","fields":[{"type":"List[MacroScriptParamConstraint]","name":"constraints","description":"Optional parameter constraints"},{"type":"String","name":"name","description":"Parameter name"}],"anyField":false},"MacroScriptParamConstraint":{"type":"MacroScriptParamConstraint","javaClass":"com.zetapush.common.messages.macro.MacroScriptParamConstraint","fields":[{"type":"Map[String,Object]","name":"config","description":"Constraint configuration"},{"type":"String","name":"name","description":"Constraint name"}],"anyField":false},"MacroStatement":{"type":"MacroStatement","javaClass":"com.zetapush.common.messages.macro.MacroStatement","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"String","name":"exec","description":"Statement to be executed","required":true},{"type":"int","name":"line","description":"Line number in source file"}],"anyField":false},"MacroStep":{"type":"MacroStep","subTypeMarker":"_type","javaClass":"com.zetapush.common.messages.macro.MacroStep","subtypes":{"call":"MacroCall","macro":"MacroInfo","test":"MacroTest","log":"MacroLog","var":"MacroVariable","loop":"MacroLoop","lf":"MacroLocalFunction","exec":"MacroStatement","jump":"MacroJump"},"fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"}],"anyField":false},"MacroTest":{"type":"MacroTest","javaClass":"com.zetapush.common.messages.macro.MacroTest","fields":[{"type":"String","name":"condition","description":"Macro step condition. when evaluated to true, allows for execution of the steps","required":true},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"MacroBlock","name":"otherwise","description":"Else"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true}],"anyField":false},"MacroVariable":{"type":"MacroVariable","javaClass":"com.zetapush.common.messages.macro.MacroVariable","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"Object","name":"value","description":"value to be evaluated","required":true},{"type":"String","name":"var","description":"Variable identifier","required":true}],"anyField":false},"Type":{"type":"Type","javaClass":"com.zetapush.common.messages.macro.MacroJump.Type","enumValues":[{"name":"BREAK","description":"missing enum desc"},{"name":"CONTINUE","description":"missing enum desc"}],"anyField":false}}}},"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"Deletes a macro","method":"GET","path":"BU_ID/depId15/macro/delete/{name}","verb":"/macro/delete/{name}","notes":["Deletes the macro with the given 'name'."],"audience":"DEVELOPER","pathVariables":[{"name":"name","type":"String","desc":"Macro identifier"}],"requestParams":[],"scriptable":false,"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"Runs a macro","method":"","path":"BU_ID/depId15/macro/exec/**","verb":"/macro/exec/**","notes":["Runs the configured macro for the given route /macro/exec/{route}.","The HTTP POST body is expected to be a JSON object","The route (after '/exec/') may contain slashes","A route is configured along with a macro when it is created","The macro is run with the parameters you annotate with @RequestBody, @QueryParam, @RequestParam, @PathParam, @PathVariable, @HeaderParam, @RequestHeader, @Path."],"audience":"PUBLIC","pathVariables":[],"requestParams":[],"scriptable":false,"requestBody":{"type":"Map[String,Object]","resolved":{"types":{}}},"responseBody":{"type":"DeferredResult[ResponseEntity[ConfigurableHttpOutput]]","resolved":{"types":{"ConfigurableHttpOutput":{"type":"ConfigurableHttpOutput","javaClass":"com.zetapush.str.bootstrap.config.ConfigurableHttpOutput","fields":[{"type":"Object","name":"data"}],"anyField":false}}}}},{"shortDesc":"Lists the macros","method":"GET","path":"BU_ID/depId15/macro/list","verb":"/macro/list","notes":["Returns the whole list of defined macros."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":false,"responseBody":{"type":"List[MacroInfo]","resolved":{"types":{"MacroBlock":{"type":"MacroBlock","javaClass":"com.zetapush.common.messages.macro.MacroBlock","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true}],"anyField":false},"MacroCall":{"type":"MacroCall","javaClass":"com.zetapush.common.messages.macro.MacroCall","fields":[{"type":"String","name":"deploymentId","description":"DeploymentId of the service to be called","required":true},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"boolean","name":"noExpand","description":"Specifies whether parameter expansion should be avoided. The server will of course set this to true automatically if no refs are present. Defaults to false"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the verb. The format is the format expected by the target verb, with the following exception : any field can be replaced by a placeholder. A placeholder is an object with a '__ref' field. The value of the ref field follows java EL syntax with some pre-defined objects and functions (see the documentation on macros)"},{"type":"String","name":"resultName","description":"Name of the result, for future reference"},{"type":"String","name":"suKey","description":"Key of the impersonated user"},{"type":"String","name":"verb","description":"Verb to be called inside the specified service","required":true}],"anyField":false},"MacroFunction":{"type":"MacroFunction","javaClass":"com.zetapush.common.messages.macro.MacroFunction","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"String","name":"name","description":"Function name","required":true},{"type":"List[MacroFunctionParam]","name":"parameters","description":"Function parameters"},{"type":"Object","name":"result","description":"Function result","required":true},{"type":"String","name":"source","description":"source file"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true}],"anyField":false},"MacroFunctionParam":{"type":"MacroFunctionParam","javaClass":"com.zetapush.common.messages.macro.MacroFunctionParam","fields":[{"type":"String","name":"name","description":"Parameter name"}],"anyField":false},"MacroInfo":{"type":"MacroInfo","javaClass":"com.zetapush.common.messages.macro.MacroInfo","fields":[{"type":"boolean","name":"broadcast","description":"Whether to broadcast to all the user's sessions, or just to the asking session. Defaults to false (request-response paradigm)."},{"type":"String","name":"channel","description":"Optional return channel. Defaults to completed"},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"String","name":"name","description":"Macro name","required":true},{"type":"List[MacroScriptParam]","name":"params","description":"Optional parameter specifications"},{"type":"Map[String,Object]","name":"result","description":"Optional macro result"},{"type":"List[MacroScriptParam]","name":"returned","description":"Optional output field specifications"},{"type":"String","name":"source","description":"source file (for debug)"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true},{"type":"Object","name":"target","description":"Target for the response (the syntax is the same as in messaging.send). Overrides 'broadcast' when set."},{"type":"String","name":"userKey","description":"Setting this field effectively overrides the __userKey pseudo-constant for the duration of the macro. All non-sudoed internal calls will behave as if sudoed with the given user key. When this field is set, there is not point in calling this macro with sudo"}],"anyField":false},"MacroJump":{"type":"MacroJump","javaClass":"com.zetapush.common.messages.macro.MacroJump","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"Type","name":"type","description":"jump type","required":true}],"anyField":false},"MacroLocalFunction":{"type":"MacroLocalFunction","javaClass":"com.zetapush.common.messages.macro.MacroLocalFunction","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"MacroFunction","name":"f","description":"Function definition","required":true},{"type":"int","name":"line","description":"Line number in source file"},{"type":"String","name":"var","description":"Function local name","required":true}],"anyField":false},"MacroLog":{"type":"MacroLog","javaClass":"com.zetapush.common.messages.macro.MacroLog","fields":[{"type":"Object","name":"data","description":"Data to be logged. The server will fail to produce an accurate result if the actual evaluated data is too big."},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"}],"anyField":false},"MacroLoop":{"type":"MacroLoop","javaClass":"com.zetapush.common.messages.macro.MacroLoop","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"String","name":"items","description":"Collection to iterate on","required":true},{"type":"int","name":"line","description":"Line number in source file"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true},{"type":"String","name":"var","description":"Loop variable","required":true}],"anyField":false},"MacroScriptParam":{"type":"MacroScriptParam","javaClass":"com.zetapush.common.messages.macro.MacroScriptParam","fields":[{"type":"List[MacroScriptParamConstraint]","name":"constraints","description":"Optional parameter constraints"},{"type":"String","name":"name","description":"Parameter name"}],"anyField":false},"MacroScriptParamConstraint":{"type":"MacroScriptParamConstraint","javaClass":"com.zetapush.common.messages.macro.MacroScriptParamConstraint","fields":[{"type":"Map[String,Object]","name":"config","description":"Constraint configuration"},{"type":"String","name":"name","description":"Constraint name"}],"anyField":false},"MacroStatement":{"type":"MacroStatement","javaClass":"com.zetapush.common.messages.macro.MacroStatement","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"String","name":"exec","description":"Statement to be executed","required":true},{"type":"int","name":"line","description":"Line number in source file"}],"anyField":false},"MacroStep":{"type":"MacroStep","subTypeMarker":"_type","javaClass":"com.zetapush.common.messages.macro.MacroStep","subtypes":{"call":"MacroCall","macro":"MacroInfo","test":"MacroTest","log":"MacroLog","var":"MacroVariable","loop":"MacroLoop","lf":"MacroLocalFunction","exec":"MacroStatement","jump":"MacroJump"},"fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"}],"anyField":false},"MacroTest":{"type":"MacroTest","javaClass":"com.zetapush.common.messages.macro.MacroTest","fields":[{"type":"String","name":"condition","description":"Macro step condition. when evaluated to true, allows for execution of the steps","required":true},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"MacroBlock","name":"otherwise","description":"Else"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true}],"anyField":false},"MacroVariable":{"type":"MacroVariable","javaClass":"com.zetapush.common.messages.macro.MacroVariable","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"Object","name":"value","description":"value to be evaluated","required":true},{"type":"String","name":"var","description":"Variable identifier","required":true}],"anyField":false},"Type":{"type":"Type","javaClass":"com.zetapush.common.messages.macro.MacroJump.Type","enumValues":[{"name":"BREAK","description":"missing enum desc"},{"name":"CONTINUE","description":"missing enum desc"}],"anyField":false}}}}},{"shortDesc":"Creates macros","method":"POST","path":"BU_ID/depId15/macro/mcreate","verb":"/macro/mcreate","notes":["Creates or updates several macro definitions."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"MacroInfos","resolved":{"types":{"MacroInfos":{"type":"MacroInfos","javaClass":"com.zetapush.common.messages.macro.MacroInfos","fields":[{"type":"String","name":"deploymentId","description":"Deployment ID of the macro service"},{"type":"List[MacroFunction]","name":"functions","description":"List of functions"},{"type":"Map[String,Object]","name":"globals","description":"Global data"},{"type":"List[MacroInfo]","name":"macros","description":"List of macros"},{"type":"boolean","name":"purge","description":"Whether to wipe out all existing macros before taking the given ones into account"},{"type":"List[MacroTypeDefinition]","name":"types","description":"List of user types"}],"anyField":false},"MacroBlock":{"type":"MacroBlock","javaClass":"com.zetapush.common.messages.macro.MacroBlock","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true}],"anyField":false},"MacroCall":{"type":"MacroCall","javaClass":"com.zetapush.common.messages.macro.MacroCall","fields":[{"type":"String","name":"deploymentId","description":"DeploymentId of the service to be called","required":true},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"boolean","name":"noExpand","description":"Specifies whether parameter expansion should be avoided. The server will of course set this to true automatically if no refs are present. Defaults to false"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the verb. The format is the format expected by the target verb, with the following exception : any field can be replaced by a placeholder. A placeholder is an object with a '__ref' field. The value of the ref field follows java EL syntax with some pre-defined objects and functions (see the documentation on macros)"},{"type":"String","name":"resultName","description":"Name of the result, for future reference"},{"type":"String","name":"suKey","description":"Key of the impersonated user"},{"type":"String","name":"verb","description":"Verb to be called inside the specified service","required":true}],"anyField":false},"MacroFunction":{"type":"MacroFunction","javaClass":"com.zetapush.common.messages.macro.MacroFunction","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"String","name":"name","description":"Function name","required":true},{"type":"List[MacroFunctionParam]","name":"parameters","description":"Function parameters"},{"type":"Object","name":"result","description":"Function result","required":true},{"type":"String","name":"source","description":"source file"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true}],"anyField":false},"MacroFunctionParam":{"type":"MacroFunctionParam","javaClass":"com.zetapush.common.messages.macro.MacroFunctionParam","fields":[{"type":"String","name":"name","description":"Parameter name"}],"anyField":false},"MacroInfo":{"type":"MacroInfo","javaClass":"com.zetapush.common.messages.macro.MacroInfo","fields":[{"type":"boolean","name":"broadcast","description":"Whether to broadcast to all the user's sessions, or just to the asking session. Defaults to false (request-response paradigm)."},{"type":"String","name":"channel","description":"Optional return channel. Defaults to completed"},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"String","name":"name","description":"Macro name","required":true},{"type":"List[MacroScriptParam]","name":"params","description":"Optional parameter specifications"},{"type":"Map[String,Object]","name":"result","description":"Optional macro result"},{"type":"List[MacroScriptParam]","name":"returned","description":"Optional output field specifications"},{"type":"String","name":"source","description":"source file (for debug)"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true},{"type":"Object","name":"target","description":"Target for the response (the syntax is the same as in messaging.send). Overrides 'broadcast' when set."},{"type":"String","name":"userKey","description":"Setting this field effectively overrides the __userKey pseudo-constant for the duration of the macro. All non-sudoed internal calls will behave as if sudoed with the given user key. When this field is set, there is not point in calling this macro with sudo"}],"anyField":false},"MacroJump":{"type":"MacroJump","javaClass":"com.zetapush.common.messages.macro.MacroJump","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"Type","name":"type","description":"jump type","required":true}],"anyField":false},"MacroLocalFunction":{"type":"MacroLocalFunction","javaClass":"com.zetapush.common.messages.macro.MacroLocalFunction","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"MacroFunction","name":"f","description":"Function definition","required":true},{"type":"int","name":"line","description":"Line number in source file"},{"type":"String","name":"var","description":"Function local name","required":true}],"anyField":false},"MacroLog":{"type":"MacroLog","javaClass":"com.zetapush.common.messages.macro.MacroLog","fields":[{"type":"Object","name":"data","description":"Data to be logged. The server will fail to produce an accurate result if the actual evaluated data is too big."},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"}],"anyField":false},"MacroLoop":{"type":"MacroLoop","javaClass":"com.zetapush.common.messages.macro.MacroLoop","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"String","name":"items","description":"Collection to iterate on","required":true},{"type":"int","name":"line","description":"Line number in source file"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true},{"type":"String","name":"var","description":"Loop variable","required":true}],"anyField":false},"MacroScriptParam":{"type":"MacroScriptParam","javaClass":"com.zetapush.common.messages.macro.MacroScriptParam","fields":[{"type":"List[MacroScriptParamConstraint]","name":"constraints","description":"Optional parameter constraints"},{"type":"String","name":"name","description":"Parameter name"}],"anyField":false},"MacroScriptParamConstraint":{"type":"MacroScriptParamConstraint","javaClass":"com.zetapush.common.messages.macro.MacroScriptParamConstraint","fields":[{"type":"Map[String,Object]","name":"config","description":"Constraint configuration"},{"type":"String","name":"name","description":"Constraint name"}],"anyField":false},"MacroStatement":{"type":"MacroStatement","javaClass":"com.zetapush.common.messages.macro.MacroStatement","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"String","name":"exec","description":"Statement to be executed","required":true},{"type":"int","name":"line","description":"Line number in source file"}],"anyField":false},"MacroStep":{"type":"MacroStep","subTypeMarker":"_type","javaClass":"com.zetapush.common.messages.macro.MacroStep","subtypes":{"call":"MacroCall","macro":"MacroInfo","test":"MacroTest","log":"MacroLog","var":"MacroVariable","loop":"MacroLoop","lf":"MacroLocalFunction","exec":"MacroStatement","jump":"MacroJump"},"fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"}],"anyField":false},"MacroTest":{"type":"MacroTest","javaClass":"com.zetapush.common.messages.macro.MacroTest","fields":[{"type":"String","name":"condition","description":"Macro step condition. when evaluated to true, allows for execution of the steps","required":true},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"MacroBlock","name":"otherwise","description":"Else"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true}],"anyField":false},"MacroTypeDefinition":{"type":"MacroTypeDefinition","javaClass":"com.zetapush.common.messages.macro.MacroTypeDefinition","fields":[{"type":"List[MacroScriptParam]","name":"fields","description":"List of field definitions"},{"type":"String","name":"name","description":"Type name"},{"type":"Map[String,Object]","name":"thisObject","description":"Initializer. contains class common fields, copied into each new instance"}],"anyField":false},"MacroVariable":{"type":"MacroVariable","javaClass":"com.zetapush.common.messages.macro.MacroVariable","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"Object","name":"value","description":"value to be evaluated","required":true},{"type":"String","name":"var","description":"Variable identifier","required":true}],"anyField":false},"Type":{"type":"Type","javaClass":"com.zetapush.common.messages.macro.MacroJump.Type","enumValues":[{"name":"BREAK","description":"missing enum desc"},{"name":"CONTINUE","description":"missing enum desc"}],"anyField":false}}}},"responseBody":{"type":"MacroUploadReport","resolved":{"types":{"MacroUploadReport":{"type":"MacroUploadReport","javaClass":"com.zetapush.common.messages.macro.MacroUploadReport","fields":[{"type":"List[String]","name":"functions","description":"List of successfully uploaded function names"},{"type":"List[String]","name":"macros","description":"List of successfully uploaded macro names"}],"anyField":false}}}}},{"shortDesc":"Runs an arbitrary macro","method":"POST","path":"BU_ID/depId15/macro/run","verb":"/macro/run","notes":["Runs a macro.","Any given macro of the service can be called with any given user key."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"SuMacroPlay","resolved":{"types":{"SuMacroPlay":{"type":"SuMacroPlay","javaClass":"com.zetapush.common.messages.macro.SuMacroPlay","fields":[{"type":"int","name":"debug","description":"Deprecated. Use the 'livedebug' API."},{"type":"boolean","name":"hardFail","description":"True if an error should trigger a response on an error channel, or false (the default) if the error should be simply reported in an error field"},{"type":"String","name":"name","description":"Macro name","required":true},{"type":"Map[String,Object]","name":"parameters","description":"Macro named parameters"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"suKey","description":"Key of the impersonated user","required":true},{"type":"List[MacroInfo]","name":"tempMacros","description":"Temporary macros. This feature does not support concurrent calls."}],"anyField":false},"MacroBlock":{"type":"MacroBlock","javaClass":"com.zetapush.common.messages.macro.MacroBlock","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true}],"anyField":false},"MacroCall":{"type":"MacroCall","javaClass":"com.zetapush.common.messages.macro.MacroCall","fields":[{"type":"String","name":"deploymentId","description":"DeploymentId of the service to be called","required":true},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"boolean","name":"noExpand","description":"Specifies whether parameter expansion should be avoided. The server will of course set this to true automatically if no refs are present. Defaults to false"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the verb. The format is the format expected by the target verb, with the following exception : any field can be replaced by a placeholder. A placeholder is an object with a '__ref' field. The value of the ref field follows java EL syntax with some pre-defined objects and functions (see the documentation on macros)"},{"type":"String","name":"resultName","description":"Name of the result, for future reference"},{"type":"String","name":"suKey","description":"Key of the impersonated user"},{"type":"String","name":"verb","description":"Verb to be called inside the specified service","required":true}],"anyField":false},"MacroFunction":{"type":"MacroFunction","javaClass":"com.zetapush.common.messages.macro.MacroFunction","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"String","name":"name","description":"Function name","required":true},{"type":"List[MacroFunctionParam]","name":"parameters","description":"Function parameters"},{"type":"Object","name":"result","description":"Function result","required":true},{"type":"String","name":"source","description":"source file"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true}],"anyField":false},"MacroFunctionParam":{"type":"MacroFunctionParam","javaClass":"com.zetapush.common.messages.macro.MacroFunctionParam","fields":[{"type":"String","name":"name","description":"Parameter name"}],"anyField":false},"MacroInfo":{"type":"MacroInfo","javaClass":"com.zetapush.common.messages.macro.MacroInfo","fields":[{"type":"boolean","name":"broadcast","description":"Whether to broadcast to all the user's sessions, or just to the asking session. Defaults to false (request-response paradigm)."},{"type":"String","name":"channel","description":"Optional return channel. Defaults to completed"},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"String","name":"name","description":"Macro name","required":true},{"type":"List[MacroScriptParam]","name":"params","description":"Optional parameter specifications"},{"type":"Map[String,Object]","name":"result","description":"Optional macro result"},{"type":"List[MacroScriptParam]","name":"returned","description":"Optional output field specifications"},{"type":"String","name":"source","description":"source file (for debug)"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true},{"type":"Object","name":"target","description":"Target for the response (the syntax is the same as in messaging.send). Overrides 'broadcast' when set."},{"type":"String","name":"userKey","description":"Setting this field effectively overrides the __userKey pseudo-constant for the duration of the macro. All non-sudoed internal calls will behave as if sudoed with the given user key. When this field is set, there is not point in calling this macro with sudo"}],"anyField":false},"MacroJump":{"type":"MacroJump","javaClass":"com.zetapush.common.messages.macro.MacroJump","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"Type","name":"type","description":"jump type","required":true}],"anyField":false},"MacroLocalFunction":{"type":"MacroLocalFunction","javaClass":"com.zetapush.common.messages.macro.MacroLocalFunction","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"MacroFunction","name":"f","description":"Function definition","required":true},{"type":"int","name":"line","description":"Line number in source file"},{"type":"String","name":"var","description":"Function local name","required":true}],"anyField":false},"MacroLog":{"type":"MacroLog","javaClass":"com.zetapush.common.messages.macro.MacroLog","fields":[{"type":"Object","name":"data","description":"Data to be logged. The server will fail to produce an accurate result if the actual evaluated data is too big."},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"}],"anyField":false},"MacroLoop":{"type":"MacroLoop","javaClass":"com.zetapush.common.messages.macro.MacroLoop","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"String","name":"items","description":"Collection to iterate on","required":true},{"type":"int","name":"line","description":"Line number in source file"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true},{"type":"String","name":"var","description":"Loop variable","required":true}],"anyField":false},"MacroScriptParam":{"type":"MacroScriptParam","javaClass":"com.zetapush.common.messages.macro.MacroScriptParam","fields":[{"type":"List[MacroScriptParamConstraint]","name":"constraints","description":"Optional parameter constraints"},{"type":"String","name":"name","description":"Parameter name"}],"anyField":false},"MacroScriptParamConstraint":{"type":"MacroScriptParamConstraint","javaClass":"com.zetapush.common.messages.macro.MacroScriptParamConstraint","fields":[{"type":"Map[String,Object]","name":"config","description":"Constraint configuration"},{"type":"String","name":"name","description":"Constraint name"}],"anyField":false},"MacroStatement":{"type":"MacroStatement","javaClass":"com.zetapush.common.messages.macro.MacroStatement","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"String","name":"exec","description":"Statement to be executed","required":true},{"type":"int","name":"line","description":"Line number in source file"}],"anyField":false},"MacroStep":{"type":"MacroStep","subTypeMarker":"_type","javaClass":"com.zetapush.common.messages.macro.MacroStep","subtypes":{"call":"MacroCall","macro":"MacroInfo","test":"MacroTest","log":"MacroLog","var":"MacroVariable","loop":"MacroLoop","lf":"MacroLocalFunction","exec":"MacroStatement","jump":"MacroJump"},"fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"}],"anyField":false},"MacroTest":{"type":"MacroTest","javaClass":"com.zetapush.common.messages.macro.MacroTest","fields":[{"type":"String","name":"condition","description":"Macro step condition. when evaluated to true, allows for execution of the steps","required":true},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"MacroBlock","name":"otherwise","description":"Else"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true}],"anyField":false},"MacroVariable":{"type":"MacroVariable","javaClass":"com.zetapush.common.messages.macro.MacroVariable","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"Object","name":"value","description":"value to be evaluated","required":true},{"type":"String","name":"var","description":"Variable identifier","required":true}],"anyField":false},"Type":{"type":"Type","javaClass":"com.zetapush.common.messages.macro.MacroJump.Type","enumValues":[{"name":"BREAK","description":"missing enum desc"},{"name":"CONTINUE","description":"missing enum desc"}],"anyField":false}}}},"responseBody":{"type":"DeferredResult[MacroCompletion]","resolved":{"types":{"MacroCompletion":{"type":"MacroCompletion","javaClass":"com.zetapush.common.messages.macro.MacroCompletion","fields":[{"type":"List[ZetaApiError]","name":"errors","description":"Encountered errors. Error reporting behavior can be changed with the hardFail parameter."},{"type":"List[String]","name":"log","description":"Generated debug output, if applicable"},{"type":"String","name":"name","description":"Macro name"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Object","name":"result","description":"Generated result, if applicable"},{"type":"MacroCompletionStats","name":"stats","description":"Execution statistics, when debug is enabled"}],"anyField":false},"MacroCompletionStats":{"type":"MacroCompletionStats","javaClass":"com.zetapush.common.messages.macro.MacroCompletion.MacroCompletionStats","fields":[{"type":"long","name":"cycles","description":"Total number of VM cycles"},{"type":"long","name":"elapsedMillis","description":"Elapsed server time for the execution of the macro"},{"type":"long","name":"nbCalls","description":"Total number of called verbs"},{"type":"long","name":"ram","description":"Total number of RAM bytes"}],"anyField":false},"ZetaApiError":{"type":"ZetaApiError","javaClass":"com.zetapush.common.messages.ZetaApiError","fields":[{"type":"String","name":"code","description":"Symbolic error code"},{"type":"Object","name":"context","description":"Developer-generated context. Each code can have a specific context format."},{"type":"String","name":"location","description":"Error location, if available"},{"type":"String","name":"message","description":"Human readable message. May vary depending on one or more of locale, input, developer code."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false}}}}},{"shortDesc":"Validates a macro","method":"POST","path":"BU_ID/depId15/macro/validate","verb":"/macro/validate","notes":["Validates the macro syntax","Only validates the given AST, not the (unavailable) source code."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":false,"requestBody":{"type":"MacroInfo","resolved":{"types":{"MacroInfo":{"type":"MacroInfo","javaClass":"com.zetapush.common.messages.macro.MacroInfo","fields":[{"type":"boolean","name":"broadcast","description":"Whether to broadcast to all the user's sessions, or just to the asking session. Defaults to false (request-response paradigm)."},{"type":"String","name":"channel","description":"Optional return channel. Defaults to completed"},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"String","name":"name","description":"Macro name","required":true},{"type":"List[MacroScriptParam]","name":"params","description":"Optional parameter specifications"},{"type":"Map[String,Object]","name":"result","description":"Optional macro result"},{"type":"List[MacroScriptParam]","name":"returned","description":"Optional output field specifications"},{"type":"String","name":"source","description":"source file (for debug)"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true},{"type":"Object","name":"target","description":"Target for the response (the syntax is the same as in messaging.send). Overrides 'broadcast' when set."},{"type":"String","name":"userKey","description":"Setting this field effectively overrides the __userKey pseudo-constant for the duration of the macro. All non-sudoed internal calls will behave as if sudoed with the given user key. When this field is set, there is not point in calling this macro with sudo"}],"anyField":false},"MacroBlock":{"type":"MacroBlock","javaClass":"com.zetapush.common.messages.macro.MacroBlock","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true}],"anyField":false},"MacroCall":{"type":"MacroCall","javaClass":"com.zetapush.common.messages.macro.MacroCall","fields":[{"type":"String","name":"deploymentId","description":"DeploymentId of the service to be called","required":true},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"boolean","name":"noExpand","description":"Specifies whether parameter expansion should be avoided. The server will of course set this to true automatically if no refs are present. Defaults to false"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the verb. The format is the format expected by the target verb, with the following exception : any field can be replaced by a placeholder. A placeholder is an object with a '__ref' field. The value of the ref field follows java EL syntax with some pre-defined objects and functions (see the documentation on macros)"},{"type":"String","name":"resultName","description":"Name of the result, for future reference"},{"type":"String","name":"suKey","description":"Key of the impersonated user"},{"type":"String","name":"verb","description":"Verb to be called inside the specified service","required":true}],"anyField":false},"MacroFunction":{"type":"MacroFunction","javaClass":"com.zetapush.common.messages.macro.MacroFunction","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"String","name":"name","description":"Function name","required":true},{"type":"List[MacroFunctionParam]","name":"parameters","description":"Function parameters"},{"type":"Object","name":"result","description":"Function result","required":true},{"type":"String","name":"source","description":"source file"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true}],"anyField":false},"MacroFunctionParam":{"type":"MacroFunctionParam","javaClass":"com.zetapush.common.messages.macro.MacroFunctionParam","fields":[{"type":"String","name":"name","description":"Parameter name"}],"anyField":false},"MacroJump":{"type":"MacroJump","javaClass":"com.zetapush.common.messages.macro.MacroJump","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"Type","name":"type","description":"jump type","required":true}],"anyField":false},"MacroLocalFunction":{"type":"MacroLocalFunction","javaClass":"com.zetapush.common.messages.macro.MacroLocalFunction","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"MacroFunction","name":"f","description":"Function definition","required":true},{"type":"int","name":"line","description":"Line number in source file"},{"type":"String","name":"var","description":"Function local name","required":true}],"anyField":false},"MacroLog":{"type":"MacroLog","javaClass":"com.zetapush.common.messages.macro.MacroLog","fields":[{"type":"Object","name":"data","description":"Data to be logged. The server will fail to produce an accurate result if the actual evaluated data is too big."},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"}],"anyField":false},"MacroLoop":{"type":"MacroLoop","javaClass":"com.zetapush.common.messages.macro.MacroLoop","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"String","name":"items","description":"Collection to iterate on","required":true},{"type":"int","name":"line","description":"Line number in source file"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true},{"type":"String","name":"var","description":"Loop variable","required":true}],"anyField":false},"MacroScriptParam":{"type":"MacroScriptParam","javaClass":"com.zetapush.common.messages.macro.MacroScriptParam","fields":[{"type":"List[MacroScriptParamConstraint]","name":"constraints","description":"Optional parameter constraints"},{"type":"String","name":"name","description":"Parameter name"}],"anyField":false},"MacroScriptParamConstraint":{"type":"MacroScriptParamConstraint","javaClass":"com.zetapush.common.messages.macro.MacroScriptParamConstraint","fields":[{"type":"Map[String,Object]","name":"config","description":"Constraint configuration"},{"type":"String","name":"name","description":"Constraint name"}],"anyField":false},"MacroStatement":{"type":"MacroStatement","javaClass":"com.zetapush.common.messages.macro.MacroStatement","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"String","name":"exec","description":"Statement to be executed","required":true},{"type":"int","name":"line","description":"Line number in source file"}],"anyField":false},"MacroStep":{"type":"MacroStep","subTypeMarker":"_type","javaClass":"com.zetapush.common.messages.macro.MacroStep","subtypes":{"call":"MacroCall","macro":"MacroInfo","test":"MacroTest","log":"MacroLog","var":"MacroVariable","loop":"MacroLoop","lf":"MacroLocalFunction","exec":"MacroStatement","jump":"MacroJump"},"fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"}],"anyField":false},"MacroTest":{"type":"MacroTest","javaClass":"com.zetapush.common.messages.macro.MacroTest","fields":[{"type":"String","name":"condition","description":"Macro step condition. when evaluated to true, allows for execution of the steps","required":true},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"MacroBlock","name":"otherwise","description":"Else"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true}],"anyField":false},"MacroVariable":{"type":"MacroVariable","javaClass":"com.zetapush.common.messages.macro.MacroVariable","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"Object","name":"value","description":"value to be evaluated","required":true},{"type":"String","name":"var","description":"Variable identifier","required":true}],"anyField":false},"Type":{"type":"Type","javaClass":"com.zetapush.common.messages.macro.MacroJump.Type","enumValues":[{"name":"BREAK","description":"missing enum desc"},{"name":"CONTINUE","description":"missing enum desc"}],"anyField":false}}}},"responseBody":{"type":"String","resolved":{"types":{}}}}]},{"description":"Administrative debug API for macros","notes":["Manage debug mode: enable, disable and report."],"apis":[{"shortDesc":"Configures debug mode","method":"POST","path":"BU_ID/depId15/debug/configure","verb":"/debug/configure","notes":["Enables or disables debug mode on this STR node. See 'enable' for details."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"MacroServiceDebugConfig","resolved":{"types":{"MacroServiceDebugConfig":{"type":"MacroServiceDebugConfig","javaClass":"com.zetapush.common.messages.macro.MacroServiceDebugConfig","fields":[{"type":"boolean","name":"debug","description":"Whether this macro service is currently in debug mode"}],"anyField":false}}}},"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"Disables debug mode","method":"GET","path":"BU_ID/depId15/debug/disable","verb":"/debug/disable","notes":["Disables debug mode on this STR node : macro calls will no longer honor their 'debug' field."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":false,"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"Enables debug mode","method":"GET","path":"BU_ID/depId15/debug/enable","verb":"/debug/enable","notes":["Enables debug mode on this STR node : macro calls will now honor their 'debug' field.","Affects only new macro calls : macros already running continue unaffected.","Also enables live debug mode."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":false,"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"Returns a debug token","method":"GET","path":"BU_ID/depId15/debug/livedebugToken","verb":"/debug/livedebugToken","notes":["Returns a debug token, which is needed to initiate a debug session.","This verb does not enable the debug mode : the token is returned only when the debug mode has been enabled with /enable.","Treat the returned token as a secret, as it theoretically allows any end-user to debug any macro.","The token validity duration is limited."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":false,"responseBody":{"type":"MacroDebugToken","resolved":{"types":{"MacroDebugToken":{"type":"MacroDebugToken","javaClass":"com.zetapush.common.messages.macro.MacroDebugToken","fields":[{"type":"String","name":"token","description":"Token suitable for use by debug verbs"}],"anyField":false}}}}},{"shortDesc":"Returns the service status","method":"GET","path":"BU_ID/depId15/debug/status","verb":"/debug/status","notes":["Reports the status of this macro service on this STR node."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":false,"responseBody":{"type":"MacroServiceStatus","resolved":{"types":{"MacroServiceStatus":{"type":"MacroServiceStatus","javaClass":"com.zetapush.common.messages.macro.MacroServiceStatus","fields":[{"type":"int","name":"currentNb","description":"Number of macros currently running"},{"type":"boolean","name":"debug","description":"Whether this macro service is currently in debug mode"},{"type":"int","name":"totalNb","description":"Total number of macros currently running, including nested calls"}],"anyField":false}}}}}]}]},{"description":{"name":"Mail sender","description":"Sends email through SMTP","deployableId":"sendmail","options":[{"name":"sendmail_username","shortDesc":"SMTP user","description":"SMTP user","type":"STRING"},{"name":"sendmail_password","shortDesc":"SMTP password","description":"SMTP password","type":"STRING"},{"name":"sendmail_host","shortDesc":"SMTP host","description":"SMTP host","type":"STRING"},{"name":"sendmail_port","shortDesc":"SMTP port","description":"SMTP port (standard 25, secure 465)","defaultValue":"25","type":"LONG"},{"name":"sendmail_from","shortDesc":"From","description":"From field for sent emails","type":"STRING"},{"name":"sendmail_replyTo","shortDesc":"ReplyTo","description":"ReplyTo field for sent emails","type":"STRING"},{"name":"sendmail_ssl","shortDesc":"SSL","description":"SSL enabled","defaultValue":"false","type":"BOOLEAN"},{"name":"sendmail_starttls","shortDesc":"STARTTLS","description":"STARTTLS enabled (needs SSL)","defaultValue":"false","type":"BOOLEAN"}],"type":"SERVICE"},"authents":[],"services":[{"http":false,"name":"Sendmail","description":"Mail service user API","grantSyntax":"","notes":["This service is statically configured with an outgoing SMTP server.","Users call the API here to actually send emails."],"apis":[{"channel":"/service/BU_ID/depId20/send","description":"Sends an email","verb":"send","notes":["Sends an email with the given body to the intended recipients."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"Email","resolved":{"types":{"Email":{"type":"Email","javaClass":"com.zetapush.common.messages.sendmail.Email","fields":[{"type":"List[String]","name":"bcc","description":"Email recipients"},{"type":"List[String]","name":"cc","description":"Email recipients"},{"type":"String","name":"html","description":"Email html body. you can use text and/or html"},{"type":"String","name":"subject","description":"Email subject","required":true},{"type":"String","name":"text","description":"Email plain text body"},{"type":"List[String]","name":"to","description":"Email recipients"}],"anyField":false}}}},"errors":[]}],"notifs":[]}],"controllers":[{"description":"Administrative API for mail testing","notes":[],"apis":[{"shortDesc":"Sends a test email","method":"GET","path":"BU_ID/depId20/mail/test","verb":"/mail/test","notes":["Sends a test email to the given email address."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"responseBody":{"type":"String","resolved":{"types":{}}}}]}]},{"description":{"name":"Messaging service","description":"Messaging service","deployableId":"messaging","options":[{"name":"messaging_return_channel","shortDesc":"Forward channel","description":"Default channel name for messages forwarding","defaultValue":"reply","type":"STRING"}],"type":"SERVICE"},"authents":[],"services":[{"http":false,"name":"Messaging","description":"Messaging service","grantSyntax":"","notes":["Simple and flexible user-to-user or user-to-group messaging service."],"apis":[{"channel":"/service/BU_ID/depId4/send","description":"Sends a message to a target","verb":"send","notes":["Sends the given message to the specified target on the given (optional) channel.","The administratively given default channel name is used when none is provided in the message itself."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"Message","resolved":{"types":{"Message":{"type":"Message","javaClass":"com.zetapush.common.messages.messaging.Message","fields":[{"type":"ListOrSingle[String]","name":"target","description":"Target user or group. Can be either a string, an array of string or an object that contains an array of string. The 'target' property of the output message will have exactly the same form. \nTarget user or group, in the form userId or groupDeploymentId:owner:group.","required":true,"serverGenerated":false},{"type":"String","name":"channel","description":"Optional (alphanumeric) channel name"},{"type":"String","name":"source","description":"User key of the message sender. \nKey of the sending user","serverGenerated":true},{"type":"Map[String,Object]","name":"data","description":"Data to be sent. \nMessage payload. object with a free format.","required":true,"serverGenerated":false}],"anyField":false},"ListOrSingle":{"type":"ListOrSingle","javaClass":"com.zetapush.common.messages.ListOrSingle","fields":[{"type":"List[String]","name":"values","description":"The list of values"}],"anyField":false}}}},"otherOutputs":[{"type":"Message","resolved":{"types":{"Message":{"type":"Message","javaClass":"com.zetapush.common.messages.messaging.Message","fields":[{"type":"String","name":"channel","description":"Optional (alphanumeric) channel name"},{"type":"Map[String,Object]","name":"data","description":"Data to be sent","required":true},{"type":"String","name":"source","description":"User key of the message sender"},{"type":"ListOrSingle[String]","name":"target","description":"Target user or group. Can be either a string, an array of string or an object that contains an array of string. The 'target' property of the output message will have exactly the same form.","required":true}],"anyField":false},"ListOrSingle":{"type":"ListOrSingle","javaClass":"com.zetapush.common.messages.ListOrSingle","fields":[{"type":"List[String]","name":"values","description":"The list of values"}],"anyField":false}}},"channel":"[input.channel] or [messaging.return.channel]","target":"'target' field of the message","description":"","variableChannelName":true,"notes":[],"resolvedType":{"typeName":"Message","imports":["com.zetapush.common.messages.messaging.Message"]}}],"errors":[]}],"notifs":[]}],"controllers":[]},{"description":{"name":"Producer consumer","description":"Producer consumer service. Users can submit tasks and other users consume them","deployableId":"queue","options":[{"name":"queue_auth_id","shortDesc":"Auth service deployment ID","description":"You can white list the deployment IDs of authentications. If you don't, any connected user is eligible for registration. Use 'developer' to enable admin APIs and to prevent normal clients to register.","defaultValue":"","type":"STRING"}],"type":"SERVICE"},"authents":[],"services":[{"http":false,"name":"Queue","description":"Producer / consumer real-time API","grantSyntax":"","notes":["Task producers submits their tasks.","The server dispatches the tasks.","Consumers process them and report completion back to the server.","Tasks are global to the service (i.e. NOT per user)."],"apis":[{"channel":"/service/BU_ID/depId13/call","description":"Submits a task","verb":"call","notes":["Producer API.","A task producer submits the given task to the server.","The server will find a tasker with processing capacity and dispatch the task.","The task result will be returned to the caller.","When called from inside a macro, the consumer generated result is available for further use."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TaskRequest","resolved":{"types":{"TaskRequest":{"type":"TaskRequest","javaClass":"com.zetapush.common.messages.queue.TaskRequest","fields":[{"type":"OwnerResource","name":"originator","description":"Request submitter. \n","serverGenerated":true},{"type":"String","name":"description","description":"Task description"},{"type":"String","name":"contextId","description":"STR-generated context ID. Used for traceability of client requests."},{"type":"String","name":"originBusinessId","description":"BusinessId of the service which the task is from"},{"type":"String","name":"originDeploymentId","description":"DeploymentId of the service which the task is from"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Object","name":"data","description":"Task parameters. Specific for each consumer/producer contract"},{"type":"String","name":"owner","description":"When impersonating someone, use this field to differentiate from originator.owner"}],"anyField":false},"OwnerResource":{"type":"OwnerResource","javaClass":"com.zetapush.common.messages.remoting.OwnerResource","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false}}}},"responseInfo":{"type":"TaskCompletion","resolved":{"types":{"TaskCompletion":{"type":"TaskCompletion","javaClass":"com.zetapush.common.messages.queue.TaskCompletion","fields":[{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Object","name":"result","description":"Optional result of the processing. When 'success' is false, can contain an error object (with String fields 'code' and 'message')."},{"type":"boolean","name":"success","description":"A task consumer can specify whether computation was a success or not."},{"type":"Object","name":"target","description":"Target for the response (the syntax is the same as in messaging.send). Overrides 'broadcast' when set."},{"type":"String","name":"taskId","description":"Server-assigned task identifier."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"TASK_ERROR_CAPACITY","desc":"Task queue capacity is limited on the server. Consider adding more consumers or adding more capacity to each consumer."},{"code":"CONSUMER_UNSPECIFIED_ERROR","desc":"The consumer of a task reported a failure, without more precisions."}]},{"channel":"/service/BU_ID/depId13/done","description":"Notifies completion of a task","verb":"done","notes":["Consumer API.","The tasker notifies completion of the given task to the server.","The tasker can optionally include a result or an error code."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TaskCompletion","resolved":{"types":{"TaskCompletion":{"type":"TaskCompletion","javaClass":"com.zetapush.common.messages.queue.TaskCompletion","fields":[{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Object","name":"result","description":"Optional result of the processing. When 'success' is false, can contain an error object (with String fields 'code' and 'message')."},{"type":"boolean","name":"success","description":"A task consumer can specify whether computation was a success or not."},{"type":"Object","name":"target","description":"Target for the response (the syntax is the same as in messaging.send). Overrides 'broadcast' when set."},{"type":"String","name":"taskId","description":"Server-assigned task identifier."}],"anyField":false}}}},"errors":[]},{"channel":"/service/BU_ID/depId13/register","description":"Registers a consumer","verb":"register","notes":["Consumer API.","Registers the current user resource as an available task consumer.","Tasks will be then dispatched to that consumer.","IMPORTANT : after a disconnect and a new handshake, consumers must register again."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TaskConsumerRegistration","resolved":{"types":{"TaskConsumerRegistration":{"type":"TaskConsumerRegistration","javaClass":"com.zetapush.common.messages.queue.TaskConsumerRegistration","fields":[{"type":"int","name":"capacity","description":"Task consumer maximum capacity at a given time. The server will not exceed that capacity when dispatching new tasks"}],"anyField":false}}}},"errors":[]},{"channel":"/service/BU_ID/depId13/submit","description":"Submits a task","verb":"submit","notes":["Producer API.","A task producer submits the given task to the server.","The server will find a tasker with processing capacity and dispatch the task.","The task result will be ignored : the producer will not receive any notification of any kind, even in case of errors (including capacity exceeded errors).","This verb will return immediately : you can use this API to asynchronously submit a task."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TaskRequest","resolved":{"types":{"TaskRequest":{"type":"TaskRequest","javaClass":"com.zetapush.common.messages.queue.TaskRequest","fields":[{"type":"OwnerResource","name":"originator","description":"Request submitter. \n","serverGenerated":true},{"type":"String","name":"description","description":"Task description"},{"type":"String","name":"contextId","description":"STR-generated context ID. Used for traceability of client requests."},{"type":"String","name":"originBusinessId","description":"BusinessId of the service which the task is from"},{"type":"String","name":"originDeploymentId","description":"DeploymentId of the service which the task is from"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Object","name":"data","description":"Task parameters. Specific for each consumer/producer contract"},{"type":"String","name":"owner","description":"When impersonating someone, use this field to differentiate from originator.owner"}],"anyField":false},"OwnerResource":{"type":"OwnerResource","javaClass":"com.zetapush.common.messages.remoting.OwnerResource","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false}}}},"errors":[]},{"channel":"/service/BU_ID/depId13/unregister","description":"Unregisters a consumer","verb":"unregister","notes":["Consumer API.","Unregisters the current user resource as an available task consumer.","All non finished tasks are returned to the server.","Consumers that disconnect from the STR will be automatically unregistered from this service."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"errors":[]}],"notifs":[{"type":"QueueTask","resolved":{"types":{"QueueTask":{"type":"QueueTask","javaClass":"com.zetapush.common.messages.queue.QueueTask","fields":[{"type":"OwnerResource","name":"assignee","description":"Slave coordinates for this task"},{"type":"String","name":"businessId","description":"Sandbox ID of this queue service"},{"type":"String","name":"channel","description":"Channel name"},{"type":"String","name":"comet","description":"STR Node processing the request"},{"type":"String","name":"deploymentId","description":"Deployment ID of this queue service"},{"type":"boolean","name":"dispatched","description":"for server use"},{"type":"boolean","name":"done","description":"for server use"},{"type":"TaskRequest","name":"request","description":"Use-case specific payload"},{"type":"String","name":"taskId","description":"Server-generated task ID. Should be given back to channel 'done'"}],"anyField":false},"OwnerResource":{"type":"OwnerResource","javaClass":"com.zetapush.common.messages.remoting.OwnerResource","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false},"TaskRequest":{"type":"TaskRequest","javaClass":"com.zetapush.common.messages.queue.TaskRequest","fields":[{"type":"String","name":"contextId","description":"STR-generated context ID. Used for traceability of client requests."},{"type":"Object","name":"data","description":"Task parameters. Specific for each consumer/producer contract"},{"type":"String","name":"description","description":"Task description"},{"type":"String","name":"originBusinessId","description":"BusinessId of the service which the task is from"},{"type":"String","name":"originDeploymentId","description":"DeploymentId of the service which the task is from"},{"type":"OwnerResource","name":"originator","description":"Request submitter"},{"type":"String","name":"owner","description":"When impersonating someone, use this field to differentiate from originator.owner"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"channel":"dispatch","target":"'assignee' field of the message","description":"Generic task dispatched by the server to any consumer","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"QueueTask","imports":["com.zetapush.common.messages.queue.QueueTask"]}},{"type":"QueueTask","resolved":{"types":{"QueueTask":{"type":"QueueTask","javaClass":"com.zetapush.common.messages.queue.QueueTask","fields":[{"type":"OwnerResource","name":"assignee","description":"Slave coordinates for this task"},{"type":"String","name":"businessId","description":"Sandbox ID of this queue service"},{"type":"String","name":"channel","description":"Channel name"},{"type":"String","name":"comet","description":"STR Node processing the request"},{"type":"String","name":"deploymentId","description":"Deployment ID of this queue service"},{"type":"boolean","name":"dispatched","description":"for server use"},{"type":"boolean","name":"done","description":"for server use"},{"type":"TaskRequest","name":"request","description":"Use-case specific payload"},{"type":"String","name":"taskId","description":"Server-generated task ID. Should be given back to channel 'done'"}],"anyField":false},"OwnerResource":{"type":"OwnerResource","javaClass":"com.zetapush.common.messages.remoting.OwnerResource","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false},"TaskRequest":{"type":"TaskRequest","javaClass":"com.zetapush.common.messages.queue.TaskRequest","fields":[{"type":"String","name":"contextId","description":"STR-generated context ID. Used for traceability of client requests."},{"type":"Object","name":"data","description":"Task parameters. Specific for each consumer/producer contract"},{"type":"String","name":"description","description":"Task description"},{"type":"String","name":"originBusinessId","description":"BusinessId of the service which the task is from"},{"type":"String","name":"originDeploymentId","description":"DeploymentId of the service which the task is from"},{"type":"OwnerResource","name":"originator","description":"Request submitter"},{"type":"String","name":"owner","description":"When impersonating someone, use this field to differentiate from originator.owner"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"channel":"dispatch","target":"'assignee' field of the message","description":"Task dispatched by the server to priviledged slave consumers","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"QueueTask","imports":["com.zetapush.common.messages.queue.QueueTask"]}},{"type":"ProvisioningTask","resolved":{"types":{"ProvisioningTask":{"type":"ProvisioningTask","javaClass":"com.zetapush.common.messages.queue.ProvisioningTask","fields":[{"type":"OwnerResource","name":"assignee","description":"Slave coordinates for this task"},{"type":"String","name":"businessId","description":"Sandbox ID of this queue service"},{"type":"String","name":"channel","description":"Channel name"},{"type":"String","name":"comet","description":"STR Node processing the request"},{"type":"String","name":"deploymentId","description":"Deployment ID of this queue service"},{"type":"boolean","name":"dispatched","description":"for server use"},{"type":"boolean","name":"done","description":"for server use"},{"type":"ProvisioningTaskRequest","name":"request","description":"Use-case specific payload"},{"type":"String","name":"taskId","description":"Server-generated task ID. Should be given back to channel 'done'"}],"anyField":false},"OwnerResource":{"type":"OwnerResource","javaClass":"com.zetapush.common.messages.remoting.OwnerResource","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false},"ProvisioningCall":{"type":"ProvisioningCall","javaClass":"com.zetapush.common.messages.queue.ProvisioningTask.ProvisioningCall","fields":[],"anyField":false},"ProvisioningTaskRequest":{"type":"ProvisioningTaskRequest","javaClass":"com.zetapush.common.messages.queue.ProvisioningTask.ProvisioningTaskRequest","fields":[{"type":"String","name":"contextId","description":"STR-generated context ID. Used for traceability of client requests."},{"type":"ProvisioningCall","name":"data","description":"Task parameters. Specific for each consumer/producer contract"},{"type":"String","name":"description","description":"Task description"},{"type":"String","name":"originBusinessId","description":"BusinessId of the service which the task is from"},{"type":"String","name":"originDeploymentId","description":"DeploymentId of the service which the task is from"},{"type":"OwnerResource","name":"originator","description":"Request submitter"},{"type":"String","name":"owner","description":"When impersonating someone, use this field to differentiate from originator.owner"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"channel":"configure","target":"'assignee' field of the message","description":"Provisioning task dispatched by the server to one slave consumer at deployment time","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"ProvisioningTask","imports":["com.zetapush.common.messages.queue.ProvisioningTask"]}}]},{"http":false,"name":"WorkerAdmin","description":"Admin API when the queue service is used to provide server-side workers","grantSyntax":"","notes":["Task producers submits their tasks.","The server dispatches the tasks."],"apis":[{"channel":"/service/BU_ID/depId13/admin","description":"Makes several admin API calls at once.","verb":"admin","notes":["Calls are made sequentially in the given order.","There is no rollback if something goes wrong."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"WorkerAdminBulkRequest","resolved":{"types":{"WorkerAdminBulkRequest":{"type":"WorkerAdminBulkRequest","javaClass":"com.zetapush.common.messages.queue.admin.WorkerAdminBulkRequest","fields":[{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[WorkerAdminRequest]","name":"requests","description":"List of admin requests"}],"anyField":false},"WorkerAdminRequest":{"type":"WorkerAdminRequest","javaClass":"com.zetapush.common.messages.queue.admin.WorkerAdminRequest","fields":[{"type":"String","name":"deploymentId","description":"Deployment ID of the target service"},{"type":"Object","name":"parameters","description":"Parameter (request body)"},{"type":"String","name":"verb","description":"Verb name inside the service"}],"anyField":false}}}},"responseInfo":{"type":"WorkerAdminBulkResponse","resolved":{"types":{"WorkerAdminBulkResponse":{"type":"WorkerAdminBulkResponse","javaClass":"com.zetapush.common.messages.queue.admin.WorkerAdminBulkResponse","fields":[{"type":"ZetaApiError","name":"error","description":"This field might contain a (fatal) error."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"List[Object]","name":"responses","description":"List of responses, in the same order as in the request"}],"anyField":false},"ZetaApiError":{"type":"ZetaApiError","javaClass":"com.zetapush.common.messages.ZetaApiError","fields":[{"type":"String","name":"code","description":"Symbolic error code"},{"type":"Object","name":"context","description":"Developer-generated context. Each code can have a specific context format."},{"type":"String","name":"location","description":"Error location, if available"},{"type":"String","name":"message","description":"Human readable message. May vary depending on one or more of locale, input, developer code."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId13/createServices","description":"Creates several services","verb":"createServices","notes":["Configures missing services, restarts modified services.","Does not touch existing services with the same exact configuration.","There is no rollback if something goes wrong.","This cannot be used to redeploy the current service."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"WorkerAdminBulkServiceCreation","resolved":{"types":{"WorkerAdminBulkServiceCreation":{"type":"WorkerAdminBulkServiceCreation","javaClass":"com.zetapush.common.messages.queue.admin.WorkerAdminBulkServiceCreation","fields":[{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[DeployedItem]","name":"services","description":"List of services to be created"}],"anyField":false},"DeployedItem":{"type":"DeployedItem","javaClass":"com.zetapush.common.messages.deployment.DeployedItem","fields":[{"type":"String","name":"businessId","required":true},{"type":"String","name":"deploymentId"},{"type":"String","name":"description"},{"type":"boolean","name":"enabled"},{"type":"Set[String]","name":"forbiddenVerbs"},{"type":"String","name":"itemId","required":true},{"type":"Map[String,String]","name":"options"}],"anyField":false}}}},"responseInfo":{"type":"WorkerAdminBulkResponse","resolved":{"types":{"WorkerAdminBulkResponse":{"type":"WorkerAdminBulkResponse","javaClass":"com.zetapush.common.messages.queue.admin.WorkerAdminBulkResponse","fields":[{"type":"ZetaApiError","name":"error","description":"This field might contain a (fatal) error."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"List[Object]","name":"responses","description":"List of responses, in the same order as in the request"}],"anyField":false},"ZetaApiError":{"type":"ZetaApiError","javaClass":"com.zetapush.common.messages.ZetaApiError","fields":[{"type":"String","name":"code","description":"Symbolic error code"},{"type":"Object","name":"context","description":"Developer-generated context. Each code can have a specific context format."},{"type":"String","name":"location","description":"Error location, if available"},{"type":"String","name":"message","description":"Human readable message. May vary depending on one or more of locale, input, developer code."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]}],"notifs":[]}],"controllers":[]},{"description":{"name":"Push Notifications","description":"Native Push Notifications for Android, iOS ...","deployableId":"notif","type":"SERVICE"},"authents":[],"services":[{"http":false,"name":"Notif","description":"Notification User API","grantSyntax":"","notes":["User API for notifications.","For notifications to work properly, it is imperative that the resource name of a device remain constant over time."],"apis":[{"channel":"/service/BU_ID/depId8/register","description":"Registers a device","verb":"register","notes":["Registers the device for the current user and resource.","This service maintains a mapping of __userkey/__resource to device registration IDs.","You MUST NOT re-use the same resource name from one device to another if you want to target specific devices with 'send'.","Only one registration can be active for a given __userKey/__resource pair in a notification service.","Device registration can be <b>neither impersonated nor called indirectly</b> (from a scheduled job)."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"NotifiableDeviceRegistration","resolved":{"types":{"NotifiableDeviceRegistration":{"type":"NotifiableDeviceRegistration","javaClass":"com.zetapush.common.messages.notifications.NotifiableDeviceRegistration","fields":[{"type":"String","name":"appId","description":"Application primary key (as defined in 'createApp')","required":true},{"type":"String","name":"deviceToken","description":"Device-specific and app-specific opaque token. The format and meaning is vendor (Apple, Android...) specific. The value is generated by some vendor API on the device for a particular app and will be used by zetapush for notifications.","required":true}],"anyField":false}}}},"errors":[]},{"channel":"/service/BU_ID/depId8/send","description":"Sends a notification to the target","verb":"send","notes":["Sends a native push notification to the target."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"NotificationMessage","resolved":{"types":{"NotificationMessage":{"type":"NotificationMessage","javaClass":"com.zetapush.common.messages.notifications.NotificationMessage","fields":[{"type":"Object","name":"data","description":"Data to be sent (map or string). Top-level fields to be included in the message. If data is a string, data will be put in the right, vendor-specific, location in the data structure sent to the device."},{"type":"String","name":"resource","description":"Resource of the target device (optional. if not given, will notify all devices of the user)"},{"type":"String","name":"target","description":"Target user key (as in __userKey)","required":true}],"anyField":false}}}},"responseInfo":{"type":"NotificationSendStatus","resolved":{"types":{"NotificationSendStatus":{"type":"NotificationSendStatus","javaClass":"com.zetapush.common.messages.notifications.NotificationSendStatus","fields":[{"type":"NotificationMessage","name":"message","description":"Source message"},{"type":"List[DeviceNotificationSendStatus]","name":"report","description":"List of statuses for each target device"}],"anyField":false},"DeviceNotificationSendStatus":{"type":"DeviceNotificationSendStatus","javaClass":"com.zetapush.common.messages.notifications.NotificationSendStatus.DeviceNotificationSendStatus","fields":[{"type":"String","name":"deviceToken","description":"Token for target device"},{"type":"String","name":"endpoint","description":"Endpoint for target device"},{"type":"boolean","name":"success","description":"Whether the message was sent"}],"anyField":false},"NotificationMessage":{"type":"NotificationMessage","javaClass":"com.zetapush.common.messages.notifications.NotificationMessage","fields":[{"type":"Object","name":"data","description":"Data to be sent (map or string). Top-level fields to be included in the message. If data is a string, data will be put in the right, vendor-specific, location in the data structure sent to the device."},{"type":"String","name":"resource","description":"Resource of the target device (optional. if not given, will notify all devices of the user)"},{"type":"String","name":"target","description":"Target user key (as in __userKey)","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId8/unregister","description":"Unregisters a device","verb":"unregister","notes":["Unregisters the device for the current user and resource.","This verb does not need any parameters."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"errors":[]}],"notifs":[]}],"controllers":[{"description":"Administrative API for notifications management.","notes":["You can create and list your applications"],"apis":[{"shortDesc":"Creates an application","method":"POST","path":"BU_ID/depId8/notifs/createApp","verb":"/notifs/createApp","notes":["The created application can then be referenced when registering a device."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"NotifiableApplication","resolved":{"types":{"NotifiableApplication":{"type":"NotifiableApplication","javaClass":"com.zetapush.common.messages.notifications.NotifiableApplication","fields":[{"type":"String","name":"appId","description":"Application primary key, that you choose arbitrarily. If absent, it will default to the value of applicationName"},{"type":"String","name":"applicationName","description":"Application name, as registered in your vendor-specific management console","required":true},{"type":"String","name":"credential","description":"Vendor-specific credential : 'private key' for APNS, 'API key' for GCM","required":true},{"type":"NotificationPlatform","name":"platform","description":"Platform type","required":true},{"type":"String","name":"principal","description":"Your vendor-specific principal : 'SSL certificate' (PEM format) for APNS, N/A for GCM"}],"anyField":false},"NotificationPlatform":{"type":"NotificationPlatform","javaClass":"com.zetapush.common.messages.notifications.NotificationPlatform","enumValues":[{"name":"APNS","description":"Apple"},{"name":"APNS_VOIP_SANDBOX","description":"Apple sandbox"},{"name":"APNS_SANDBOX","description":"Apple VOIP sandbox"},{"name":"GCM","description":"Google Cloud Messaging"}],"anyField":false}}}},"responseBody":{"type":"void","resolved":{"types":{}}}}]}]},{"description":{"name":"RDBMS","description":"Relational Database : SQL storage","deployableId":"rdbms","type":"SERVICE"},"authents":[],"services":[{"http":false,"name":"Rdbms","description":"RDBMS User API","grantSyntax":"","notes":["User API for SQL queries.","Contrary to GDA or Stacks, the data are not stored on a per-user basis.","Users can store, get, list their data."],"apis":[{"channel":"/service/BU_ID/depId7/query","description":"Runs a query.","verb":"query","action":"query","notes":["Runs a DML query with SQL syntax on this database.","The @@sql statement supports inline SQL (unquoted), embedded constants (prefixed by '$', unescaped and statically replaced in the generated SQL query), embedded parameters (prefixed by ':', dynamically replaced and escaped at run-time)","The returned RdbmsResultSet is an iterable collection of rows.","The returned result set is iterable only once.","The content of a row is accessible only when it is being iterated on."],"serverOnly":true,"clientOnly":false,"slaveDisabled":true,"paramInfo":{"type":"RdbmsQuery","resolved":{"types":{"RdbmsQuery":{"type":"RdbmsQuery","javaClass":"com.zetapush.common.messages.rdbms.RdbmsQuery","fields":[{"type":"List[Object]","name":"parameters","description":"Parameters of the query"},{"type":"String","name":"statement","description":"SQL query"}],"anyField":false}}}},"responseInfo":{"type":"RdbmsResultSet","resolved":{"types":{"RdbmsResultSet":{"type":"RdbmsResultSet","javaClass":"com.zetapush.str.service.rdbms.RdbmsResultSet","fields":[],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId7/update","description":"Runs an update.","verb":"update","action":"update","notes":["Runs a DML update with SQL syntax on this database."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"RdbmsQuery","resolved":{"types":{"RdbmsQuery":{"type":"RdbmsQuery","javaClass":"com.zetapush.common.messages.rdbms.RdbmsQuery","fields":[{"type":"List[Object]","name":"parameters","description":"Parameters of the query"},{"type":"String","name":"statement","description":"SQL query"}],"anyField":false}}}},"errors":[]}],"notifs":[]}],"controllers":[{"description":"Administrative API for rdbms management.","notes":["You can create and list tables"],"apis":[{"shortDesc":"Issues a DDL query","method":"POST","path":"BU_ID/depId7/rdbms/ddl","verb":"/rdbms/ddl","notes":["Runs the given query or queries."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"RdbmsSimpleQuery","resolved":{"types":{"RdbmsSimpleQuery":{"type":"RdbmsSimpleQuery","javaClass":"com.zetapush.common.messages.rdbms.RdbmsSimpleQuery","fields":[{"type":"String","name":"statement","description":"SQL query"}],"anyField":false}}}},"responseBody":{"type":"void","resolved":{"types":{}}}}]}]},{"description":{"name":"SMS via OVH","description":"SMS sender, to send text messages to mobile phones.This SMS sending service uses the OVH API.","deployableId":"sms_ovh","options":[{"name":"sms_ovh_ak","shortDesc":"App key","description":"OVH Application Key","type":"STRING"},{"name":"sms_ovh_as","shortDesc":"App secret","description":"OVH Application Secret","type":"STRING"},{"name":"sms_ovh_ck","shortDesc":"Consumer key","description":"OVH Consumer Key","type":"STRING"},{"name":"sms_ovh_sn","shortDesc":"Service name","description":"OVH Service Name. Must match a defined service name in your OVH dashboard","type":"STRING"}],"type":"SERVICE"},"authents":[],"services":[{"http":false,"name":"Sms_ovh","description":"SMS service","grantSyntax":"","notes":["User API for SMS."],"apis":[{"channel":"/service/BU_ID/depId23/send","description":"Sends an SMS","verb":"send","notes":["Sends the given message to the given recipients."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"SmsMessage","resolved":{"types":{"SmsMessage":{"type":"SmsMessage","javaClass":"com.zetapush.common.messages.sms.SmsMessage","fields":[{"type":"String","name":"message","description":"Text message. Standard restrictions for text messages apply"},{"type":"List[String]","name":"receivers","description":"List of recipients"},{"type":"String","name":"sender","description":"Sender name"}],"anyField":false}}}},"errors":[]}],"notifs":[]}],"controllers":[]},{"description":{"name":"Scheduler","description":"Scheduler service. End-users can schedule one-time or repetitive tasks using a classical cron syntax (with the year field) or a timestamp (milliseconds from the epoch)","deployableId":"cron","type":"SERVICE"},"authents":[],"services":[{"http":false,"name":"Cron","description":"User API for the Scheduler","grantSyntax":"","notes":["User endpoints for scheduling : users can schedule, list and delete tasks.","Tasks are stored on a per-user basis: a task will run with the priviledges of the user who stored it.","Tasks are run on the server and thus can call api verbs marked as server-only."],"apis":[{"channel":"/service/BU_ID/depId14/list","description":"List the configured tasks","verb":"list","notes":["Returns a paginated list of the asking user's tasks."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CronTaskListRequest","resolved":{"types":{"CronTaskListRequest":{"type":"CronTaskListRequest","javaClass":"com.zetapush.common.messages.cron.CronTaskListRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"long","name":"start","description":"Start timestamp for the task list. Not implemented"},{"type":"long","name":"stop","description":"Stop timestamp for the task list. Not implemented"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"CronPlanning","resolved":{"types":{"CronPlanning":{"type":"CronPlanning","javaClass":"com.zetapush.common.messages.cron.CronPlanning","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"CronTaskListRequest","name":"request","description":"Cron planning request"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"PageContent[CronTaskRequest]","name":"tasks","description":"List of all tasks matching the request"}],"anyField":false},"CronTaskListRequest":{"type":"CronTaskListRequest","javaClass":"com.zetapush.common.messages.cron.CronTaskListRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"long","name":"start","description":"Start timestamp for the task list. Not implemented"},{"type":"long","name":"stop","description":"Stop timestamp for the task list. Not implemented"}],"anyField":false},"CronTaskRequest":{"type":"CronTaskRequest","javaClass":"com.zetapush.common.messages.cron.CronTaskRequest","fields":[{"type":"String","name":"cronName","description":"Cron identifier. mandatory for creation or update.","required":true},{"type":"String","name":"deploymentId","description":"DeploymentId of the target service.","required":true},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the target verb when called. The format is the format accepted by the target."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Object","name":"schedule","description":"Cron-like expression (with fixed minutes and hours) or unix timestamp (as milliseconds from the epoch). Times are UTC.","required":true},{"type":"Long","name":"stop","description":"Max number of executions."},{"type":"String","name":"verb","description":"Verb to be called within the target service.","required":true}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId14/schedule","description":"Schedules a task","verb":"schedule","notes":["Schedules a task for later execution. Tasks are executed asynchronously with the identity of the calling user.","Tasks will be executed at a fixed moment in time in the future, or repeatedly, with minute precision.","If a task already exists with the same cronName (a cronName is unique for a given user), this new task completely replaces it.","A task can be scheduled with a cron-like syntax for repetitive or one-shot execution.","Wildcards are not allowed for minutes and hours.","When scheduling for one-shot execution, the time must be at least two minutes into the future."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CronTaskRequest","resolved":{"types":{"CronTaskRequest":{"type":"CronTaskRequest","javaClass":"com.zetapush.common.messages.cron.CronTaskRequest","fields":[{"type":"String","name":"cronName","description":"Cron identifier. mandatory for creation or update.","required":true},{"type":"String","name":"deploymentId","description":"DeploymentId of the target service.","required":true},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the target verb when called. The format is the format accepted by the target."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Object","name":"schedule","description":"Cron-like expression (with fixed minutes and hours) or unix timestamp (as milliseconds from the epoch). Times are UTC.","required":true},{"type":"Long","name":"stop","description":"Max number of executions."},{"type":"String","name":"verb","description":"Verb to be called within the target service.","required":true}],"anyField":false}}}},"responseInfo":{"type":"CronTaskRequest","resolved":{"types":{"CronTaskRequest":{"type":"CronTaskRequest","javaClass":"com.zetapush.common.messages.cron.CronTaskRequest","fields":[{"type":"String","name":"cronName","description":"Cron identifier. mandatory for creation or update.","required":true},{"type":"String","name":"deploymentId","description":"DeploymentId of the target service.","required":true},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the target verb when called. The format is the format accepted by the target."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Object","name":"schedule","description":"Cron-like expression (with fixed minutes and hours) or unix timestamp (as milliseconds from the epoch). Times are UTC.","required":true},{"type":"Long","name":"stop","description":"Max number of executions."},{"type":"String","name":"verb","description":"Verb to be called within the target service.","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"PAST_DATE","desc":"A task can only be set in the future (two minutes from now). The current time (UTC) of the server can be accessed from inside a macro with the function time:now()."},{"code":"FORBIDDEN_CRON","desc":"A schedule must respect some constraints : the 'minutes' and 'hours' fields must be precise. Wilcards are not allowed."},{"code":"BAD_CRON","desc":"The schedule could not be parsed. Please check your syntax."}]},{"channel":"/service/BU_ID/depId14/setTimeout","description":"Schedules a task","verb":"setTimeout","notes":["Schedules a task for later execution. Tasks are executed asynchronously with the identity of the calling user.","Tasks will be executed with second precision in the near future (120 seconds delay max)."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TimerRequest","resolved":{"types":{"TimerRequest":{"type":"TimerRequest","javaClass":"com.zetapush.common.messages.cron.TimerRequest","fields":[{"type":"int","name":"delay","description":"Delay in seconds before calling the given API. Must be a integer between 1 and 120."},{"type":"String","name":"deploymentId","description":"DeploymentId of the target service.","required":true},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the target verb when called. The format is the format accepted by the target."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"verb","description":"Verb to be called within the target service.","required":true}],"anyField":false}}}},"responseInfo":{"type":"TimerResult","resolved":{"types":{"TimerResult":{"type":"TimerResult","javaClass":"com.zetapush.common.messages.cron.TimerResult","fields":[{"type":"String","name":"id","description":"Timer identifier"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId14/unschedule","description":"Removes a scheduled task","verb":"unschedule","notes":["Removes a previously scheduled task.","Does absolutely nothing if asked to remove a non-existent task."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CronTaskDeletion","resolved":{"types":{"CronTaskDeletion":{"type":"CronTaskDeletion","javaClass":"com.zetapush.common.messages.cron.CronTaskDeletion","fields":[{"type":"String","name":"cronName","description":"cron name identifying the task to be removed"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CronTaskDeletion","resolved":{"types":{"CronTaskDeletion":{"type":"CronTaskDeletion","javaClass":"com.zetapush.common.messages.cron.CronTaskDeletion","fields":[{"type":"String","name":"cronName","description":"cron name identifying the task to be removed"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]}],"notifs":[]}],"controllers":[]},{"description":{"name":"Search engine","description":"ElasticSearch engine, to index and search data. An admin creates indices. Users index and search documents.","deployableId":"search","type":"SERVICE"},"authents":[],"services":[{"http":true,"name":"Search","description":"ElasticSearch Service","grantSyntax":"","notes":["This API is a very thin wrapper around ElasticSearch's API."],"apis":[{"channel":"/service/BU_ID/depId22/delete","description":"Deletes data","verb":"delete","notes":["Deletes a document from the elasticsearch engine by id."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"SearchDocumentId","resolved":{"types":{"SearchDocumentId":{"type":"SearchDocumentId","javaClass":"com.zetapush.common.messages.search.SearchDocumentId","fields":[{"type":"String","name":"id","description":"Document id","required":true},{"type":"String","name":"index","description":"Index name","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"type","description":"Type name","required":true}],"anyField":false}}}},"errors":[{"code":"SEARCH_ERROR","desc":"General search error."},{"code":"SEARCH_MISSING_INDEX","desc":"Query on a non existing index."}]},{"channel":"/service/BU_ID/depId22/get","description":"Gets data","verb":"get","notes":["Retrieves a document from the elasticsearch engine by id."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"SearchDocumentId","resolved":{"types":{"SearchDocumentId":{"type":"SearchDocumentId","javaClass":"com.zetapush.common.messages.search.SearchDocumentId","fields":[{"type":"String","name":"id","description":"Document id","required":true},{"type":"String","name":"index","description":"Index name","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"type","description":"Type name","required":true}],"anyField":false}}}},"responseInfo":{"type":"SearchData","resolved":{"types":{"SearchData":{"type":"SearchData","javaClass":"com.zetapush.common.messages.search.SearchData","fields":[{"type":"Map[String,Object]","name":"data","description":"Document data","required":true},{"type":"String","name":"id","description":"Document id","required":true},{"type":"String","name":"index","description":"Index name","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"type","description":"Type name","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"SEARCH_ERROR","desc":"General search error."},{"code":"SEARCH_MISSING_INDEX","desc":"Query on a non existing index."}]},{"channel":"/service/BU_ID/depId22/index","description":"Indexes data","verb":"index","notes":["Inserts or updates a document into the elasticsearch engine."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"SearchData","resolved":{"types":{"SearchData":{"type":"SearchData","javaClass":"com.zetapush.common.messages.search.SearchData","fields":[{"type":"Map[String,Object]","name":"data","description":"Document data","required":true},{"type":"String","name":"id","description":"Document id","required":true},{"type":"String","name":"index","description":"Index name","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"type","description":"Type name","required":true}],"anyField":false}}}},"errors":[{"code":"SEARCH_ERROR","desc":"General search error."},{"code":"SEARCH_MISSING_INDEX","desc":"Query on a non existing index."}]},{"channel":"/service/BU_ID/depId22/search","description":"Searches for data","verb":"search","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"SearchRequest","resolved":{"types":{"SearchRequest":{"type":"SearchRequest","javaClass":"com.zetapush.common.messages.search.SearchRequest","fields":[{"type":"Map[String,Object]","name":"filter","description":"ElasticSearch filter. Follows the syntax defined in the elastic search manual."},{"type":"List[String]","name":"indices","description":"List of indices to be searched.","required":true},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"Map[String,Object]","name":"query","description":"ElasticSearch query. Follows the syntax defined in the elastic search manual.","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[SearchRequestSortField]","name":"sort","description":"Sort information"},{"type":"List[String]","name":"types","description":"The document types to execute the search against. Defaults to be executed against all types."}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"SearchRequestSortField":{"type":"SearchRequestSortField","javaClass":"com.zetapush.common.messages.search.SearchRequestSortField","fields":[{"type":"String","name":"name","description":"Field name"},{"type":"Map[String,Object]","name":"sort","description":"Field sort information. Follows elasticsearch syntax."}],"anyField":false}}}},"responseInfo":{"type":"SearchResults","resolved":{"types":{"SearchResults":{"type":"SearchResults","javaClass":"com.zetapush.common.messages.search.SearchResults","fields":[{"type":"PageContent[SearchResultsItem]","name":"items","description":"List of found items"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"long","name":"totalHits","description":"Total number of documents matching the query"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"SearchResultsItem":{"type":"SearchResultsItem","javaClass":"com.zetapush.common.messages.search.SearchResultsItem","fields":[{"type":"Map[String,Object]","name":"data","description":"Document data","required":true},{"type":"String","name":"id","description":"Document id","required":true},{"type":"String","name":"index","description":"Index name","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"float","name":"score","description":"Item score"},{"type":"String","name":"type","description":"Type name","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"SEARCH_ERROR","desc":"General search error."},{"code":"SEARCH_MISSING_INDEX","desc":"Query on a non existing index."}]}],"notifs":[]}],"controllers":[{"description":"Administrative API for elasticsearch index management","notes":[],"apis":[{"shortDesc":"Creates an index","method":"POST","path":"BU_ID/depId22/search/createIndex","verb":"/search/createIndex","notes":["Creates a new elasticsearch index, with the given mappings.","The settings fields only supports a sub-set of ES settings : analysis"],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"SearchIndex","resolved":{"types":{"SearchIndex":{"type":"SearchIndex","javaClass":"com.zetapush.common.messages.search.SearchIndex","fields":[{"type":"String","name":"index","description":"Index name","required":true},{"type":"Map[String,Map[String,Object]]","name":"mappings","description":"ElasticSearch field mappings"},{"type":"Map[String,Object]","name":"settings","description":"ElasticSearch index settings."}],"anyField":false}}}},"responseBody":{"type":"SearchIndex","resolved":{"types":{"SearchIndex":{"type":"SearchIndex","javaClass":"com.zetapush.common.messages.search.SearchIndex","fields":[{"type":"String","name":"index","description":"Index name","required":true},{"type":"Map[String,Map[String,Object]]","name":"mappings","description":"ElasticSearch field mappings"},{"type":"Map[String,Object]","name":"settings","description":"ElasticSearch index settings."}],"anyField":false}}}}},{"shortDesc":"Deletes an index","method":"DELETE","path":"BU_ID/depId22/search/delete/{index}","verb":"/search/delete/{index}","notes":["Deletes an existing elasticsearch index."],"audience":"DEVELOPER","pathVariables":[{"name":"","type":"String","desc":"no description"}],"requestParams":[],"scriptable":false,"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"Lists existing indices","method":"GET","path":"BU_ID/depId22/search/listIndices","verb":"/search/listIndices","notes":["Returns a paginated list of existing indices."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":false,"responseBody":{"type":"PageContent[SearchIndex]","resolved":{"types":{"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"SearchIndex":{"type":"SearchIndex","javaClass":"com.zetapush.common.messages.search.SearchIndex","fields":[{"type":"String","name":"index","description":"Index name","required":true},{"type":"Map[String,Map[String,Object]]","name":"mappings","description":"ElasticSearch field mappings"},{"type":"Map[String,Object]","name":"settings","description":"ElasticSearch index settings."}],"anyField":false}}}}}]}]},{"description":{"name":"Template engine","description":"Template engine to produce documents from parameterized templates.<br>An admin creates templates.<br> Users produce documents.<br>The implementation uses the <a href='http://freemarker.org/'>freemarker</a> engine.","deployableId":"template","type":"SERVICE"},"authents":[],"services":[{"http":true,"name":"Template","description":"User API for templates","grantSyntax":"","notes":["Users use this API to evaluate pre-configured templates."],"apis":[{"channel":"/service/BU_ID/depId21/evaluate","description":"Evaluates a template","verb":"evaluate","notes":["Evaluates the given template and returns the result as a string.","Templates are parsed the first time they are evaluated. Evaluation may fail early due to a parsing error."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TemplateRequest","resolved":{"types":{"TemplateRequest":{"type":"TemplateRequest","javaClass":"com.zetapush.common.messages.template.TemplateRequest","fields":[{"type":"Map[String,Object]","name":"data","description":"Data model","required":true},{"type":"String","name":"languageTag","description":"Locale, as defined by IETF BCP 47"},{"type":"String","name":"name","description":"Template name, as configured by an admin","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"TemplateResult","resolved":{"types":{"TemplateResult":{"type":"TemplateResult","javaClass":"com.zetapush.common.messages.template.TemplateResult","fields":[{"type":"String","name":"content","description":"Result of template evaluation"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"PARSE_EXCEPTION","desc":"Parsing error. The template syntax is incorrect. The detailed error message at run-time may help you debug."},{"code":"EVALUATION_EXCEPTION","desc":"Evaluation error. The template syntax is correct, but the template was not fed the data it expects."}]}],"notifs":[]},{"http":false,"name":"TemplateManagement","description":"User API for templates management","grantSyntax":"","notes":["Users use this API to configure templates."],"apis":[{"channel":"/service/BU_ID/depId21/add","description":"Creates a localized template","verb":"add","notes":["Creates a new localized template for the given 'name' and 'languageTag' (IETF BCP 47), replacing an existing one if it already exists. The default template for the given 'name' must exist."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"LocalizedTemplateCreation","resolved":{"types":{"LocalizedTemplateCreation":{"type":"LocalizedTemplateCreation","javaClass":"com.zetapush.common.messages.template.LocalizedTemplateCreation","fields":[{"type":"String","name":"languageTag","description":"IETF BCP 47 language tag","required":true},{"type":"String","name":"name","description":"template name","required":true},{"type":"String","name":"template","description":"template contents, as a character string","required":true}],"anyField":false}}}},"errors":[]},{"channel":"/service/BU_ID/depId21/create","description":"Creates a template","verb":"create","notes":["Creates a new default template for the given 'name', replacing an existing one if it already exists."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TemplateCreation","resolved":{"types":{"TemplateCreation":{"type":"TemplateCreation","javaClass":"com.zetapush.common.messages.template.TemplateCreation","fields":[{"type":"String","name":"name","description":"template name","required":true},{"type":"String","name":"template","description":"template contents, as a character string","required":true}],"anyField":false}}}},"errors":[]},{"channel":"/service/BU_ID/depId21/delete","description":"Removes a template","verb":"delete","notes":["Removes an existing localized template for the given 'name' and 'languageTag'.","If you omit the languageTag, all localizations will be removed, including the default."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TemplateRemoval","resolved":{"types":{"TemplateRemoval":{"type":"TemplateRemoval","javaClass":"com.zetapush.common.messages.template.TemplateRemoval","fields":[{"type":"String","name":"languageTag","description":"IETF BCP 47 language tag"},{"type":"String","name":"name","description":"template name","required":true}],"anyField":false}}}},"errors":[]},{"channel":"/service/BU_ID/depId21/list","description":"Lists template information","verb":"list","notes":["Returns a paginated list of previously uploaded template information."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TemplateListRequest","resolved":{"types":{"TemplateListRequest":{"type":"TemplateListRequest","javaClass":"com.zetapush.common.messages.template.TemplateListRequest","fields":[{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"TemplateListResult","resolved":{"types":{"TemplateListResult":{"type":"TemplateListResult","javaClass":"com.zetapush.common.messages.template.TemplateListResult","fields":[{"type":"TemplateListRequest","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"PageContent[TemplateInfo]","name":"result","description":"Result for the specified request"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"TemplateInfo":{"type":"TemplateInfo","javaClass":"com.zetapush.common.messages.template.TemplateInfo","fields":[{"type":"List[String]","name":"languageTags","description":"List of languages for which a localization of the template exists"},{"type":"String","name":"name","description":"Template name"}],"anyField":false},"TemplateListRequest":{"type":"TemplateListRequest","javaClass":"com.zetapush.common.messages.template.TemplateListRequest","fields":[{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]}],"notifs":[]}],"controllers":[{"description":"Administrative API for template management.","notes":["You upload a default template with 'create' and add localizations with 'add'.","'list' and 'delete' let you manage your existing templates.","Template syntax is NOT checked. It will be lazily parsed the first time it is used."],"apis":[{"shortDesc":"Uploads a localized template","method":"POST","path":"BU_ID/depId21/template/add","verb":"/template/add","notes":["Uploads a new localized template 'file' for the given 'name' and 'languageTag' (IETF BCP 47), replacing an existing one if it already exists. The default template for the given 'name' must exist.","This API needs Content-Type 'multipart/form-data'"],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"Uploads a template","method":"POST","path":"BU_ID/depId21/template/create","verb":"/template/create","notes":["Uploads a new default template 'file' for the given 'name', replacing an existing one if it already exists.","This API needs Content-Type 'multipart/form-data'"],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"Removes a template","method":"GET","path":"BU_ID/depId21/template/delete/{name}","verb":"/template/delete/{name}","notes":["Removes all localized version of the template for the given 'name', including the default template"],"audience":"DEVELOPER","pathVariables":[{"name":"name","type":"String","desc":"no description"}],"requestParams":[],"scriptable":false,"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"Removes a localized template","method":"GET","path":"BU_ID/depId21/template/delete/{name}/{languageTag}","verb":"/template/delete/{name}/{languageTag}","notes":["Removes an existing localized template for the given 'name' and 'languageTag'. You cannot remove the default template for a given name"],"audience":"DEVELOPER","pathVariables":[{"name":"name","type":"String","desc":"no description"},{"name":"languageTag","type":"String","desc":"no description"}],"requestParams":[],"scriptable":false,"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"Lists template information","method":"GET","path":"BU_ID/depId21/template/list","verb":"/template/list","notes":["Returns a paginated list of previously uploaded template information."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":false,"responseBody":{"type":"PageContent[TemplateInfo]","resolved":{"types":{"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"TemplateInfo":{"type":"TemplateInfo","javaClass":"com.zetapush.common.messages.template.TemplateInfo","fields":[{"type":"List[String]","name":"languageTags","description":"List of languages for which a localization of the template exists"},{"type":"String","name":"name","description":"Template name"}],"anyField":false}}}}}]}]},{"description":{"name":"Triggers","description":"Register callbacks for events and trigger them when needed.","deployableId":"trigger","type":"SERVICE"},"authents":[],"services":[{"http":false,"name":"Trigger","description":"Trigger service","grantSyntax":"deploymentId:owner:event","notes":["Register listeners and trigger events."],"apis":[{"channel":"/service/BU_ID/depId25/trigger","description":"Triggers an event","verb":"trigger","notes":["Triggers an event.","All listeners previously registered for that event will be called, in no particular order."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"EventTrigger","resolved":{"types":{"EventTrigger":{"type":"EventTrigger","javaClass":"com.zetapush.common.messages.trigger.EventTrigger","fields":[{"type":"Object","name":"data","description":"Event data"},{"type":"String","name":"event","description":"Event name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"errors":[]}],"notifs":[]}],"controllers":[{"description":"Administrative API for trigger management.","notes":["You can add and remove listeners"],"apis":[{"shortDesc":"Adds an API listener","method":"POST","path":"BU_ID/depId25/trigger/addApiListener","verb":"/trigger/addApiListener","notes":["Adds or updates a listener for the given API verb.","The listener will be called when the output of the verb is emitted."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"ApiTriggerListener","resolved":{"types":{"ApiTriggerListener":{"type":"ApiTriggerListener","javaClass":"com.zetapush.common.messages.trigger.ApiTriggerListener","fields":[{"type":"String","name":"deploymentId","description":"DeploymentId of the target service.","required":true},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the target verb when called. The format is the format accepted by the target."},{"type":"ApiTriggerId","name":"trigger","description":"Trigger info","required":true},{"type":"String","name":"verb","description":"Verb to be called within the target service.","required":true}],"anyField":false},"ApiTriggerId":{"type":"ApiTriggerId","javaClass":"com.zetapush.common.messages.trigger.ApiTriggerId","fields":[{"type":"String","name":"deploymentId","description":"Deployment ID of the service verb to listen to.","required":true},{"type":"String","name":"name","description":"Listener name","required":true},{"type":"String","name":"verb","description":"Verb to be listened to within the target service.","required":true}],"anyField":false}}}},"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"Adds a listener","method":"POST","path":"BU_ID/depId25/trigger/addListener","verb":"/trigger/addListener","notes":["Adds or updates a listener for the given event.","The listener will be called when the event is triggered."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"TriggerListener","resolved":{"types":{"TriggerListener":{"type":"TriggerListener","javaClass":"com.zetapush.common.messages.trigger.TriggerListener","fields":[{"type":"String","name":"deploymentId","description":"DeploymentId of the target service.","required":true},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the target verb when called. The format is the format accepted by the target."},{"type":"TriggerId","name":"trigger","description":"Trigger info","required":true},{"type":"String","name":"verb","description":"Verb to be called within the target service.","required":true}],"anyField":false},"TriggerId":{"type":"TriggerId","javaClass":"com.zetapush.common.messages.trigger.TriggerId","fields":[{"type":"String","name":"event","description":"Event name","required":true},{"type":"String","name":"name","description":"Listener name","required":true}],"anyField":false}}}},"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"Removes an API listener","method":"POST","path":"BU_ID/depId25/trigger/removeApiListener","verb":"/trigger/removeApiListener","notes":["Removes a previously registered listener for the given API verb."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"ApiTriggerId","resolved":{"types":{"ApiTriggerId":{"type":"ApiTriggerId","javaClass":"com.zetapush.common.messages.trigger.ApiTriggerId","fields":[{"type":"String","name":"deploymentId","description":"Deployment ID of the service verb to listen to.","required":true},{"type":"String","name":"name","description":"Listener name","required":true},{"type":"String","name":"verb","description":"Verb to be listened to within the target service.","required":true}],"anyField":false}}}},"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"Removes a listener","method":"POST","path":"BU_ID/depId25/trigger/removeListener","verb":"/trigger/removeListener","notes":["Removes a previously registered listener for the given event."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"TriggerId","resolved":{"types":{"TriggerId":{"type":"TriggerId","javaClass":"com.zetapush.common.messages.trigger.TriggerId","fields":[{"type":"String","name":"event","description":"Event name","required":true},{"type":"String","name":"name","description":"Listener name","required":true}],"anyField":false}}}},"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"Sets all listeners","method":"POST","path":"BU_ID/depId25/trigger/setListeners","verb":"/trigger/setListeners","notes":["Sets all listeners in one call.","Can remove all previously registered listeners if 'purge' is set to true."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"MassTriggers","resolved":{"types":{"MassTriggers":{"type":"MassTriggers","javaClass":"com.zetapush.common.messages.trigger.MassTriggers","fields":[{"type":"List[ApiTriggerListener]","name":"apiTriggers","description":"List of API trigger listeners"},{"type":"boolean","name":"purge","description":"Whether to purge all the already stored listeners before storing the given listeners"},{"type":"List[TriggerListener]","name":"triggers","description":"List of trigger listeners"}],"anyField":false},"ApiTriggerId":{"type":"ApiTriggerId","javaClass":"com.zetapush.common.messages.trigger.ApiTriggerId","fields":[{"type":"String","name":"deploymentId","description":"Deployment ID of the service verb to listen to.","required":true},{"type":"String","name":"name","description":"Listener name","required":true},{"type":"String","name":"verb","description":"Verb to be listened to within the target service.","required":true}],"anyField":false},"ApiTriggerListener":{"type":"ApiTriggerListener","javaClass":"com.zetapush.common.messages.trigger.ApiTriggerListener","fields":[{"type":"String","name":"deploymentId","description":"DeploymentId of the target service.","required":true},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the target verb when called. The format is the format accepted by the target."},{"type":"ApiTriggerId","name":"trigger","description":"Trigger info","required":true},{"type":"String","name":"verb","description":"Verb to be called within the target service.","required":true}],"anyField":false},"TriggerId":{"type":"TriggerId","javaClass":"com.zetapush.common.messages.trigger.TriggerId","fields":[{"type":"String","name":"event","description":"Event name","required":true},{"type":"String","name":"name","description":"Listener name","required":true}],"anyField":false},"TriggerListener":{"type":"TriggerListener","javaClass":"com.zetapush.common.messages.trigger.TriggerListener","fields":[{"type":"String","name":"deploymentId","description":"DeploymentId of the target service.","required":true},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the target verb when called. The format is the format accepted by the target."},{"type":"TriggerId","name":"trigger","description":"Trigger info","required":true},{"type":"String","name":"verb","description":"Verb to be called within the target service.","required":true}],"anyField":false}}}},"responseBody":{"type":"void","resolved":{"types":{}}}}]}]},{"description":{"name":"Upload: S3","description":"Upload service with S3 storage","deployableId":"zpfs_s3","options":[{"name":"upload_user_provides_filename","shortDesc":"User provides the filename","description":"boolean indicating whether the user provides the guid of the file at the end of the path. if true the last path element is considered a file name","defaultValue":"false","type":"BOOLEAN"},{"name":"s3_override_accessKey","shortDesc":"S3 access key","description":"S3 accessKey. you must also fill the secretKey in","defaultValue":"","type":"STRING"},{"name":"s3_override_secretKey","shortDesc":"S3 secret key","description":"S3 secretKey. you must also fill the accessKey in","defaultValue":"","type":"STRING"},{"name":"s3_override_bucketName","shortDesc":"Bucket name","description":"use your own existing bucket. create it beforehand","defaultValue":"","type":"STRING"},{"name":"s3_override_region","shortDesc":"S3 region","description":"use the given S3 region. make sure that it exists...","type":"STRING"},{"name":"s3_override_httpMethod","shortDesc":"HTTP method","description":"http method for uploads","defaultValue":"PUT","type":"STRING","acceptableValues":["PUT","POST"]},{"name":"upload_thumbnails","shortDesc":"Thumbnail heights","description":"comma separated list of wanted thumbnail heights","defaultValue":"","type":"STRING"}],"type":"SERVICE"},"authents":[],"services":[{"http":false,"name":"Zpfs_s3","description":"User API for file management","grantSyntax":"deploymentId:owner:normalizedPath","notes":["User API for virtual file management and http file upload","This API contains all the verbs needed to browse, upload and remove files.","Files are stored on a per-user basis: each user has his or her own whole virtual filesystem.","Uploading a file is a 3-step process : request an upload URL, upload via HTTP, notify this service of completion."],"apis":[{"channel":"/service/BU_ID/depId10/cp","description":"Copies a file","verb":"cp","action":"cp","notes":["Copies a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}]},{"channel":"/service/BU_ID/depId10/du","description":"Returns disk usage","verb":"du","action":"du","notes":["Returns an recursively aggregated number of used bytes, starting at the given path."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ZpfsRequest","resolved":{"types":{"ZpfsRequest":{"type":"ZpfsRequest","javaClass":"com.zetapush.common.messages.filestorage.ZpfsRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"ZpfsDiskUsage","resolved":{"types":{"ZpfsDiskUsage":{"type":"ZpfsDiskUsage","javaClass":"com.zetapush.common.messages.filestorage.ZpfsDiskUsage","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"long","name":"usage","description":"Disk usage in bytes"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId10/freeUploadUrl","description":"Requests an upload URL without constraints.","verb":"freeUploadUrl","action":"free_upload_url","serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileUploadRequest","resolved":{"types":{"FileUploadRequest":{"type":"FileUploadRequest","javaClass":"com.zetapush.common.messages.filestorage.FileUploadRequest","fields":[{"type":"String","name":"contentType","description":"Content type (matches the value of the HTTP content type header)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileUploadLocation","resolved":{"types":{"FileUploadLocation":{"type":"FileUploadLocation","javaClass":"com.zetapush.common.messages.filestorage.FileUploadLocation","fields":[{"type":"String","name":"guid","description":"GUID of the uploaded file"},{"type":"String","name":"httpMethod","description":"HTTP method, typically POST or PUT"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"url","description":"Upload URL for the http client"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId10/link","description":"Links a file","verb":"link","action":"link","notes":["Links a file or folder to another location.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}]},{"channel":"/service/BU_ID/depId10/ls","description":"Lists a folder content","verb":"ls","action":"ls","notes":["Returns a paginated list of the folder's content."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FolderListingRequest","resolved":{"types":{"FolderListingRequest":{"type":"FolderListingRequest","javaClass":"com.zetapush.common.messages.filestorage.FolderListingRequest","fields":[{"type":"String","name":"folder","description":"Folder path","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"FolderListing","resolved":{"types":{"FolderListing":{"type":"FolderListing","javaClass":"com.zetapush.common.messages.filestorage.FolderListing","fields":[{"type":"PageContent[ListingEntryInfo]","name":"entries","description":"Entries in the folder"},{"type":"boolean","name":"exists","description":"Whether the path exists"},{"type":"String","name":"folder","description":"Folder path"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId10/mkdir","description":"Creates a folder","verb":"mkdir","action":"mkdir","notes":["Creates a new folder.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FolderCreationRequest","resolved":{"types":{"FolderCreationRequest":{"type":"FolderCreationRequest","javaClass":"com.zetapush.common.messages.filestorage.FolderCreationRequest","fields":[{"type":"String","name":"folder","description":"Folder name","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"boolean","name":"parents","description":"Whether to create all non-existing parents. Defaults to false."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId10/mv","description":"Moves a file","verb":"mv","action":"mv","notes":["Moves a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}]},{"channel":"/service/BU_ID/depId10/newFile","description":"Notifies of upload completion","verb":"newFile","action":"newFile","notes":["The client application calls this verb to notify that it's done uploading to the cloud.","Calling that verb MAY trigger additional events such as thumbnail/metadata creation."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileUploadComplete","resolved":{"types":{"FileUploadComplete":{"type":"FileUploadComplete","javaClass":"com.zetapush.common.messages.filestorage.FileUploadComplete","fields":[{"type":"String","name":"guid","description":"File GUID","required":true},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"}],"anyField":false}}}},"responseInfo":{"type":"ListingEntryInfo","resolved":{"types":{"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId10/newUploadUrl","description":"Requests an upload URL","verb":"newUploadUrl","action":"newUploadUrl","notes":["Requests an HTTP upload URL.","The URL contains temporary credentials (typically valid for a few minutes) and is meant for immediate use."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileUploadRequest","resolved":{"types":{"FileUploadRequest":{"type":"FileUploadRequest","javaClass":"com.zetapush.common.messages.filestorage.FileUploadRequest","fields":[{"type":"String","name":"contentType","description":"Content type (matches the value of the HTTP content type header)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileUploadLocation","resolved":{"types":{"FileUploadLocation":{"type":"FileUploadLocation","javaClass":"com.zetapush.common.messages.filestorage.FileUploadLocation","fields":[{"type":"String","name":"guid","description":"GUID of the uploaded file"},{"type":"String","name":"httpMethod","description":"HTTP method, typically POST or PUT"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"url","description":"Upload URL for the http client"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."}]},{"channel":"/service/BU_ID/depId10/rm","description":"Removes a file","verb":"rm","action":"rm","notes":["Removes a file or folder (recursively)."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileRemoval","resolved":{"types":{"FileRemoval":{"type":"FileRemoval","javaClass":"com.zetapush.common.messages.filestorage.FileRemoval","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileRemoval","resolved":{"types":{"FileRemoval":{"type":"FileRemoval","javaClass":"com.zetapush.common.messages.filestorage.FileRemoval","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId10/snapshot","description":"Creates a snapshot in a new folder","verb":"snapshot","action":"snapshot","notes":["Creates a new folder and then copies the given files inside"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"SnapshotCreationRequest","resolved":{"types":{"SnapshotCreationRequest":{"type":"SnapshotCreationRequest","javaClass":"com.zetapush.common.messages.filestorage.SnapshotCreationRequest","fields":[{"type":"boolean","name":"flatten","description":"Whether to flatten source paths. Setting this to true might lead to name conflicts"},{"type":"String","name":"folder","description":"Folder name","required":true},{"type":"List[SnapshotItem]","name":"items","description":"Items to be copied"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"boolean","name":"parents","description":"Whether to create all non-existing parents. Defaults to false."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"SnapshotItem":{"type":"SnapshotItem","javaClass":"com.zetapush.common.messages.filestorage.SnapshotCreationRequest.SnapshotItem","fields":[{"type":"boolean","name":"caseInsensitive","description":"Whether to taken case into account. Defaults to false : case is important"},{"type":"List[String]","name":"excludes","description":"Patterns for files that should be excluded. Used only when path is a folder. Exclusions have precedence over inclusions"},{"type":"List[String]","name":"includes","description":"Patterns for files that should be included. Used only when path is a folder"},{"type":"String","name":"path","description":"Path of the file to be included."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId10/stat","description":"Returns information about a file","verb":"stat","action":"stat","notes":["Returns information about a single file.","The entry field will be null if the path does not exist"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileStatRequest","resolved":{"types":{"FileStatRequest":{"type":"FileStatRequest","javaClass":"com.zetapush.common.messages.filestorage.FileStatRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileStatResult","resolved":{"types":{"FileStatResult":{"type":"FileStatResult","javaClass":"com.zetapush.common.messages.filestorage.FileStatResult","fields":[{"type":"ListingEntryInfo","name":"entry","description":"File information. Null if file does not exist"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId10/updateMeta","description":"Updates a file's metadata","verb":"updateMeta","action":"free_upload_url","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileMetaUpdate","resolved":{"types":{"FileMetaUpdate":{"type":"FileMetaUpdate","javaClass":"com.zetapush.common.messages.filestorage.FileMetaUpdate","fields":[{"type":"Map[String,Object]","name":"metadata","description":"Metadata to be updated"},{"type":"Map[String,String]","name":"metadataFiles","description":"Metadata to be processed and updated. Values are translated from GUIDs to URLs by the underlying storage provider"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"ListingEntryInfo","resolved":{"types":{"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]}],"notifs":[{"type":"ThumbnailResult","resolved":{"types":{"ThumbnailResult":{"type":"ThumbnailResult","javaClass":"com.zetapush.common.messages.filestorage.ThumbnailResult","fields":[{"type":"UploadedFile","name":"baseFile","description":"The file used as base for generating thumbnails"},{"type":"List[ZetaApiError]","name":"failed","description":"Generated thumbnails"},{"type":"List[Thumbnail]","name":"thumbnails","description":"Generated thumbnails"}],"anyField":false},"Thumbnail":{"type":"Thumbnail","javaClass":"com.zetapush.common.messages.filestorage.Thumbnail","fields":[{"type":"String","name":"guid","description":"The unique identifier of the thumbnail"},{"type":"String","name":"name","description":"The name of the thumbnail"},{"type":"String","name":"size","description":"The size of the thumbnail"}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false},"ZetaApiError":{"type":"ZetaApiError","javaClass":"com.zetapush.common.messages.ZetaApiError","fields":[{"type":"String","name":"code","description":"Symbolic error code"},{"type":"Object","name":"context","description":"Developer-generated context. Each code can have a specific context format."},{"type":"String","name":"location","description":"Error location, if available"},{"type":"String","name":"message","description":"Human readable message. May vary depending on one or more of locale, input, developer code."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false}}},"channel":"thumbnail","target":"the owner of the original uploaded file","description":"Event fired when thumbnails have been generated","variableChannelName":false,"notes":["The event is fired for each uploaded file (only if thumbnail can be generated for the file like image files).","No event is fired if you haven't configured any thumbnail size to generate (upload.thumbnails property).","Event parameter contains the information about the original uploaded file and the list of generated thumbnails.","Thumbnail generation may partially fail (some thumbnails couldn't be generated). ","In this case, generated thumbnail list ('thumbnails' attribute) contains only successfully generated thumbnails","and you can still know why some thumbnails have failed ('failed' attribute)."],"resolvedType":{"typeName":"ThumbnailResult","imports":["com.zetapush.common.messages.filestorage.ThumbnailResult"]}}]}],"controllers":[]},{"description":{"name":"Upload: local","description":"Upload service with local HDFS storage","deployableId":"zpfs_hdfs","options":[{"name":"upload_user_provides_filename","shortDesc":"User provides the filename","description":"boolean indicating whether the user provides the guid of the file at the end of the path. if true the last path element is considered a file name","defaultValue":"false","type":"BOOLEAN"},{"name":"upload_thumbnails","shortDesc":"Thumbnail heights","description":"comma separated list of wanted thumbnail heights","defaultValue":"","type":"STRING"}],"type":"SERVICE"},"authents":[],"services":[{"http":false,"name":"Zpfs_hdfs","description":"User API for local file management","grantSyntax":"deploymentId:owner:normalizedPath","notes":["User API for file content manipulation","User API for virtual file management and http file upload","This API contains all the verbs needed to browse, upload and remove files.","Files are stored on a per-user basis: each user has his or her own whole virtual filesystem.","Uploading a file is a 3-step process : request an upload URL, upload via HTTP, notify this service of completion."],"apis":[{"channel":"/service/BU_ID/depId12/cp","description":"Copies a file","verb":"cp","action":"cp","notes":["Copies a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}]},{"channel":"/service/BU_ID/depId12/create","description":"Creates a new file","verb":"create","action":"create","notes":["Creates a file, writes content and closes the file as a single operation.","Calling this verb is functionnally equivalent to successively calling 'newUploadUrl', posting the content and calling 'newFile'"],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileCreationRequest","resolved":{"types":{"FileCreationRequest":{"type":"FileCreationRequest","javaClass":"com.zetapush.common.messages.filestorage.FileCreationRequest","fields":[{"type":"String","name":"contentType","description":"Content type (matches the value of the HTTP content type header)"},{"type":"Object","name":"data","description":"Contents. Can be a String (will be stored as UTF-8), a byte array","required":true},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"}],"anyField":false}}}},"responseInfo":{"type":"ListingEntryInfo","resolved":{"types":{"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"Source file not found."}]},{"channel":"/service/BU_ID/depId12/du","description":"Returns disk usage","verb":"du","action":"du","notes":["Returns an recursively aggregated number of used bytes, starting at the given path."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ZpfsRequest","resolved":{"types":{"ZpfsRequest":{"type":"ZpfsRequest","javaClass":"com.zetapush.common.messages.filestorage.ZpfsRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"ZpfsDiskUsage","resolved":{"types":{"ZpfsDiskUsage":{"type":"ZpfsDiskUsage","javaClass":"com.zetapush.common.messages.filestorage.ZpfsDiskUsage","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"long","name":"usage","description":"Disk usage in bytes"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId12/freeUploadUrl","description":"Requests an upload URL without constraints.","verb":"freeUploadUrl","action":"free_upload_url","serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileUploadRequest","resolved":{"types":{"FileUploadRequest":{"type":"FileUploadRequest","javaClass":"com.zetapush.common.messages.filestorage.FileUploadRequest","fields":[{"type":"String","name":"contentType","description":"Content type (matches the value of the HTTP content type header)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileUploadLocation","resolved":{"types":{"FileUploadLocation":{"type":"FileUploadLocation","javaClass":"com.zetapush.common.messages.filestorage.FileUploadLocation","fields":[{"type":"String","name":"guid","description":"GUID of the uploaded file"},{"type":"String","name":"httpMethod","description":"HTTP method, typically POST or PUT"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"url","description":"Upload URL for the http client"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId12/link","description":"Links a file","verb":"link","action":"link","notes":["Links a file or folder to another location.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}]},{"channel":"/service/BU_ID/depId12/ls","description":"Lists a folder content","verb":"ls","action":"ls","notes":["Returns a paginated list of the folder's content."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FolderListingRequest","resolved":{"types":{"FolderListingRequest":{"type":"FolderListingRequest","javaClass":"com.zetapush.common.messages.filestorage.FolderListingRequest","fields":[{"type":"String","name":"folder","description":"Folder path","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"FolderListing","resolved":{"types":{"FolderListing":{"type":"FolderListing","javaClass":"com.zetapush.common.messages.filestorage.FolderListing","fields":[{"type":"PageContent[ListingEntryInfo]","name":"entries","description":"Entries in the folder"},{"type":"boolean","name":"exists","description":"Whether the path exists"},{"type":"String","name":"folder","description":"Folder path"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId12/mkdir","description":"Creates a folder","verb":"mkdir","action":"mkdir","notes":["Creates a new folder.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FolderCreationRequest","resolved":{"types":{"FolderCreationRequest":{"type":"FolderCreationRequest","javaClass":"com.zetapush.common.messages.filestorage.FolderCreationRequest","fields":[{"type":"String","name":"folder","description":"Folder name","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"boolean","name":"parents","description":"Whether to create all non-existing parents. Defaults to false."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId12/mv","description":"Moves a file","verb":"mv","action":"mv","notes":["Moves a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}]},{"channel":"/service/BU_ID/depId12/newFile","description":"Notifies of upload completion","verb":"newFile","action":"newFile","notes":["The client application calls this verb to notify that it's done uploading to the cloud.","Calling that verb MAY trigger additional events such as thumbnail/metadata creation."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileUploadComplete","resolved":{"types":{"FileUploadComplete":{"type":"FileUploadComplete","javaClass":"com.zetapush.common.messages.filestorage.FileUploadComplete","fields":[{"type":"String","name":"guid","description":"File GUID","required":true},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"}],"anyField":false}}}},"responseInfo":{"type":"ListingEntryInfo","resolved":{"types":{"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId12/newUploadUrl","description":"Requests an upload URL","verb":"newUploadUrl","action":"newUploadUrl","notes":["Requests an HTTP upload URL.","The URL contains temporary credentials (typically valid for a few minutes) and is meant for immediate use."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileUploadRequest","resolved":{"types":{"FileUploadRequest":{"type":"FileUploadRequest","javaClass":"com.zetapush.common.messages.filestorage.FileUploadRequest","fields":[{"type":"String","name":"contentType","description":"Content type (matches the value of the HTTP content type header)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileUploadLocation","resolved":{"types":{"FileUploadLocation":{"type":"FileUploadLocation","javaClass":"com.zetapush.common.messages.filestorage.FileUploadLocation","fields":[{"type":"String","name":"guid","description":"GUID of the uploaded file"},{"type":"String","name":"httpMethod","description":"HTTP method, typically POST or PUT"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"url","description":"Upload URL for the http client"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."}]},{"channel":"/service/BU_ID/depId12/open","description":"Opens a file","verb":"open","action":"open","notes":["Opens a file for reading."],"serverOnly":true,"clientOnly":false,"slaveDisabled":true,"paramInfo":{"type":"ZpfsRequest","resolved":{"types":{"ZpfsRequest":{"type":"ZpfsRequest","javaClass":"com.zetapush.common.messages.filestorage.ZpfsRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"ZpfsFileHandler","resolved":{"types":{"ZpfsFileHandler":{"type":"ZpfsFileHandler","javaClass":"com.zetapush.common.messages.filestorage.ZpfsFileHandler","fields":[{"type":"Object","name":"handle","description":"Opaque file handler, for use by 'read' calls."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"Source file not found."}]},{"channel":"/service/BU_ID/depId12/readToken","description":"Requests an HTTP GET token","verb":"readToken","action":"readToken","notes":["Requests a token. This token can be used to retrieve a compressed folder via HTTP."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ZpfsRequest","resolved":{"types":{"ZpfsRequest":{"type":"ZpfsRequest","javaClass":"com.zetapush.common.messages.filestorage.ZpfsRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"ZpfsToken","resolved":{"types":{"ZpfsToken":{"type":"ZpfsToken","javaClass":"com.zetapush.common.messages.filestorage.ZpfsToken","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"token","description":"Access token for the folder"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"Source file not found."}]},{"channel":"/service/BU_ID/depId12/rm","description":"Removes a file","verb":"rm","action":"rm","notes":["Removes a file or folder (recursively)."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileRemoval","resolved":{"types":{"FileRemoval":{"type":"FileRemoval","javaClass":"com.zetapush.common.messages.filestorage.FileRemoval","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileRemoval","resolved":{"types":{"FileRemoval":{"type":"FileRemoval","javaClass":"com.zetapush.common.messages.filestorage.FileRemoval","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId12/snapshot","description":"Creates a snapshot in a new folder","verb":"snapshot","action":"snapshot","notes":["Creates a new folder and then copies the given files inside"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"SnapshotCreationRequest","resolved":{"types":{"SnapshotCreationRequest":{"type":"SnapshotCreationRequest","javaClass":"com.zetapush.common.messages.filestorage.SnapshotCreationRequest","fields":[{"type":"boolean","name":"flatten","description":"Whether to flatten source paths. Setting this to true might lead to name conflicts"},{"type":"String","name":"folder","description":"Folder name","required":true},{"type":"List[SnapshotItem]","name":"items","description":"Items to be copied"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"boolean","name":"parents","description":"Whether to create all non-existing parents. Defaults to false."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"SnapshotItem":{"type":"SnapshotItem","javaClass":"com.zetapush.common.messages.filestorage.SnapshotCreationRequest.SnapshotItem","fields":[{"type":"boolean","name":"caseInsensitive","description":"Whether to taken case into account. Defaults to false : case is important"},{"type":"List[String]","name":"excludes","description":"Patterns for files that should be excluded. Used only when path is a folder. Exclusions have precedence over inclusions"},{"type":"List[String]","name":"includes","description":"Patterns for files that should be included. Used only when path is a folder"},{"type":"String","name":"path","description":"Path of the file to be included."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId12/stat","description":"Returns information about a file","verb":"stat","action":"stat","notes":["Returns information about a single file.","The entry field will be null if the path does not exist"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileStatRequest","resolved":{"types":{"FileStatRequest":{"type":"FileStatRequest","javaClass":"com.zetapush.common.messages.filestorage.FileStatRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileStatResult","resolved":{"types":{"FileStatResult":{"type":"FileStatResult","javaClass":"com.zetapush.common.messages.filestorage.FileStatResult","fields":[{"type":"ListingEntryInfo","name":"entry","description":"File information. Null if file does not exist"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId12/updateMeta","description":"Updates a file's metadata","verb":"updateMeta","action":"free_upload_url","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileMetaUpdate","resolved":{"types":{"FileMetaUpdate":{"type":"FileMetaUpdate","javaClass":"com.zetapush.common.messages.filestorage.FileMetaUpdate","fields":[{"type":"Map[String,Object]","name":"metadata","description":"Metadata to be updated"},{"type":"Map[String,String]","name":"metadataFiles","description":"Metadata to be processed and updated. Values are translated from GUIDs to URLs by the underlying storage provider"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"ListingEntryInfo","resolved":{"types":{"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]}],"notifs":[{"type":"ThumbnailResult","resolved":{"types":{"ThumbnailResult":{"type":"ThumbnailResult","javaClass":"com.zetapush.common.messages.filestorage.ThumbnailResult","fields":[{"type":"UploadedFile","name":"baseFile","description":"The file used as base for generating thumbnails"},{"type":"List[ZetaApiError]","name":"failed","description":"Generated thumbnails"},{"type":"List[Thumbnail]","name":"thumbnails","description":"Generated thumbnails"}],"anyField":false},"Thumbnail":{"type":"Thumbnail","javaClass":"com.zetapush.common.messages.filestorage.Thumbnail","fields":[{"type":"String","name":"guid","description":"The unique identifier of the thumbnail"},{"type":"String","name":"name","description":"The name of the thumbnail"},{"type":"String","name":"size","description":"The size of the thumbnail"}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false},"ZetaApiError":{"type":"ZetaApiError","javaClass":"com.zetapush.common.messages.ZetaApiError","fields":[{"type":"String","name":"code","description":"Symbolic error code"},{"type":"Object","name":"context","description":"Developer-generated context. Each code can have a specific context format."},{"type":"String","name":"location","description":"Error location, if available"},{"type":"String","name":"message","description":"Human readable message. May vary depending on one or more of locale, input, developer code."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false}}},"channel":"thumbnail","target":"the owner of the original uploaded file","description":"Event fired when thumbnails have been generated","variableChannelName":false,"notes":["The event is fired for each uploaded file (only if thumbnail can be generated for the file like image files).","No event is fired if you haven't configured any thumbnail size to generate (upload.thumbnails property).","Event parameter contains the information about the original uploaded file and the list of generated thumbnails.","Thumbnail generation may partially fail (some thumbnails couldn't be generated). ","In this case, generated thumbnail list ('thumbnails' attribute) contains only successfully generated thumbnails","and you can still know why some thumbnails have failed ('failed' attribute)."],"resolvedType":{"typeName":"ThumbnailResult","imports":["com.zetapush.common.messages.filestorage.ThumbnailResult"]}}]}],"controllers":[{"description":"User HTTP api for files","notes":["User API for file upload and download."],"apis":[{"shortDesc":"GETs a zip file","method":"GET","path":"BU_ID/depId12/zip/{guid}","verb":"/zip/{guid}","notes":["Downloads the given folder as a zip file."],"audience":"PUBLIC","pathVariables":[{"name":"guid","type":"String","desc":"no description"}],"requestParams":[],"scriptable":false,"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"For CORS","method":"OPTIONS","path":"BU_ID/depId12/zip/{guid}","verb":"/zip/{guid}","notes":["Called automatically by a browser when needed."],"audience":"PUBLIC","pathVariables":[{"name":"guid","type":"String","desc":"no description"}],"requestParams":[],"scriptable":false,"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"GETs a file","method":"GET","path":"BU_ID/depId12/{guid}","verb":"/{guid}","notes":["Downloads the given file.","Supports byte ranges.","To force a browser download, pass 'download=true' in the query string.","To override the download name, pass 'name=myNewName' in the query string."],"audience":"PUBLIC","pathVariables":[{"name":"guid","type":"String","desc":"no description"}],"requestParams":[{"name":"download","defaultValue":"false","desc":"no description","required":true},{"name":"name","defaultValue":"","desc":"no description","required":true}],"scriptable":false,"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"Like GET, without content","method":"HEAD","path":"BU_ID/depId12/{guid}","verb":"/{guid}","notes":[],"audience":"PUBLIC","pathVariables":[{"name":"guid","type":"String","desc":"no description"}],"requestParams":[],"scriptable":false,"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"For CORS","method":"OPTIONS","path":"BU_ID/depId12/{guid}","verb":"/{guid}","notes":["Called automatically by a browser when needed."],"audience":"PUBLIC","pathVariables":[{"name":"guid","type":"String","desc":"no description"}],"requestParams":[],"scriptable":false,"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"Uploads a file","method":"POST","path":"BU_ID/depId12/{token}","verb":"/{token}","notes":["Uploads a new file through POST."," The body MUST be the raw contents of the file.","The Content-Type header SHOULD be set correctly, as it will be used for later downloads of this file."],"audience":"PUBLIC","pathVariables":[{"name":"token","type":"String","desc":"no description"}],"requestParams":[],"scriptable":false,"responseBody":{"type":"void","resolved":{"types":{}}}}]}]},{"description":{"name":"Upload: pseudo-S3","description":"Upload service with pseudo-S3compatible storage","deployableId":"zpfs_s3compat","options":[{"name":"upload_user_provides_filename","shortDesc":"User provides the filename","description":"boolean indicating whether the user provides the guid of the file at the end of the path. if true the last path element is considered a file name","defaultValue":"false","type":"BOOLEAN"},{"name":"s3_override_accessKey","shortDesc":"S3 access key","description":"S3 accessKey. you must also fill the secretKey in","defaultValue":"","type":"STRING"},{"name":"s3_override_secretKey","shortDesc":"S3 secret key","description":"S3 secretKey. you must also fill the accessKey in","defaultValue":"","type":"STRING"},{"name":"s3_override_endPoint","shortDesc":"Endpoint URL","description":"non-S3 endpoint URL","type":"STRING"},{"name":"s3_override_bucketName","shortDesc":"Bucket name","description":"use your own existing bucket. create it beforehand","defaultValue":"","type":"STRING"},{"name":"s3_override_region","shortDesc":"S3 region","description":"use the given S3 region. make sure that it exists...","defaultValue":"","type":"STRING"},{"name":"s3_override_httpMethod","shortDesc":"HTTP method","description":"http method for client uploads","defaultValue":"PUT","type":"STRING","acceptableValues":["PUT","POST"]},{"name":"upload_thumbnails","shortDesc":"Thumbnail heights","description":"comma separated list of wanted thumbnail heights","defaultValue":"","type":"STRING"},{"name":"upload_corsProxy","shortDesc":"CORS proxy","description":"URL of a cors proxy to work around S3 implementations that miss CORS functionality. the url MUST contain the '{0}' placeholder and look like http://myproxyserver/somepath?url={0}","defaultValue":"","type":"STRING"}],"type":"SERVICE"},"authents":[],"services":[{"http":false,"name":"Zpfs_s3compat","description":"User API for file management","grantSyntax":"deploymentId:owner:normalizedPath","notes":["User API for virtual file management and http file upload","This API contains all the verbs needed to browse, upload and remove files.","Files are stored on a per-user basis: each user has his or her own whole virtual filesystem.","Uploading a file is a 3-step process : request an upload URL, upload via HTTP, notify this service of completion."],"apis":[{"channel":"/service/BU_ID/depId11/cp","description":"Copies a file","verb":"cp","action":"cp","notes":["Copies a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}]},{"channel":"/service/BU_ID/depId11/du","description":"Returns disk usage","verb":"du","action":"du","notes":["Returns an recursively aggregated number of used bytes, starting at the given path."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ZpfsRequest","resolved":{"types":{"ZpfsRequest":{"type":"ZpfsRequest","javaClass":"com.zetapush.common.messages.filestorage.ZpfsRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"ZpfsDiskUsage","resolved":{"types":{"ZpfsDiskUsage":{"type":"ZpfsDiskUsage","javaClass":"com.zetapush.common.messages.filestorage.ZpfsDiskUsage","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"long","name":"usage","description":"Disk usage in bytes"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId11/freeUploadUrl","description":"Requests an upload URL without constraints.","verb":"freeUploadUrl","action":"free_upload_url","serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileUploadRequest","resolved":{"types":{"FileUploadRequest":{"type":"FileUploadRequest","javaClass":"com.zetapush.common.messages.filestorage.FileUploadRequest","fields":[{"type":"String","name":"contentType","description":"Content type (matches the value of the HTTP content type header)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileUploadLocation","resolved":{"types":{"FileUploadLocation":{"type":"FileUploadLocation","javaClass":"com.zetapush.common.messages.filestorage.FileUploadLocation","fields":[{"type":"String","name":"guid","description":"GUID of the uploaded file"},{"type":"String","name":"httpMethod","description":"HTTP method, typically POST or PUT"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"url","description":"Upload URL for the http client"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId11/link","description":"Links a file","verb":"link","action":"link","notes":["Links a file or folder to another location.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}]},{"channel":"/service/BU_ID/depId11/ls","description":"Lists a folder content","verb":"ls","action":"ls","notes":["Returns a paginated list of the folder's content."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FolderListingRequest","resolved":{"types":{"FolderListingRequest":{"type":"FolderListingRequest","javaClass":"com.zetapush.common.messages.filestorage.FolderListingRequest","fields":[{"type":"String","name":"folder","description":"Folder path","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"FolderListing","resolved":{"types":{"FolderListing":{"type":"FolderListing","javaClass":"com.zetapush.common.messages.filestorage.FolderListing","fields":[{"type":"PageContent[ListingEntryInfo]","name":"entries","description":"Entries in the folder"},{"type":"boolean","name":"exists","description":"Whether the path exists"},{"type":"String","name":"folder","description":"Folder path"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId11/mkdir","description":"Creates a folder","verb":"mkdir","action":"mkdir","notes":["Creates a new folder.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FolderCreationRequest","resolved":{"types":{"FolderCreationRequest":{"type":"FolderCreationRequest","javaClass":"com.zetapush.common.messages.filestorage.FolderCreationRequest","fields":[{"type":"String","name":"folder","description":"Folder name","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"boolean","name":"parents","description":"Whether to create all non-existing parents. Defaults to false."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId11/mv","description":"Moves a file","verb":"mv","action":"mv","notes":["Moves a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}]},{"channel":"/service/BU_ID/depId11/newFile","description":"Notifies of upload completion","verb":"newFile","action":"newFile","notes":["The client application calls this verb to notify that it's done uploading to the cloud.","Calling that verb MAY trigger additional events such as thumbnail/metadata creation."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileUploadComplete","resolved":{"types":{"FileUploadComplete":{"type":"FileUploadComplete","javaClass":"com.zetapush.common.messages.filestorage.FileUploadComplete","fields":[{"type":"String","name":"guid","description":"File GUID","required":true},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"}],"anyField":false}}}},"responseInfo":{"type":"ListingEntryInfo","resolved":{"types":{"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId11/newUploadUrl","description":"Requests an upload URL","verb":"newUploadUrl","action":"newUploadUrl","notes":["Requests an HTTP upload URL.","The URL contains temporary credentials (typically valid for a few minutes) and is meant for immediate use."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileUploadRequest","resolved":{"types":{"FileUploadRequest":{"type":"FileUploadRequest","javaClass":"com.zetapush.common.messages.filestorage.FileUploadRequest","fields":[{"type":"String","name":"contentType","description":"Content type (matches the value of the HTTP content type header)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileUploadLocation","resolved":{"types":{"FileUploadLocation":{"type":"FileUploadLocation","javaClass":"com.zetapush.common.messages.filestorage.FileUploadLocation","fields":[{"type":"String","name":"guid","description":"GUID of the uploaded file"},{"type":"String","name":"httpMethod","description":"HTTP method, typically POST or PUT"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"url","description":"Upload URL for the http client"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."}]},{"channel":"/service/BU_ID/depId11/rm","description":"Removes a file","verb":"rm","action":"rm","notes":["Removes a file or folder (recursively)."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileRemoval","resolved":{"types":{"FileRemoval":{"type":"FileRemoval","javaClass":"com.zetapush.common.messages.filestorage.FileRemoval","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileRemoval","resolved":{"types":{"FileRemoval":{"type":"FileRemoval","javaClass":"com.zetapush.common.messages.filestorage.FileRemoval","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId11/snapshot","description":"Creates a snapshot in a new folder","verb":"snapshot","action":"snapshot","notes":["Creates a new folder and then copies the given files inside"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"SnapshotCreationRequest","resolved":{"types":{"SnapshotCreationRequest":{"type":"SnapshotCreationRequest","javaClass":"com.zetapush.common.messages.filestorage.SnapshotCreationRequest","fields":[{"type":"boolean","name":"flatten","description":"Whether to flatten source paths. Setting this to true might lead to name conflicts"},{"type":"String","name":"folder","description":"Folder name","required":true},{"type":"List[SnapshotItem]","name":"items","description":"Items to be copied"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"boolean","name":"parents","description":"Whether to create all non-existing parents. Defaults to false."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"SnapshotItem":{"type":"SnapshotItem","javaClass":"com.zetapush.common.messages.filestorage.SnapshotCreationRequest.SnapshotItem","fields":[{"type":"boolean","name":"caseInsensitive","description":"Whether to taken case into account. Defaults to false : case is important"},{"type":"List[String]","name":"excludes","description":"Patterns for files that should be excluded. Used only when path is a folder. Exclusions have precedence over inclusions"},{"type":"List[String]","name":"includes","description":"Patterns for files that should be included. Used only when path is a folder"},{"type":"String","name":"path","description":"Path of the file to be included."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId11/stat","description":"Returns information about a file","verb":"stat","action":"stat","notes":["Returns information about a single file.","The entry field will be null if the path does not exist"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileStatRequest","resolved":{"types":{"FileStatRequest":{"type":"FileStatRequest","javaClass":"com.zetapush.common.messages.filestorage.FileStatRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileStatResult","resolved":{"types":{"FileStatResult":{"type":"FileStatResult","javaClass":"com.zetapush.common.messages.filestorage.FileStatResult","fields":[{"type":"ListingEntryInfo","name":"entry","description":"File information. Null if file does not exist"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId11/updateMeta","description":"Updates a file's metadata","verb":"updateMeta","action":"free_upload_url","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileMetaUpdate","resolved":{"types":{"FileMetaUpdate":{"type":"FileMetaUpdate","javaClass":"com.zetapush.common.messages.filestorage.FileMetaUpdate","fields":[{"type":"Map[String,Object]","name":"metadata","description":"Metadata to be updated"},{"type":"Map[String,String]","name":"metadataFiles","description":"Metadata to be processed and updated. Values are translated from GUIDs to URLs by the underlying storage provider"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"ListingEntryInfo","resolved":{"types":{"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]}],"notifs":[{"type":"ThumbnailResult","resolved":{"types":{"ThumbnailResult":{"type":"ThumbnailResult","javaClass":"com.zetapush.common.messages.filestorage.ThumbnailResult","fields":[{"type":"UploadedFile","name":"baseFile","description":"The file used as base for generating thumbnails"},{"type":"List[ZetaApiError]","name":"failed","description":"Generated thumbnails"},{"type":"List[Thumbnail]","name":"thumbnails","description":"Generated thumbnails"}],"anyField":false},"Thumbnail":{"type":"Thumbnail","javaClass":"com.zetapush.common.messages.filestorage.Thumbnail","fields":[{"type":"String","name":"guid","description":"The unique identifier of the thumbnail"},{"type":"String","name":"name","description":"The name of the thumbnail"},{"type":"String","name":"size","description":"The size of the thumbnail"}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false},"ZetaApiError":{"type":"ZetaApiError","javaClass":"com.zetapush.common.messages.ZetaApiError","fields":[{"type":"String","name":"code","description":"Symbolic error code"},{"type":"Object","name":"context","description":"Developer-generated context. Each code can have a specific context format."},{"type":"String","name":"location","description":"Error location, if available"},{"type":"String","name":"message","description":"Human readable message. May vary depending on one or more of locale, input, developer code."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false}}},"channel":"thumbnail","target":"the owner of the original uploaded file","description":"Event fired when thumbnails have been generated","variableChannelName":false,"notes":["The event is fired for each uploaded file (only if thumbnail can be generated for the file like image files).","No event is fired if you haven't configured any thumbnail size to generate (upload.thumbnails property).","Event parameter contains the information about the original uploaded file and the list of generated thumbnails.","Thumbnail generation may partially fail (some thumbnails couldn't be generated). ","In this case, generated thumbnail list ('thumbnails' attribute) contains only successfully generated thumbnails","and you can still know why some thumbnails have failed ('failed' attribute)."],"resolvedType":{"typeName":"ThumbnailResult","imports":["com.zetapush.common.messages.filestorage.ThumbnailResult"]}}]}],"controllers":[]},{"description":{"name":"User directory service","description":"User directory service","deployableId":"userdir","type":"SERVICE"},"authents":[],"services":[{"http":true,"name":"Userdir","description":"User API for user information","grantSyntax":"","notes":[],"apis":[{"channel":"/service/BU_ID/depId16/search","description":"Searches for users matching the request","verb":"search","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"UserSearchRequest","resolved":{"types":{"UserSearchRequest":{"type":"UserSearchRequest","javaClass":"com.zetapush.common.messages.directory.UserSearchRequest","fields":[{"type":"Map[String,Object]","name":"filter","description":"ElasticSearch filter"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"Map[String,Object]","name":"query","description":"Elasticsearch query","required":true},{"type":"String","name":"requestId","description":"Optional request ID"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"UserSearchResponse","resolved":{"types":{"UserSearchResponse":{"type":"UserSearchResponse","javaClass":"com.zetapush.common.messages.directory.UserSearchResponse","fields":[{"type":"Pagination","name":"page","description":"Requested pagination"},{"type":"String","name":"requestId","description":"Request ID, as given by the user"},{"type":"long","name":"totalHits","description":"Total number of users matching the query"},{"type":"Map[String,Map[String,Object]]","name":"users","description":"Maps user keys to maps of their public data. Note that user data maps may have different formats for different authentication providers"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId16/userInfo","description":"Requests public data for the specified users","verb":"userInfo","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"UserInfoRequest","resolved":{"types":{"UserInfoRequest":{"type":"UserInfoRequest","javaClass":"com.zetapush.common.messages.directory.UserInfoRequest","fields":[{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"userKeys","description":"Set of user keys","required":true}],"anyField":false}}}},"responseInfo":{"type":"UserInfoResponse","resolved":{"types":{"UserInfoResponse":{"type":"UserInfoResponse","javaClass":"com.zetapush.common.messages.directory.UserInfoResponse","fields":[{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Map[String,Map[String,Object]]","name":"users","description":"Maps user keys to maps of their public data. Note that user data maps may have different formats for different authentication providers"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]}],"notifs":[]}],"controllers":[{"description":"Administrative API for elasticsearch index management. One type ('users') is defined. You can provide mappings for it.","notes":[],"apis":[{"shortDesc":"Configures the mappings","method":"POST","path":"BU_ID/depId16/config/setMapping","verb":"/config/setMapping","notes":["Configures the global user account search index with the given mappings and settings.","The settings fields only supports a sub-set of ES settings : analysis"],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"UserSearchConfig","resolved":{"types":{"UserSearchConfig":{"type":"UserSearchConfig","javaClass":"com.zetapush.common.messages.directory.UserSearchConfig","fields":[{"type":"Map[String,Object]","name":"settings","description":"ElasticSearch index settings."},{"type":"Map[String,Object]","name":"usersMapping","description":"ES mappings for the 'users' type"}],"anyField":false}}}},"responseBody":{"type":"UserSearchConfig","resolved":{"types":{"UserSearchConfig":{"type":"UserSearchConfig","javaClass":"com.zetapush.common.messages.directory.UserSearchConfig","fields":[{"type":"Map[String,Object]","name":"settings","description":"ElasticSearch index settings."},{"type":"Map[String,Object]","name":"usersMapping","description":"ES mappings for the 'users' type"}],"anyField":false}}}}}]}]},{"description":{"name":"Workflow","description":"Workflow","deployableId":"workflow","type":"SERVICE"},"authents":[],"services":[{"http":false,"name":"WorkflowService","description":"Simple workflow service : workflow usage API","grantSyntax":"deploymentId:owner:workflow:state","notes":["Instantiate workflows.","Transition requests trigger the registered code for the target state."],"apis":[{"channel":"/service/BU_ID/depId26/create","description":"Creates a new workflow.","verb":"create","action":"create","notes":[],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"WorkflowCreationRequest","resolved":{"types":{"WorkflowCreationRequest":{"type":"WorkflowCreationRequest","javaClass":"com.zetapush.common.messages.workflow.WorkflowCreationRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"templateName","description":"Template on which this workflow is based.","required":true},{"type":"Object","name":"userData","description":"User data. Put your domain-specific data here. It can be a complex object or a simple reference to something that you store somewhere else."}],"anyField":false}}}},"responseInfo":{"type":"WorkflowInfo","resolved":{"types":{"WorkflowInfo":{"type":"WorkflowInfo","javaClass":"com.zetapush.common.messages.workflow.WorkflowInfo","fields":[{"type":"long","name":"creation","description":"Creation timestamp of this workflow."},{"type":"String","name":"firstState","description":"First state of this workflow."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"state","description":"Current state of this workflow."},{"type":"WorkflowTemplate","name":"template","description":"Template on which this workflow is based."},{"type":"Object","name":"userData","description":"User data for this workflow."},{"type":"String","name":"workflow","description":"Workflow ID, as returned by 'create'","required":true}],"anyField":false},"WorkflowStateDefinition":{"type":"WorkflowStateDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowStateDefinition","fields":[{"type":"String","name":"stateId","description":"ID of the state","required":true},{"type":"String","name":"stateName","description":"State name"}],"anyField":false},"WorkflowTemplate":{"type":"WorkflowTemplate","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplate","fields":[{"type":"List[WorkflowStateDefinition]","name":"states","description":"All the possible states of this workflow","required":true},{"type":"String","name":"templateName","description":"Unique template name","required":true},{"type":"List[WorkflowTransitionDefinition]","name":"transitions","description":"All the transitions of this workflow"}],"anyField":false},"WorkflowTransitionDefinition":{"type":"WorkflowTransitionDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionDefinition","fields":[{"type":"String","name":"from","description":"Starting state","required":true},{"type":"String","name":"to","description":"Destination state","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId26/forceTransition","description":"Forces a transition","verb":"forceTransition","action":"forceTransition","notes":["The state is forcefully changed to the given state","Theoretically forbidden transitions are authorized.","Otherwise, this verb behaves as 'transition'"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"WorkflowTransitionRequest","resolved":{"types":{"WorkflowTransitionRequest":{"type":"WorkflowTransitionRequest","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"to","description":"Destination state","required":true},{"type":"Object","name":"userData","description":"User data. When not null, used to update the user-data field of the workflow instance"},{"type":"String","name":"workflow","description":"Workflow ID, as returned by 'create'","required":true}],"anyField":false}}}},"responseInfo":{"type":"WorkflowTransitionRequest","resolved":{"types":{"WorkflowTransitionRequest":{"type":"WorkflowTransitionRequest","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"to","description":"Destination state","required":true},{"type":"Object","name":"userData","description":"User data. When not null, used to update the user-data field of the workflow instance"},{"type":"String","name":"workflow","description":"Workflow ID, as returned by 'create'","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"TRANSITION_FAILED","desc":"When the transition fails."}]},{"channel":"/service/BU_ID/depId26/list","description":"Lists this user's workflows.","verb":"list","action":"list","notes":[],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"WorkflowList","resolved":{"types":{"WorkflowList":{"type":"WorkflowList","javaClass":"com.zetapush.common.messages.workflow.WorkflowList","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"PageContent[WorkflowInfo]","resolved":{"types":{"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"WorkflowInfo":{"type":"WorkflowInfo","javaClass":"com.zetapush.common.messages.workflow.WorkflowInfo","fields":[{"type":"long","name":"creation","description":"Creation timestamp of this workflow."},{"type":"String","name":"firstState","description":"First state of this workflow."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"state","description":"Current state of this workflow."},{"type":"WorkflowTemplate","name":"template","description":"Template on which this workflow is based."},{"type":"Object","name":"userData","description":"User data for this workflow."},{"type":"String","name":"workflow","description":"Workflow ID, as returned by 'create'","required":true}],"anyField":false},"WorkflowStateDefinition":{"type":"WorkflowStateDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowStateDefinition","fields":[{"type":"String","name":"stateId","description":"ID of the state","required":true},{"type":"String","name":"stateName","description":"State name"}],"anyField":false},"WorkflowTemplate":{"type":"WorkflowTemplate","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplate","fields":[{"type":"List[WorkflowStateDefinition]","name":"states","description":"All the possible states of this workflow","required":true},{"type":"String","name":"templateName","description":"Unique template name","required":true},{"type":"List[WorkflowTransitionDefinition]","name":"transitions","description":"All the transitions of this workflow"}],"anyField":false},"WorkflowTransitionDefinition":{"type":"WorkflowTransitionDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionDefinition","fields":[{"type":"String","name":"from","description":"Starting state","required":true},{"type":"String","name":"to","description":"Destination state","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId26/transition","description":"Transitions this workflow to another state.","verb":"transition","action":"transition","notes":["The wanted transition must be one of the allowed transitions of the workflow.","If the call is a macro, it has the possibility to prevent the transition by returning {'transition':'failed', 'message':'optional error message'}.","The transition is synchronous if and only if it triggers a macro (use the @Workflow ZMS annotation).","The data passed to the macro has the type 'WorkflowTransitionInfo'"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"WorkflowTransitionRequest","resolved":{"types":{"WorkflowTransitionRequest":{"type":"WorkflowTransitionRequest","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"to","description":"Destination state","required":true},{"type":"Object","name":"userData","description":"User data. When not null, used to update the user-data field of the workflow instance"},{"type":"String","name":"workflow","description":"Workflow ID, as returned by 'create'","required":true}],"anyField":false}}}},"responseInfo":{"type":"WorkflowTransitionRequest","resolved":{"types":{"WorkflowTransitionRequest":{"type":"WorkflowTransitionRequest","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"to","description":"Destination state","required":true},{"type":"Object","name":"userData","description":"User data. When not null, used to update the user-data field of the workflow instance"},{"type":"String","name":"workflow","description":"Workflow ID, as returned by 'create'","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TRANSITION_FAILED","desc":"When the transition fails."}],"relatedTypes":{"types":{"WorkflowTransitionInfo":{"type":"WorkflowTransitionInfo","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionInfo","fields":[{"type":"long","name":"creation","description":"Creation timestamp of this workflow."},{"type":"String","name":"firstState","description":"First state of this workflow."},{"type":"String","name":"newState","description":"New state ID when the transition is complete."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"state","description":"Current state of this workflow."},{"type":"WorkflowTemplate","name":"template","description":"Template on which this workflow is based."},{"type":"Object","name":"userData","description":"User data for this workflow."},{"type":"String","name":"workflow","description":"Workflow ID, as returned by 'create'","required":true}],"anyField":false}}}}],"notifs":[]},{"http":false,"name":"WorkflowDefinitionService","description":"Simple workflow service : workflow definition API","grantSyntax":"","notes":["Manage workflow templates.","Consider using the @Workflow annotation to ease configuration."],"apis":[{"channel":"/service/BU_ID/depId26/createTemplate","description":"Creates a template","verb":"createTemplate","notes":["Creates a new workflow template.","This new template will be available for instantiation by 'create'."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"WorkflowTemplateCreation","resolved":{"types":{"WorkflowTemplateCreation":{"type":"WorkflowTemplateCreation","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplateCreation","fields":[{"type":"List[FullWorkflowStateDefinition]","name":"states","description":"All the possible states of this workflow","required":true},{"type":"String","name":"templateName","description":"Unique template name","required":true},{"type":"List[WorkflowTransitionDefinition]","name":"transitions","description":"All the transitions of this workflow"}],"anyField":false},"FullWorkflowStateDefinition":{"type":"FullWorkflowStateDefinition","javaClass":"com.zetapush.common.messages.workflow.FullWorkflowStateDefinition","fields":[{"type":"ServiceVerbCall","name":"call","description":"Called on the workflow when this state is about to be reached. If the call is a macro, it has the possibility to prevent the transition by returning {'transition':'failed', 'message':'optional error message'}."},{"type":"String","name":"stateId","description":"ID of the state","required":true},{"type":"String","name":"stateName","description":"State name"}],"anyField":false},"ServiceVerbCall":{"type":"ServiceVerbCall","javaClass":"com.zetapush.common.messages.ServiceVerbCall","fields":[{"type":"String","name":"deploymentId","description":"DeploymentId of the target service.","required":true},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the target verb when called. The format is the format accepted by the target."},{"type":"String","name":"verb","description":"Verb to be called within the target service.","required":true}],"anyField":false},"WorkflowTransitionDefinition":{"type":"WorkflowTransitionDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionDefinition","fields":[{"type":"String","name":"from","description":"Starting state","required":true},{"type":"String","name":"to","description":"Destination state","required":true}],"anyField":false}}}},"responseInfo":{"type":"WorkflowTemplate","resolved":{"types":{"WorkflowTemplate":{"type":"WorkflowTemplate","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplate","fields":[{"type":"List[WorkflowStateDefinition]","name":"states","description":"All the possible states of this workflow","required":true},{"type":"String","name":"templateName","description":"Unique template name","required":true},{"type":"List[WorkflowTransitionDefinition]","name":"transitions","description":"All the transitions of this workflow"}],"anyField":false},"WorkflowStateDefinition":{"type":"WorkflowStateDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowStateDefinition","fields":[{"type":"String","name":"stateId","description":"ID of the state","required":true},{"type":"String","name":"stateName","description":"State name"}],"anyField":false},"WorkflowTransitionDefinition":{"type":"WorkflowTransitionDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionDefinition","fields":[{"type":"String","name":"from","description":"Starting state","required":true},{"type":"String","name":"to","description":"Destination state","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId26/getTemplate","description":"Fetche a template","verb":"getTemplate","notes":["Returns a existing template, by identifier."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"WorkflowTemplateInfoRequest","resolved":{"types":{"WorkflowTemplateInfoRequest":{"type":"WorkflowTemplateInfoRequest","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplateInfoRequest","fields":[{"type":"String","name":"templateName","description":"Template name, as created with 'createTemplate'"}],"anyField":false}}}},"responseInfo":{"type":"WorkflowTemplate","resolved":{"types":{"WorkflowTemplate":{"type":"WorkflowTemplate","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplate","fields":[{"type":"List[WorkflowStateDefinition]","name":"states","description":"All the possible states of this workflow","required":true},{"type":"String","name":"templateName","description":"Unique template name","required":true},{"type":"List[WorkflowTransitionDefinition]","name":"transitions","description":"All the transitions of this workflow"}],"anyField":false},"WorkflowStateDefinition":{"type":"WorkflowStateDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowStateDefinition","fields":[{"type":"String","name":"stateId","description":"ID of the state","required":true},{"type":"String","name":"stateName","description":"State name"}],"anyField":false},"WorkflowTransitionDefinition":{"type":"WorkflowTransitionDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionDefinition","fields":[{"type":"String","name":"from","description":"Starting state","required":true},{"type":"String","name":"to","description":"Destination state","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},{"channel":"/service/BU_ID/depId26/listTemplates","description":"Asks for a list of templates","verb":"listTemplates","notes":["Returns a paginated list of templates."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"WorkflowTemplateList","resolved":{"types":{"WorkflowTemplateList":{"type":"WorkflowTemplateList","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplateList","fields":[{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"WorkflowTemplateListResult","resolved":{"types":{"WorkflowTemplateListResult":{"type":"WorkflowTemplateListResult","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplateListResult","fields":[{"type":"WorkflowTemplateList","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"PageContent[WorkflowTemplate]","name":"result","description":"Result for the specified request"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"WorkflowStateDefinition":{"type":"WorkflowStateDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowStateDefinition","fields":[{"type":"String","name":"stateId","description":"ID of the state","required":true},{"type":"String","name":"stateName","description":"State name"}],"anyField":false},"WorkflowTemplate":{"type":"WorkflowTemplate","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplate","fields":[{"type":"List[WorkflowStateDefinition]","name":"states","description":"All the possible states of this workflow","required":true},{"type":"String","name":"templateName","description":"Unique template name","required":true},{"type":"List[WorkflowTransitionDefinition]","name":"transitions","description":"All the transitions of this workflow"}],"anyField":false},"WorkflowTemplateList":{"type":"WorkflowTemplateList","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplateList","fields":[{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"WorkflowTransitionDefinition":{"type":"WorkflowTransitionDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionDefinition","fields":[{"type":"String","name":"from","description":"Starting state","required":true},{"type":"String","name":"to","description":"Destination state","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]}],"notifs":[]}],"controllers":[{"description":"Administrative API for workflow management.","notes":["You can define workflow templates"],"apis":[{"shortDesc":"Creates a template","method":"POST","path":"BU_ID/depId26/workflow/createTemplate","verb":"/workflow/createTemplate","notes":["Creates a new workflow template.","This new template will be available for instantiation by 'create'."],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"WorkflowTemplateCreation","resolved":{"types":{"WorkflowTemplateCreation":{"type":"WorkflowTemplateCreation","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplateCreation","fields":[{"type":"List[FullWorkflowStateDefinition]","name":"states","description":"All the possible states of this workflow","required":true},{"type":"String","name":"templateName","description":"Unique template name","required":true},{"type":"List[WorkflowTransitionDefinition]","name":"transitions","description":"All the transitions of this workflow"}],"anyField":false},"FullWorkflowStateDefinition":{"type":"FullWorkflowStateDefinition","javaClass":"com.zetapush.common.messages.workflow.FullWorkflowStateDefinition","fields":[{"type":"ServiceVerbCall","name":"call","description":"Called on the workflow when this state is about to be reached. If the call is a macro, it has the possibility to prevent the transition by returning {'transition':'failed', 'message':'optional error message'}."},{"type":"String","name":"stateId","description":"ID of the state","required":true},{"type":"String","name":"stateName","description":"State name"}],"anyField":false},"ServiceVerbCall":{"type":"ServiceVerbCall","javaClass":"com.zetapush.common.messages.ServiceVerbCall","fields":[{"type":"String","name":"deploymentId","description":"DeploymentId of the target service.","required":true},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the target verb when called. The format is the format accepted by the target."},{"type":"String","name":"verb","description":"Verb to be called within the target service.","required":true}],"anyField":false},"WorkflowTransitionDefinition":{"type":"WorkflowTransitionDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionDefinition","fields":[{"type":"String","name":"from","description":"Starting state","required":true},{"type":"String","name":"to","description":"Destination state","required":true}],"anyField":false}}}},"responseBody":{"type":"void","resolved":{"types":{}}}},{"shortDesc":"Purges all templates","method":"POST","path":"BU_ID/depId26/workflow/purgeTemplates","verb":"/workflow/purgeTemplates","notes":["Purges all existing templates"],"audience":"DEVELOPER","pathVariables":[],"requestParams":[],"scriptable":true,"requestBody":{"type":"WorkflowTemplatePurge","resolved":{"types":{"WorkflowTemplatePurge":{"type":"WorkflowTemplatePurge","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplatePurge","fields":[],"anyField":false}}}},"responseBody":{"type":"void","resolved":{"types":{}}}}]}]}],"types":{"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"SoapFault":{"type":"SoapFault","javaClass":"com.zetapush.common.messages.httpclient.SoapFault","fields":[{"type":"List[Object]","name":"detail"},{"type":"String","name":"faultcode"},{"type":"String","name":"faultstring"}],"anyField":false},"GamePlay":{"type":"GamePlay","javaClass":"com.zetapush.common.messages.game.GamePlay","fields":[{"type":"Map[String,Object]","name":"data","description":"Game-specific data"},{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"userId","description":"User unique key"}],"anyField":false},"GameType":{"type":"GameType","javaClass":"com.zetapush.common.messages.game.GameType","fields":[{"type":"String","name":"description","description":"Game description"},{"type":"String","name":"name","description":"Game type identifier"}],"anyField":false},"HttpClientHeader":{"type":"HttpClientHeader","javaClass":"com.zetapush.common.messages.httpclient.HttpClientHeader","fields":[{"type":"String","name":"name","description":"Header name","required":true},{"type":"String","name":"value","description":"Header value"}],"anyField":false},"UserControlStatus":{"type":"UserControlStatus","javaClass":"com.zetapush.common.messages.weak.UserControlStatus","fields":[{"type":"String","name":"controller","description":"User key of the controlling user"},{"type":"boolean","name":"fullRights","description":"Whether the controlled user/device fully impersonates its controller"},{"type":"String","name":"publicToken","description":"Public token of the weak you want to control"}],"anyField":false},"Thumbnail":{"type":"Thumbnail","javaClass":"com.zetapush.common.messages.filestorage.Thumbnail","fields":[{"type":"String","name":"guid","description":"The unique identifier of the thumbnail"},{"type":"String","name":"name","description":"The name of the thumbnail"},{"type":"String","name":"size","description":"The size of the thumbnail"}],"anyField":false},"LogLevel":{"type":"LogLevel","javaClass":"com.zetapush.common.log.LogLevel","enumValues":[{"name":"DEBUG","description":"All information usually needed by developers or administrators to help diagnose problems."},{"name":"ERROR","description":"Something is wrong enough to compromise the correct processing of a request (for example a mandatory external resource, e.g. another HTTP server, is not responding)"},{"name":"TRACE","description":"Lowest level of traces. All service verbs at the TRACE level will dump all input and output. DO NOT enable TRACE unless you are prepared to go through a very high volume of logs. Enabling TRACE may degrade application performance."},{"name":"WARN","description":"Anything that can cause application misbehaviour, but that does not need human intervention."},{"name":"INFO","description":"Events meaningful for your application should go there : the creation of a user, a purchase, etc ..."}],"anyField":false},"MacroCompletionStats":{"type":"MacroCompletionStats","javaClass":"com.zetapush.common.messages.macro.MacroCompletion.MacroCompletionStats","fields":[{"type":"long","name":"cycles","description":"Total number of VM cycles"},{"type":"long","name":"elapsedMillis","description":"Elapsed server time for the execution of the macro"},{"type":"long","name":"nbCalls","description":"Total number of called verbs"},{"type":"long","name":"ram","description":"Total number of RAM bytes"}],"anyField":false},"GdaCellRequest":{"type":"GdaCellRequest","javaClass":"com.zetapush.common.messages.gda.GdaCellRequest","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"key2","description":"cell key inside the column","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"TriggerId":{"type":"TriggerId","javaClass":"com.zetapush.common.messages.trigger.TriggerId","fields":[{"type":"String","name":"event","description":"Event name","required":true},{"type":"String","name":"name","description":"Listener name","required":true}],"anyField":false},"ZpfsRequest":{"type":"ZpfsRequest","javaClass":"com.zetapush.common.messages.filestorage.ZpfsRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"MacroStep":{"type":"MacroStep","subTypeMarker":"_type","javaClass":"com.zetapush.common.messages.macro.MacroStep","subtypes":{"call":"MacroCall","macro":"MacroInfo","test":"MacroTest","log":"MacroLog","var":"MacroVariable","loop":"MacroLoop","lf":"MacroLocalFunction","exec":"MacroStatement","jump":"MacroJump"},"fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"}],"anyField":false},"CronTaskRequest":{"type":"CronTaskRequest","javaClass":"com.zetapush.common.messages.cron.CronTaskRequest","fields":[{"type":"String","name":"cronName","description":"Cron identifier. mandatory for creation or update.","required":true},{"type":"String","name":"deploymentId","description":"DeploymentId of the target service.","required":true},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the target verb when called. The format is the format accepted by the target."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Object","name":"schedule","description":"Cron-like expression (with fixed minutes and hours) or unix timestamp (as milliseconds from the epoch). Times are UTC.","required":true},{"type":"Long","name":"stop","description":"Max number of executions."},{"type":"String","name":"verb","description":"Verb to be called within the target service.","required":true}],"anyField":false},"RdbmsResultSet":{"type":"RdbmsResultSet","javaClass":"com.zetapush.str.service.rdbms.RdbmsResultSet","fields":[],"anyField":false},"Base64Format":{"type":"Base64Format","javaClass":"com.zetapush.common.base64.Base64Facade.Base64Format","enumValues":[{"name":"RFC2045","description":"missing enum desc"},{"name":"RFC4648","description":"missing enum desc"},{"name":"RFC4648_URLSAFE","description":"missing enum desc"}],"anyField":false},"WorkflowStateDefinition":{"type":"WorkflowStateDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowStateDefinition","fields":[{"type":"String","name":"stateId","description":"ID of the state","required":true},{"type":"String","name":"stateName","description":"State name"}],"anyField":false},"GameJoin":{"type":"GameJoin","javaClass":"com.zetapush.common.messages.game.GameJoin","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"role","description":"Optional role for the player. Meaning is game specific"},{"type":"String","name":"userId","description":"User unique key"},{"type":"String","name":"userName","description":"Player name inside the game"}],"anyField":false},"LogListRequest":{"type":"LogListRequest","javaClass":"com.zetapush.common.log.LogListRequest","fields":[{"type":"Pagination","name":"page"},{"type":"long","name":"start"},{"type":"long","name":"stop"}],"anyField":false},"TaskCompletion":{"type":"TaskCompletion","javaClass":"com.zetapush.common.messages.queue.TaskCompletion","fields":[{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Object","name":"result","description":"Optional result of the processing. When 'success' is false, can contain an error object (with String fields 'code' and 'message')."},{"type":"boolean","name":"success","description":"A task consumer can specify whether computation was a success or not."},{"type":"Object","name":"target","description":"Target for the response (the syntax is the same as in messaging.send). Overrides 'broadcast' when set."},{"type":"String","name":"taskId","description":"Server-assigned task identifier."}],"anyField":false},"NotificationPlatform":{"type":"NotificationPlatform","javaClass":"com.zetapush.common.messages.notifications.NotificationPlatform","enumValues":[{"name":"APNS","description":"Apple"},{"name":"APNS_VOIP_SANDBOX","description":"Apple sandbox"},{"name":"APNS_SANDBOX","description":"Apple VOIP sandbox"},{"name":"GCM","description":"Google Cloud Messaging"}],"anyField":false},"StackListeners":{"type":"StackListeners","javaClass":"com.zetapush.common.messages.stack.StackListeners","fields":[{"type":"Set[String]","name":"listeners","description":"List of userKeys (as in the value of __userKey) or fully qualified group names (the syntax is groupServiceDeploymentId:userKey:group) that will be notified of modifying stack operations"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false},"ZpfsToken":{"type":"ZpfsToken","javaClass":"com.zetapush.common.messages.filestorage.ZpfsToken","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"token","description":"Access token for the folder"}],"anyField":false},"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"MacroServiceStatus":{"type":"MacroServiceStatus","javaClass":"com.zetapush.common.messages.macro.MacroServiceStatus","fields":[{"type":"int","name":"currentNb","description":"Number of macros currently running"},{"type":"boolean","name":"debug","description":"Whether this macro service is currently in debug mode"},{"type":"int","name":"totalNb","description":"Total number of macros currently running, including nested calls"}],"anyField":false},"MacroDebugEventResume":{"type":"MacroDebugEventResume","javaClass":"com.zetapush.common.messages.macro.MacroDebugEventResume","fields":[],"anyField":false},"GroupUsers":{"type":"GroupUsers","javaClass":"com.zetapush.common.messages.remoting.GroupUsers","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[String]","name":"users","description":"User keys of the group members"}],"anyField":false},"OwnedGroupsWithDetails":{"type":"OwnedGroupsWithDetails","javaClass":"com.zetapush.common.messages.remoting.OwnedGroupsWithDetails","fields":[{"type":"PageContent[GroupUsers]","name":"groups","description":"Detailed groups owned by the user."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"Idempotence":{"type":"Idempotence","javaClass":"com.zetapush.common.messages.Idempotence","enumValues":[{"name":"IGNORE_DIFFERENT","description":"The operation will not fail if the entity already exists in a different and compatible form."},{"name":"FAIL_IF_EXISTING","description":"The operation will fail if the entity already exists"},{"name":"IGNORE_IDENTICAL","description":"The operation will not fail if the entity already exists in a similar form."}],"anyField":false},"BasicUserCreation":{"type":"BasicUserCreation","javaClass":"com.zetapush.common.messages.simple.BasicUserCreation","fields":[{"type":"Map[String,Object]","name":"additionalProperties","description":"You can pass any number of arbitrary properties in the enclosing object (there is no field actually named additionalProperties)."},{"type":"Idempotence","name":"idempotence","description":"Specify the behavior when the user already exists. The default value is IGNORE_IDENTICAL"}],"anyField":true},"FileStatRequest":{"type":"FileStatRequest","javaClass":"com.zetapush.common.messages.filestorage.FileStatRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GroupExistence":{"type":"GroupExistence","javaClass":"com.zetapush.common.messages.remoting.GroupExistence","fields":[{"type":"boolean","name":"exists","description":"Existence of the group"},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"ResetInfo":{"type":"ResetInfo","javaClass":"com.zetapush.common.messages.simple.ResetInfo","fields":[{"type":"String","name":"key","description":"account key in the realm. (configured 'unique key' used for authentication)"},{"type":"String","name":"token","description":"Server-provided temporary token to reset a password"}],"anyField":false},"AggregationPush":{"type":"AggregationPush","javaClass":"com.zetapush.common.messages.aggregation.AggregationPush","fields":[{"type":"String","name":"category","description":"Item category. Must match a defined category.","required":true},{"type":"String","name":"name","description":"Item name. Any item name, unique for the user. An item more or less matches an actual device or sensor, but it can also be for example a virtual sensor name if you are averaging temperatures from several physical sensors.","required":true},{"type":"Number","name":"value","description":"Numerical value : long for totals, floating point (double precision IEEE 754) for means","required":true}],"anyField":false},"MacroScriptParamConstraint":{"type":"MacroScriptParamConstraint","javaClass":"com.zetapush.common.messages.macro.MacroScriptParamConstraint","fields":[{"type":"Map[String,Object]","name":"config","description":"Constraint configuration"},{"type":"String","name":"name","description":"Constraint name"}],"anyField":false},"FileUploadComplete":{"type":"FileUploadComplete","javaClass":"com.zetapush.common.messages.filestorage.FileUploadComplete","fields":[{"type":"String","name":"guid","description":"File GUID","required":true},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"}],"anyField":false},"MacroDebugEvent":{"type":"MacroDebugEvent","subTypeMarker":"_t","javaClass":"com.zetapush.common.messages.macro.MacroDebugEvent","subtypes":{"p":"MacroDebugEventPause","r":"MacroDebugEventResume","t":"MacroDebugEventTermination","v":"MacroDebugEventVar"},"fields":[],"anyField":false},"TimerRequest":{"type":"TimerRequest","javaClass":"com.zetapush.common.messages.cron.TimerRequest","fields":[{"type":"int","name":"delay","description":"Delay in seconds before calling the given API. Must be a integer between 1 and 120."},{"type":"String","name":"deploymentId","description":"DeploymentId of the target service.","required":true},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the target verb when called. The format is the format accepted by the target."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"verb","description":"Verb to be called within the target service.","required":true}],"anyField":false},"OwnerResource":{"type":"OwnerResource","javaClass":"com.zetapush.common.messages.remoting.OwnerResource","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false},"TaskRequest":{"type":"TaskRequest","javaClass":"com.zetapush.common.messages.queue.TaskRequest","fields":[{"type":"String","name":"contextId","description":"STR-generated context ID. Used for traceability of client requests."},{"type":"Object","name":"data","description":"Task parameters. Specific for each consumer/producer contract"},{"type":"String","name":"description","description":"Task description"},{"type":"String","name":"originBusinessId","description":"BusinessId of the service which the task is from"},{"type":"String","name":"originDeploymentId","description":"DeploymentId of the service which the task is from"},{"type":"OwnerResource","name":"originator","description":"Request submitter"},{"type":"String","name":"owner","description":"When impersonating someone, use this field to differentiate from originator.owner"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"Email":{"type":"Email","javaClass":"com.zetapush.common.messages.sendmail.Email","fields":[{"type":"List[String]","name":"bcc","description":"Email recipients"},{"type":"List[String]","name":"cc","description":"Email recipients"},{"type":"String","name":"html","description":"Email html body. you can use text and/or html"},{"type":"String","name":"subject","description":"Email subject","required":true},{"type":"String","name":"text","description":"Email plain text body"},{"type":"List[String]","name":"to","description":"Email recipients"}],"anyField":false},"TemplateRemoval":{"type":"TemplateRemoval","javaClass":"com.zetapush.common.messages.template.TemplateRemoval","fields":[{"type":"String","name":"languageTag","description":"IETF BCP 47 language tag"},{"type":"String","name":"name","description":"template name","required":true}],"anyField":false},"WorkflowTemplateList":{"type":"WorkflowTemplateList","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplateList","fields":[{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"ZpfsFileHandler":{"type":"ZpfsFileHandler","javaClass":"com.zetapush.common.messages.filestorage.ZpfsFileHandler","fields":[{"type":"Object","name":"handle","description":"Opaque file handler, for use by 'read' calls."}],"anyField":false},"AggregationItemType":{"type":"AggregationItemType","javaClass":"com.zetapush.common.messages.aggregation.AggregationItemCategory.AggregationItemType","enumValues":[{"name":"MEAN","description":"Averages the item over the period (floating point values)."},{"name":"TOTAL","description":"Sums the item over the period (integral values only)."}],"anyField":false},"HttpClientSOAPResponse":{"type":"HttpClientSOAPResponse","javaClass":"com.zetapush.common.messages.httpclient.HttpClientSOAPResponse","fields":[{"type":"Object","name":"content","description":"received content"},{"type":"SoapFault","name":"fault"},{"type":"List[HttpClientHeader]","name":"headers","description":"received headers"},{"type":"int","name":"httpStatus","description":"response http status code"},{"type":"String","name":"requestId","description":"optional client generated call ID to identify responses"}],"anyField":false},"BasicAuthenticatedUser":{"type":"BasicAuthenticatedUser","javaClass":"com.zetapush.str.authentication.BasicAuthenticatedUser","fields":[{"type":"Map[String,Object]","name":"additionalProperties","description":"You can pass any number of arbitrary properties in the enclosing object (there is no field actually named additionalProperties). "}],"anyField":true},"SearchResultsItem":{"type":"SearchResultsItem","javaClass":"com.zetapush.common.messages.search.SearchResultsItem","fields":[{"type":"Map[String,Object]","name":"data","description":"Document data","required":true},{"type":"String","name":"id","description":"Document id","required":true},{"type":"String","name":"index","description":"Index name","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"float","name":"score","description":"Item score"},{"type":"String","name":"type","description":"Type name","required":true}],"anyField":false},"SearchResults":{"type":"SearchResults","javaClass":"com.zetapush.common.messages.search.SearchResults","fields":[{"type":"PageContent[SearchResultsItem]","name":"items","description":"List of found items"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"long","name":"totalHits","description":"Total number of documents matching the query"}],"anyField":false},"AllCredentials":{"type":"AllCredentials","javaClass":"com.zetapush.common.messages.simple.AllCredentials","fields":[{"type":"List[Map[String,Object]]","name":"credentials","description":"List of account information for the asking user. empty if the user does not have credentials in the service. One item in this list is a map of account fields."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GameStatus":{"type":"GameStatus","javaClass":"com.zetapush.common.messages.game.GameStatus","enumValues":[{"name":"RUNNING","description":"The game is running"},{"name":"FINISHED","description":"The game is finished"},{"name":"CREATED","description":"The game has been created"},{"name":"STARTING","description":"The game is starting"}],"anyField":false},"MacroLog":{"type":"MacroLog","javaClass":"com.zetapush.common.messages.macro.MacroLog","fields":[{"type":"Object","name":"data","description":"Data to be logged. The server will fail to produce an accurate result if the actual evaluated data is too big."},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"}],"anyField":false},"MacroCall":{"type":"MacroCall","javaClass":"com.zetapush.common.messages.macro.MacroCall","fields":[{"type":"String","name":"deploymentId","description":"DeploymentId of the service to be called","required":true},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"boolean","name":"noExpand","description":"Specifies whether parameter expansion should be avoided. The server will of course set this to true automatically if no refs are present. Defaults to false"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the verb. The format is the format expected by the target verb, with the following exception : any field can be replaced by a placeholder. A placeholder is an object with a '__ref' field. The value of the ref field follows java EL syntax with some pre-defined objects and functions (see the documentation on macros)"},{"type":"String","name":"resultName","description":"Name of the result, for future reference"},{"type":"String","name":"suKey","description":"Key of the impersonated user"},{"type":"String","name":"verb","description":"Verb to be called inside the specified service","required":true}],"anyField":false},"MacroServiceDebugConfig":{"type":"MacroServiceDebugConfig","javaClass":"com.zetapush.common.messages.macro.MacroServiceDebugConfig","fields":[{"type":"boolean","name":"debug","description":"Whether this macro service is currently in debug mode"}],"anyField":false},"FileMetaUpdate":{"type":"FileMetaUpdate","javaClass":"com.zetapush.common.messages.filestorage.FileMetaUpdate","fields":[{"type":"Map[String,Object]","name":"metadata","description":"Metadata to be updated"},{"type":"Map[String,String]","name":"metadataFiles","description":"Metadata to be processed and updated. Values are translated from GUIDs to URLs by the underlying storage provider"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GroupInfo":{"type":"GroupInfo","javaClass":"com.zetapush.common.messages.remoting.GroupInfo","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"ProvisioningRequest":{"type":"ProvisioningRequest","javaClass":"com.zetapush.common.messages.weak.ProvisioningRequest","fields":[{"type":"int","name":"n","description":"Number of accounts to create"}],"anyField":false},"GameOrganization":{"type":"GameOrganization","javaClass":"com.zetapush.common.messages.game.GameOrganization","fields":[{"type":"String","name":"gameId","description":"Game identifier"},{"type":"Map[String,Object]","name":"options","description":"Game creation options"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"GameType","name":"type","description":"Game type","required":true}],"anyField":false},"GdaRowRequest":{"type":"GdaRowRequest","javaClass":"com.zetapush.common.messages.gda.GdaRowRequest","fields":[{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"LocalizedTemplateCreation":{"type":"LocalizedTemplateCreation","javaClass":"com.zetapush.common.messages.template.LocalizedTemplateCreation","fields":[{"type":"String","name":"languageTag","description":"IETF BCP 47 language tag","required":true},{"type":"String","name":"name","description":"template name","required":true},{"type":"String","name":"template","description":"template contents, as a character string","required":true}],"anyField":false},"SearchRequestSortField":{"type":"SearchRequestSortField","javaClass":"com.zetapush.common.messages.search.SearchRequestSortField","fields":[{"type":"String","name":"name","description":"Field name"},{"type":"Map[String,Object]","name":"sort","description":"Field sort information. Follows elasticsearch syntax."}],"anyField":false},"UserLoginchange":{"type":"UserLoginchange","javaClass":"com.zetapush.common.messages.simple.UserLoginchange","fields":[{"type":"String","name":"newKey","description":"New account key within this realm. Must not be already in use.","required":true},{"type":"String","name":"oldKey","description":"Existing account key within this realm (login). Will be free for use upon successful completion.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false},"SearchRequest":{"type":"SearchRequest","javaClass":"com.zetapush.common.messages.search.SearchRequest","fields":[{"type":"Map[String,Object]","name":"filter","description":"ElasticSearch filter. Follows the syntax defined in the elastic search manual."},{"type":"List[String]","name":"indices","description":"List of indices to be searched.","required":true},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"Map[String,Object]","name":"query","description":"ElasticSearch query. Follows the syntax defined in the elastic search manual.","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[SearchRequestSortField]","name":"sort","description":"Sort information"},{"type":"List[String]","name":"types","description":"The document types to execute the search against. Defaults to be executed against all types."}],"anyField":false},"MacroStatement":{"type":"MacroStatement","javaClass":"com.zetapush.common.messages.macro.MacroStatement","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"String","name":"exec","description":"Statement to be executed","required":true},{"type":"int","name":"line","description":"Line number in source file"}],"anyField":false},"LogSinkType":{"type":"LogSinkType","javaClass":"com.zetapush.common.log.LogSinkType","enumValues":[{"name":"TODO","description":"missing enum desc"},{"name":"INTERNAL","description":"missing enum desc"},{"name":"REAL_TIME","description":"missing enum desc"}],"anyField":false},"MacroLoop":{"type":"MacroLoop","javaClass":"com.zetapush.common.messages.macro.MacroLoop","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"String","name":"items","description":"Collection to iterate on","required":true},{"type":"int","name":"line","description":"Line number in source file"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true},{"type":"String","name":"var","description":"Loop variable","required":true}],"anyField":false},"ChangePasswordRequest":{"type":"ChangePasswordRequest","javaClass":"com.zetapush.common.messages.simple.ChangePasswordRequest","fields":[{"type":"String","name":"key","description":"account key in the realm. (configured 'unique key' used for authentication)"},{"type":"String","name":"password","description":"New password","required":true},{"type":"String","name":"token","description":"Server-provided temporary token to reset a password"}],"anyField":false},"MacroFunctionResult":{"type":"MacroFunctionResult","javaClass":"com.zetapush.str.services.macro.MacroFunctionResult","fields":[{"type":"Object","name":"result","description":"Function evaluation result"}],"anyField":false},"MacroFunctionRequest":{"type":"MacroFunctionRequest","javaClass":"com.zetapush.str.services.macro.MacroFunctionRequest","fields":[{"type":"String","name":"name","description":"Function name","required":true},{"type":"List[Object]","name":"params","description":"Function parameter values","required":true}],"anyField":false},"DeviceCapabilities":{"type":"DeviceCapabilities","javaClass":"com.zetapush.common.messages.remoting.DeviceCapabilities","fields":[{"type":"String","name":"answeringResource","description":"Resource name of the answering device"},{"type":"String","name":"askingResource","description":"Resource name of the asking device"},{"type":"List[String]","name":"capabilities","description":"List of capabilities. Capabilities are developer-defined strings"}],"anyField":false},"UserInfoResponse":{"type":"UserInfoResponse","javaClass":"com.zetapush.common.messages.directory.UserInfoResponse","fields":[{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Map[String,Map[String,Object]]","name":"users","description":"Maps user keys to maps of their public data. Note that user data maps may have different formats for different authentication providers"}],"anyField":false},"ZetaApiError":{"type":"ZetaApiError","javaClass":"com.zetapush.common.messages.ZetaApiError","fields":[{"type":"String","name":"code","description":"Symbolic error code"},{"type":"Object","name":"context","description":"Developer-generated context. Each code can have a specific context format."},{"type":"String","name":"location","description":"Error location, if available"},{"type":"String","name":"message","description":"Human readable message. May vary depending on one or more of locale, input, developer code."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false},"Grant":{"type":"Grant","javaClass":"com.zetapush.common.messages.remoting.Grant","fields":[{"type":"String","name":"action","description":"Action which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false},"ExistingUser":{"type":"ExistingUser","javaClass":"com.zetapush.common.messages.simple.ExistingUser","fields":[{"type":"String","name":"key","description":"User key within the realm","required":true}],"anyField":false},"ProvisioningCall":{"type":"ProvisioningCall","javaClass":"com.zetapush.common.messages.queue.ProvisioningTask.ProvisioningCall","fields":[],"anyField":false},"GameJoinResponse":{"type":"GameJoinResponse","javaClass":"com.zetapush.common.messages.gameengine.GameJoinResponse","fields":[{"type":"String","name":"callerId","description":"caller ID from the original request"},{"type":"String","name":"error","description":"error message"},{"type":"String","name":"msgId","description":"unique ID for this message, matching the request ID"},{"type":"GameJoin","name":"payload","description":"response payload"}],"anyField":false},"TriggerListener":{"type":"TriggerListener","javaClass":"com.zetapush.common.messages.trigger.TriggerListener","fields":[{"type":"String","name":"deploymentId","description":"DeploymentId of the target service.","required":true},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the target verb when called. The format is the format accepted by the target."},{"type":"TriggerId","name":"trigger","description":"Trigger info","required":true},{"type":"String","name":"verb","description":"Verb to be called within the target service.","required":true}],"anyField":false},"StackItemRemove":{"type":"StackItemRemove","javaClass":"com.zetapush.common.messages.stack.StackItemRemove","fields":[{"type":"List[byte[]]","name":"guids","description":"List of keys of the items to be removed","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false},"MacroDebugEventTermination":{"type":"MacroDebugEventTermination","javaClass":"com.zetapush.common.messages.macro.MacroDebugEventTermination","fields":[],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false},"ZpfsDiskUsage":{"type":"ZpfsDiskUsage","javaClass":"com.zetapush.common.messages.filestorage.ZpfsDiskUsage","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"long","name":"usage","description":"Disk usage in bytes"}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"FolderListing":{"type":"FolderListing","javaClass":"com.zetapush.common.messages.filestorage.FolderListing","fields":[{"type":"PageContent[ListingEntryInfo]","name":"entries","description":"Entries in the folder"},{"type":"boolean","name":"exists","description":"Whether the path exists"},{"type":"String","name":"folder","description":"Folder path"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"FileStatResult":{"type":"FileStatResult","javaClass":"com.zetapush.common.messages.filestorage.FileStatResult","fields":[{"type":"ListingEntryInfo","name":"entry","description":"File information. Null if file does not exist"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"RemoteCommand":{"type":"RemoteCommand","javaClass":"com.zetapush.common.messages.remoting.RemoteCommand","fields":[{"type":"String","name":"cmd","description":"Command to be executed. This is an arbitrary identifier string whose semantics are left to the developer.","required":true},{"type":"Map[String,Object]","name":"data","description":"Optional data payload for the command. This is an arbitrary object whose semantics are left to the developer."},{"type":"String","name":"from","description":"User issuing the command"},{"type":"String","name":"fromResource","description":"Resource of the user issuing the command"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false},"HttpClientParseMode":{"type":"HttpClientParseMode","javaClass":"com.zetapush.common.messages.httpclient.HttpClientParseMode","enumValues":[{"name":"STRING","description":"Content is interpreted as a UTF8 character string"},{"name":"OBJECT","description":"Content is parsed as UTF8 JSON"},{"name":"BYTES","description":"Content is not interpreted, but available as a raw array of bytes"}],"anyField":false},"HttpClientTemplate":{"type":"HttpClientTemplate","javaClass":"com.zetapush.common.messages.httpclient.HttpClientTemplate","fields":[{"type":"Object","name":"content","description":"Request body. String (passed as is) or complex object (serialized to json)"},{"type":"List[HttpClientHeader]","name":"headers","description":"Headers to be sent"},{"type":"String","name":"method","description":"HTTP method","required":true},{"type":"String","name":"name","description":"Name of the request template (primary key)","required":true},{"type":"HttpClientParseMode","name":"parseMode","description":"How to parse the response content","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"url","description":"Remote URL. a literal string","required":true}],"anyField":false},"HttpClientRequest":{"type":"HttpClientRequest","javaClass":"com.zetapush.common.messages.httpclient.HttpClientRequest","fields":[{"type":"Object","name":"content","description":"Request body. String (passed as is) or complex object (serialized to json)"},{"type":"List[HttpClientHeader]","name":"headers","description":"Headers to be sent"},{"type":"String","name":"method","description":"HTTP method","required":true},{"type":"HttpClientParseMode","name":"parseMode","description":"How to parse the response content","required":true},{"type":"String","name":"requestId","description":"optional client generated call ID to identify responses"},{"type":"String","name":"url","description":"Remote URL. a literal string","required":true}],"anyField":false},"MacroFunctionParam":{"type":"MacroFunctionParam","javaClass":"com.zetapush.common.messages.macro.MacroFunctionParam","fields":[{"type":"String","name":"name","description":"Parameter name"}],"anyField":false},"MacroScriptParam":{"type":"MacroScriptParam","javaClass":"com.zetapush.common.messages.macro.MacroScriptParam","fields":[{"type":"List[MacroScriptParamConstraint]","name":"constraints","description":"Optional parameter constraints"},{"type":"String","name":"name","description":"Parameter name"}],"anyField":false},"MacroInfo":{"type":"MacroInfo","javaClass":"com.zetapush.common.messages.macro.MacroInfo","fields":[{"type":"boolean","name":"broadcast","description":"Whether to broadcast to all the user's sessions, or just to the asking session. Defaults to false (request-response paradigm)."},{"type":"String","name":"channel","description":"Optional return channel. Defaults to completed"},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"String","name":"name","description":"Macro name","required":true},{"type":"List[MacroScriptParam]","name":"params","description":"Optional parameter specifications"},{"type":"Map[String,Object]","name":"result","description":"Optional macro result"},{"type":"List[MacroScriptParam]","name":"returned","description":"Optional output field specifications"},{"type":"String","name":"source","description":"source file (for debug)"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true},{"type":"Object","name":"target","description":"Target for the response (the syntax is the same as in messaging.send). Overrides 'broadcast' when set."},{"type":"String","name":"userKey","description":"Setting this field effectively overrides the __userKey pseudo-constant for the duration of the macro. All non-sudoed internal calls will behave as if sudoed with the given user key. When this field is set, there is not point in calling this macro with sudo"}],"anyField":false},"SuMacroPlay":{"type":"SuMacroPlay","javaClass":"com.zetapush.common.messages.macro.SuMacroPlay","fields":[{"type":"int","name":"debug","description":"Deprecated. Use the 'livedebug' API."},{"type":"boolean","name":"hardFail","description":"True if an error should trigger a response on an error channel, or false (the default) if the error should be simply reported in an error field"},{"type":"String","name":"name","description":"Macro name","required":true},{"type":"Map[String,Object]","name":"parameters","description":"Macro named parameters"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"suKey","description":"Key of the impersonated user","required":true},{"type":"List[MacroInfo]","name":"tempMacros","description":"Temporary macros. This feature does not support concurrent calls."}],"anyField":false},"MacroDebugVariableChange":{"type":"MacroDebugVariableChange","javaClass":"com.zetapush.common.messages.macro.MacroDebugVariableChange","fields":[{"type":"Object","name":"data","description":"Variable value"},{"type":"int","name":"frame","description":"Frame index, as sent by the server by 'resume'"},{"type":"String","name":"name","description":"Variable name","required":true},{"type":"String","name":"token","description":"Debug token, previously generated by a call to the admin verb 'livedebugToken'"}],"anyField":false},"ImpersonatedTraceableRequest":{"type":"ImpersonatedTraceableRequest","javaClass":"com.zetapush.common.messages.ImpersonatedTraceableRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GameStart":{"type":"GameStart","javaClass":"com.zetapush.common.messages.game.GameStart","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"}],"anyField":false},"AggregationItemCategory":{"type":"AggregationItemCategory","javaClass":"com.zetapush.common.messages.aggregation.AggregationItemCategory","fields":[{"type":"String","name":"category","description":"Item category. Arbitrary developer-defined name.","required":true},{"type":"String","name":"deploymentId","description":"DeploymentId of the target service.","required":true},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the target verb when called. The format is the format accepted by the target."},{"type":"List[Integer]","name":"periods","description":"Item periods, in minutes. Automatic aggregation by this service ensures that these will be the minimum visible granularities. Although you can specify arbitrary values, it is recommended, for easier auto-alignment of period boundaries, to use divisors of well known values : for example 30 (half an hour) is a lot better than 29.","required":true},{"type":"AggregationItemType","name":"type","description":"Item type (aggregation behavior).","required":true},{"type":"String","name":"verb","description":"Verb to be called within the target service.","required":true}],"anyField":false},"MacroUploadReport":{"type":"MacroUploadReport","javaClass":"com.zetapush.common.messages.macro.MacroUploadReport","fields":[{"type":"List[String]","name":"functions","description":"List of successfully uploaded function names"},{"type":"List[String]","name":"macros","description":"List of successfully uploaded macro names"}],"anyField":false},"UserGroup":{"type":"UserGroup","javaClass":"com.zetapush.common.messages.remoting.UserGroup","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"user","description":"The user's key (as in __userKey)"}],"anyField":false},"MacroFunction":{"type":"MacroFunction","javaClass":"com.zetapush.common.messages.macro.MacroFunction","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"String","name":"name","description":"Function name","required":true},{"type":"List[MacroFunctionParam]","name":"parameters","description":"Function parameters"},{"type":"Object","name":"result","description":"Function result","required":true},{"type":"String","name":"source","description":"source file"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true}],"anyField":false},"MacroLocalFunction":{"type":"MacroLocalFunction","javaClass":"com.zetapush.common.messages.macro.MacroLocalFunction","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"MacroFunction","name":"f","description":"Function definition","required":true},{"type":"int","name":"line","description":"Line number in source file"},{"type":"String","name":"var","description":"Function local name","required":true}],"anyField":false},"ExistenceCheck":{"type":"ExistenceCheck","javaClass":"com.zetapush.common.messages.simple.ExistenceCheck","fields":[{"type":"String","name":"key","description":"User key within the realm","required":true},{"type":"boolean","name":"softFail","description":"Whether to fail is the user does not exist. When true, fails silently."}],"anyField":false},"GameRunnerFullLocation":{"type":"GameRunnerFullLocation","javaClass":"com.zetapush.common.messages.game.GameRunnerFullLocation","fields":[{"type":"String","name":"requestChannel","description":"Reserved for future use"},{"type":"String","name":"responseChannel","description":"Reserved for future use"},{"type":"String","name":"sessionId","description":"Session identifier of the game engine. Server-attributed"},{"type":"String","name":"setiId","description":"Seti identifier of the game engine. Server-attributed"}],"anyField":false},"ApiTriggerId":{"type":"ApiTriggerId","javaClass":"com.zetapush.common.messages.trigger.ApiTriggerId","fields":[{"type":"String","name":"deploymentId","description":"Deployment ID of the service verb to listen to.","required":true},{"type":"String","name":"name","description":"Listener name","required":true},{"type":"String","name":"verb","description":"Verb to be listened to within the target service.","required":true}],"anyField":false},"RdbmsQuery":{"type":"RdbmsQuery","javaClass":"com.zetapush.common.messages.rdbms.RdbmsQuery","fields":[{"type":"List[Object]","name":"parameters","description":"Parameters of the query"},{"type":"String","name":"statement","description":"SQL query"}],"anyField":false},"FileRemoval":{"type":"FileRemoval","javaClass":"com.zetapush.common.messages.filestorage.FileRemoval","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"EventTrigger":{"type":"EventTrigger","javaClass":"com.zetapush.common.messages.trigger.EventTrigger","fields":[{"type":"Object","name":"data","description":"Event data"},{"type":"String","name":"event","description":"Event name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false},"MacroCompletion":{"type":"MacroCompletion","javaClass":"com.zetapush.common.messages.macro.MacroCompletion","fields":[{"type":"List[ZetaApiError]","name":"errors","description":"Encountered errors. Error reporting behavior can be changed with the hardFail parameter."},{"type":"List[String]","name":"log","description":"Generated debug output, if applicable"},{"type":"String","name":"name","description":"Macro name"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Object","name":"result","description":"Generated result, if applicable"},{"type":"MacroCompletionStats","name":"stats","description":"Execution statistics, when debug is enabled"}],"anyField":false},"TemplateRequest":{"type":"TemplateRequest","javaClass":"com.zetapush.common.messages.template.TemplateRequest","fields":[{"type":"Map[String,Object]","name":"data","description":"Data model","required":true},{"type":"String","name":"languageTag","description":"Locale, as defined by IETF BCP 47"},{"type":"String","name":"name","description":"Template name, as configured by an admin","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"StackRequest":{"type":"StackRequest","javaClass":"com.zetapush.common.messages.stack.StackRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false},"WorkerAdminRequest":{"type":"WorkerAdminRequest","javaClass":"com.zetapush.common.messages.queue.admin.WorkerAdminRequest","fields":[{"type":"String","name":"deploymentId","description":"Deployment ID of the target service"},{"type":"Object","name":"parameters","description":"Parameter (request body)"},{"type":"String","name":"verb","description":"Verb name inside the service"}],"anyField":false},"UserSearchRequest":{"type":"UserSearchRequest","javaClass":"com.zetapush.common.messages.directory.UserSearchRequest","fields":[{"type":"Map[String,Object]","name":"filter","description":"ElasticSearch filter"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"Map[String,Object]","name":"query","description":"Elasticsearch query","required":true},{"type":"String","name":"requestId","description":"Optional request ID"}],"anyField":false},"WorkflowTemplatePurge":{"type":"WorkflowTemplatePurge","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplatePurge","fields":[],"anyField":false},"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"Presence":{"type":"Presence","javaClass":"com.zetapush.common.messages.presence.Presence","fields":[{"type":"GroupRelated","name":"group","description":"Group information"},{"type":"String","name":"presence","description":"Presence status. OFF or ON"},{"type":"OwnerResource","name":"user","description":"User information"}],"anyField":false},"PagedGroupPresence":{"type":"PagedGroupPresence","javaClass":"com.zetapush.common.messages.presence.PagedGroupPresence","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"PageContent[Presence]","name":"presences","description":"List of group users, with their presence information."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"OwnedGroups":{"type":"OwnedGroups","javaClass":"com.zetapush.common.messages.remoting.OwnedGroups","fields":[{"type":"PageContent[GroupInfo]","name":"groups","description":"Groups owned by the user."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"WorkflowTemplateInfoRequest":{"type":"WorkflowTemplateInfoRequest","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplateInfoRequest","fields":[{"type":"String","name":"templateName","description":"Template name, as created with 'createTemplate'"}],"anyField":false},"FileUploadRequest":{"type":"FileUploadRequest","javaClass":"com.zetapush.common.messages.filestorage.FileUploadRequest","fields":[{"type":"String","name":"contentType","description":"Content type (matches the value of the HTTP content type header)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GameOrganizationResponse":{"type":"GameOrganizationResponse","javaClass":"com.zetapush.common.messages.gameengine.GameOrganizationResponse","fields":[{"type":"String","name":"callerId","description":"caller ID from the original request"},{"type":"String","name":"error","description":"error message"},{"type":"String","name":"msgId","description":"unique ID for this message, matching the request ID"},{"type":"GameOrganization","name":"payload","description":"response payload"}],"anyField":false},"GdaCellsRequest":{"type":"GdaCellsRequest","javaClass":"com.zetapush.common.messages.gda.GdaCellsRequest","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"List[String]","name":"key2","description":"cell keys inside the column","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaCellsResult":{"type":"GdaCellsResult","javaClass":"com.zetapush.common.messages.gda.GdaCellsResult","fields":[{"type":"GdaCellsRequest","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Object","name":"result","description":"Result for the specified request"}],"anyField":false},"CheckPasswordRequest":{"type":"CheckPasswordRequest","javaClass":"com.zetapush.common.messages.simple.CheckPasswordRequest","fields":[{"type":"String","name":"key","description":"account key in the realm. (configured 'unique key' used for authentication)"},{"type":"String","name":"password","description":"Password to be checked","required":true}],"anyField":false},"GdaColumnRequest":{"type":"GdaColumnRequest","javaClass":"com.zetapush.common.messages.gda.GdaColumnRequest","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"ServiceVerbCall":{"type":"ServiceVerbCall","javaClass":"com.zetapush.common.messages.ServiceVerbCall","fields":[{"type":"String","name":"deploymentId","description":"DeploymentId of the target service.","required":true},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the target verb when called. The format is the format accepted by the target."},{"type":"String","name":"verb","description":"Verb to be called within the target service.","required":true}],"anyField":false},"FullWorkflowStateDefinition":{"type":"FullWorkflowStateDefinition","javaClass":"com.zetapush.common.messages.workflow.FullWorkflowStateDefinition","fields":[{"type":"ServiceVerbCall","name":"call","description":"Called on the workflow when this state is about to be reached. If the call is a macro, it has the possibility to prevent the transition by returning {'transition':'failed', 'message':'optional error message'}."},{"type":"String","name":"stateId","description":"ID of the state","required":true},{"type":"String","name":"stateName","description":"State name"}],"anyField":false},"MacroDebugToken":{"type":"MacroDebugToken","javaClass":"com.zetapush.common.messages.macro.MacroDebugToken","fields":[{"type":"String","name":"token","description":"Token suitable for use by debug verbs"}],"anyField":false},"LogRequest":{"type":"LogRequest","javaClass":"com.zetapush.common.log.LogRequest","fields":[{"type":"String","name":"contextId","description":"Context ID. Clients and developers must not pass this explicitly. This value was generated by the server and passed back by the worker SDKs."},{"type":"Map[String,Object]","name":"custom","description":"For developer-defined values, tags, etc... A typical usage is to trace an application-generated transaction ID across several API calls, to be able to retrace a full click-stream afterwards"},{"type":"Object","name":"data","description":"The actual data you are logging. Can be a text message, or more structured data."},{"type":"LogLevel","name":"level","description":"By setting the level you ensure that this request ends up in the logs only when configured to do so."},{"type":"String","name":"logger","description":"Logger name. Hierarchical, dot-separated identifier, such as 'myClass.myVerb' to ease log storage and filtering."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Refines the identification of a connected client. Automtically set by the server."},{"type":"long","name":"timestampOverride","description":"User supplied timestamp. The server will still store its own timestamp."}],"anyField":false},"UserSearchResponse":{"type":"UserSearchResponse","javaClass":"com.zetapush.common.messages.directory.UserSearchResponse","fields":[{"type":"Pagination","name":"page","description":"Requested pagination"},{"type":"String","name":"requestId","description":"Request ID, as given by the user"},{"type":"long","name":"totalHits","description":"Total number of users matching the query"},{"type":"Map[String,Map[String,Object]]","name":"users","description":"Maps user keys to maps of their public data. Note that user data maps may have different formats for different authentication providers"}],"anyField":false},"GdaTableRemoval":{"type":"GdaTableRemoval","javaClass":"com.zetapush.common.messages.gda.GdaTableRemoval","fields":[{"type":"String","name":"name","description":"Table name","required":true}],"anyField":false},"NotifiableDeviceRegistration":{"type":"NotifiableDeviceRegistration","javaClass":"com.zetapush.common.messages.notifications.NotifiableDeviceRegistration","fields":[{"type":"String","name":"appId","description":"Application primary key (as defined in 'createApp')","required":true},{"type":"String","name":"deviceToken","description":"Device-specific and app-specific opaque token. The format and meaning is vendor (Apple, Android...) specific. The value is generated by some vendor API on the device for a particular app and will be used by zetapush for notifications.","required":true}],"anyField":false},"HttpClientResponse":{"type":"HttpClientResponse","javaClass":"com.zetapush.common.messages.httpclient.HttpClientResponse","fields":[{"type":"Object","name":"content","description":"received content"},{"type":"List[HttpClientHeader]","name":"headers","description":"received headers"},{"type":"int","name":"httpStatus","description":"response http status code"},{"type":"String","name":"requestId","description":"optional client generated call ID to identify responses"}],"anyField":false},"SnapshotItem":{"type":"SnapshotItem","javaClass":"com.zetapush.common.messages.filestorage.SnapshotCreationRequest.SnapshotItem","fields":[{"type":"boolean","name":"caseInsensitive","description":"Whether to taken case into account. Defaults to false : case is important"},{"type":"List[String]","name":"excludes","description":"Patterns for files that should be excluded. Used only when path is a folder. Exclusions have precedence over inclusions"},{"type":"List[String]","name":"includes","description":"Patterns for files that should be included. Used only when path is a folder"},{"type":"String","name":"path","description":"Path of the file to be included."}],"anyField":false},"SnapshotCreationRequest":{"type":"SnapshotCreationRequest","javaClass":"com.zetapush.common.messages.filestorage.SnapshotCreationRequest","fields":[{"type":"boolean","name":"flatten","description":"Whether to flatten source paths. Setting this to true might lead to name conflicts"},{"type":"String","name":"folder","description":"Folder name","required":true},{"type":"List[SnapshotItem]","name":"items","description":"Items to be copied"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"boolean","name":"parents","description":"Whether to create all non-existing parents. Defaults to false."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GrantListItem":{"type":"GrantListItem","javaClass":"com.zetapush.common.messages.remoting.GrantListItem","fields":[{"type":"String","name":"action","description":"Configured authorized action"},{"type":"String","name":"resource","description":"Configured authorized resource"}],"anyField":false},"PagedGrantList":{"type":"PagedGrantList","javaClass":"com.zetapush.common.messages.remoting.PagedGrantList","fields":[{"type":"PageContent[GrantListItem]","name":"grants","description":"List of granted rights"},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GrantList":{"type":"GrantList","javaClass":"com.zetapush.common.messages.remoting.GrantList","fields":[{"type":"List[GrantListItem]","name":"grants","description":"List of granted rights"},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GameJoinWithCallback":{"type":"GameJoinWithCallback","javaClass":"com.zetapush.common.messages.gameengine.GameJoinWithCallback","fields":[{"type":"String","name":"callerId","description":"callback info"},{"type":"String","name":"msgId","description":"unique ID for this message"},{"type":"GameJoin","name":"payload","description":"message payload"}],"anyField":false},"HttpClientCall":{"type":"HttpClientCall","javaClass":"com.zetapush.common.messages.httpclient.HttpClientCall","fields":[{"type":"String","name":"name","description":"name of the configured template","required":true},{"type":"String","name":"requestId","description":"optional client generated call ID to identify responses"}],"anyField":false},"MacroDebugStepType":{"type":"MacroDebugStepType","javaClass":"com.zetapush.common.messages.macro.MacroDebugStep.MacroDebugStepType","enumValues":[{"name":"STEP_OVER","description":"Step over the next instruction"},{"name":"RESUME","description":"Resume execution"},{"name":"TERMINATE","description":"Terminate execution"},{"name":"STEP_INTO","description":"Step into the next macrvo call"}],"anyField":false},"MacroDebugStep":{"type":"MacroDebugStep","javaClass":"com.zetapush.common.messages.macro.MacroDebugStep","fields":[{"type":"String","name":"token","description":"Debug token, previously generated by a call to the admin verb 'livedebugToken'"},{"type":"MacroDebugStepType","name":"type","description":"Step type"}],"anyField":false},"GameOrganizationWithCallback":{"type":"GameOrganizationWithCallback","javaClass":"com.zetapush.common.messages.gameengine.GameOrganizationWithCallback","fields":[{"type":"String","name":"callerId","description":"callback info"},{"type":"String","name":"msgId","description":"unique ID for this message"},{"type":"GameOrganization","name":"payload","description":"message payload"}],"anyField":false},"GdaPutsResult":{"type":"GdaPutsResult","javaClass":"com.zetapush.common.messages.gda.GdaPutsResult","fields":[{"type":"long","name":"inserted","description":"Number of inserted rows"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"TraceType":{"type":"TraceType","javaClass":"com.zetapush.common.messages.macro.MacroTrace.TraceType","enumValues":[{"name":"MS","description":"A macro is starting"},{"name":"ME","description":"A macro has ended"},{"name":"CMT","description":"User comment"},{"name":"USR","description":"Developer-generated"}],"anyField":false},"GdaGet":{"type":"GdaGet","javaClass":"com.zetapush.common.messages.gda.GdaGet","fields":[{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaGetResult":{"type":"GdaGetResult","javaClass":"com.zetapush.common.messages.gda.GdaGetResult","fields":[{"type":"GdaGet","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Map[String,Object]","name":"result","description":"Result for the specified request"}],"anyField":false},"SearchDocumentId":{"type":"SearchDocumentId","javaClass":"com.zetapush.common.messages.search.SearchDocumentId","fields":[{"type":"String","name":"id","description":"Document id","required":true},{"type":"String","name":"index","description":"Index name","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"type","description":"Type name","required":true}],"anyField":false},"AggregationPushes":{"type":"AggregationPushes","javaClass":"com.zetapush.common.messages.aggregation.AggregationPushes","fields":[{"type":"List[AggregationPush]","name":"items","description":"List of items","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false},"ProvisioningTaskRequest":{"type":"ProvisioningTaskRequest","javaClass":"com.zetapush.common.messages.queue.ProvisioningTask.ProvisioningTaskRequest","fields":[{"type":"String","name":"contextId","description":"STR-generated context ID. Used for traceability of client requests."},{"type":"ProvisioningCall","name":"data","description":"Task parameters. Specific for each consumer/producer contract"},{"type":"String","name":"description","description":"Task description"},{"type":"String","name":"originBusinessId","description":"BusinessId of the service which the task is from"},{"type":"String","name":"originDeploymentId","description":"DeploymentId of the service which the task is from"},{"type":"OwnerResource","name":"originator","description":"Request submitter"},{"type":"String","name":"owner","description":"When impersonating someone, use this field to differentiate from originator.owner"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"WorkflowTransitionDefinition":{"type":"WorkflowTransitionDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionDefinition","fields":[{"type":"String","name":"from","description":"Starting state","required":true},{"type":"String","name":"to","description":"Destination state","required":true}],"anyField":false},"WorkflowTemplate":{"type":"WorkflowTemplate","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplate","fields":[{"type":"List[WorkflowStateDefinition]","name":"states","description":"All the possible states of this workflow","required":true},{"type":"String","name":"templateName","description":"Unique template name","required":true},{"type":"List[WorkflowTransitionDefinition]","name":"transitions","description":"All the transitions of this workflow"}],"anyField":false},"WorkflowTransitionInfo":{"type":"WorkflowTransitionInfo","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionInfo","fields":[{"type":"long","name":"creation","description":"Creation timestamp of this workflow."},{"type":"String","name":"firstState","description":"First state of this workflow."},{"type":"String","name":"newState","description":"New state ID when the transition is complete."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"state","description":"Current state of this workflow."},{"type":"WorkflowTemplate","name":"template","description":"Template on which this workflow is based."},{"type":"Object","name":"userData","description":"User data for this workflow."},{"type":"String","name":"workflow","description":"Workflow ID, as returned by 'create'","required":true}],"anyField":false},"WorkflowTemplateListResult":{"type":"WorkflowTemplateListResult","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplateListResult","fields":[{"type":"WorkflowTemplateList","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"PageContent[WorkflowTemplate]","name":"result","description":"Result for the specified request"}],"anyField":false},"UserInfoRequest":{"type":"UserInfoRequest","javaClass":"com.zetapush.common.messages.directory.UserInfoRequest","fields":[{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"userKeys","description":"Set of user keys","required":true}],"anyField":false},"WorkerAdminBulkResponse":{"type":"WorkerAdminBulkResponse","javaClass":"com.zetapush.common.messages.queue.admin.WorkerAdminBulkResponse","fields":[{"type":"ZetaApiError","name":"error","description":"This field might contain a (fatal) error."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"List[Object]","name":"responses","description":"List of responses, in the same order as in the request"}],"anyField":false},"Grants":{"type":"Grants","javaClass":"com.zetapush.common.messages.remoting.Grants","fields":[{"type":"List[String]","name":"actions","description":"Actions which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false},"FolderListingRequest":{"type":"FolderListingRequest","javaClass":"com.zetapush.common.messages.filestorage.FolderListingRequest","fields":[{"type":"String","name":"folder","description":"Folder path","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"ConfigurableHttpOutput":{"type":"ConfigurableHttpOutput","javaClass":"com.zetapush.str.bootstrap.config.ConfigurableHttpOutput","fields":[{"type":"Object","name":"data"}],"anyField":false},"Type":{"type":"Type","javaClass":"com.zetapush.common.messages.macro.MacroJump.Type","enumValues":[{"name":"BREAK","description":"missing enum desc"},{"name":"CONTINUE","description":"missing enum desc"}],"anyField":false},"MacroJump":{"type":"MacroJump","javaClass":"com.zetapush.common.messages.macro.MacroJump","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"Type","name":"type","description":"jump type","required":true}],"anyField":false},"MacroExecBaseUrl":{"type":"MacroExecBaseUrl","javaClass":"com.zetapush.common.messages.macro.MacroExecBaseUrl","fields":[{"type":"String","name":"url"}],"anyField":false},"GroupRelatedAndPaged":{"type":"GroupRelatedAndPaged","javaClass":"com.zetapush.common.messages.remoting.GroupRelatedAndPaged","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"TraceablePaginatedImpersonatedRequest":{"type":"TraceablePaginatedImpersonatedRequest","javaClass":"com.zetapush.common.messages.TraceablePaginatedImpersonatedRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"StackListRequest":{"type":"StackListRequest","javaClass":"com.zetapush.common.messages.stack.StackListRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false},"MacroDebugBreakpoint":{"type":"MacroDebugBreakpoint","javaClass":"com.zetapush.common.messages.macro.MacroDebugBreakpoint","fields":[{"type":"int","name":"line","description":"Line number inside the source file"},{"type":"String","name":"location","description":"Source file information"}],"anyField":false},"MacroDebugSession":{"type":"MacroDebugSession","javaClass":"com.zetapush.common.messages.macro.MacroDebugSession","fields":[{"type":"List[MacroDebugBreakpoint]","name":"breakpoints","description":"List of breakpoints for the session"},{"type":"int","name":"debug","description":"Deprecated. Use the 'livedebug' API."},{"type":"boolean","name":"hardFail","description":"True if an error should trigger a response on an error channel, or false (the default) if the error should be simply reported in an error field"},{"type":"String","name":"name","description":"Macro name","required":true},{"type":"Map[String,Object]","name":"parameters","description":"Macro named parameters"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"token","description":"Debug token, previously generated by a call to the admin verb 'livedebugToken'"}],"anyField":false},"UserMembership":{"type":"UserMembership","javaClass":"com.zetapush.common.messages.remoting.UserMembership","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"boolean","name":"hardFail","description":"True if lack of effective membership should be treated as an error. False to return the information as a boolean in the response."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"user","description":"The user's key (as in __userKey)"}],"anyField":false},"DeviceNotificationSendStatus":{"type":"DeviceNotificationSendStatus","javaClass":"com.zetapush.common.messages.notifications.NotificationSendStatus.DeviceNotificationSendStatus","fields":[{"type":"String","name":"deviceToken","description":"Token for target device"},{"type":"String","name":"endpoint","description":"Endpoint for target device"},{"type":"boolean","name":"success","description":"Whether the message was sent"}],"anyField":false},"GameInfo":{"type":"GameInfo","javaClass":"com.zetapush.common.messages.game.GameInfo","fields":[{"type":"Map[String,String]","name":"commands","description":"Available commands when playing"},{"type":"String","name":"description","description":"Game description"},{"type":"String","name":"name","description":"Game type identifier"},{"type":"Map[String,String]","name":"options","description":"Available options whan creating"}],"anyField":false},"GameRunnerRegistration":{"type":"GameRunnerRegistration","javaClass":"com.zetapush.common.messages.game.GameRunnerRegistration","fields":[{"type":"GameInfo","name":"gameInfo","description":"Game Type information","required":true},{"type":"GameRunnerFullLocation","name":"location","description":"Location of the engine. The server will fill it if left null."},{"type":"int","name":"maxGames","description":"Maximum number of simultaneous games that the registering runner can handle"}],"anyField":false},"PingRequest":{"type":"PingRequest","javaClass":"com.zetapush.common.messages.remoting.PingRequest","fields":[{"type":"String","name":"action","description":"The action to probe","required":true}],"anyField":false},"UserControlRequest":{"type":"UserControlRequest","javaClass":"com.zetapush.common.messages.weak.UserControlRequest","fields":[{"type":"boolean","name":"fullRights","description":"Whether the controlled user/device fully impersonates its controller"},{"type":"String","name":"publicToken","description":"Public token of the weak you want to control"}],"anyField":false},"ApiTriggerListener":{"type":"ApiTriggerListener","javaClass":"com.zetapush.common.messages.trigger.ApiTriggerListener","fields":[{"type":"String","name":"deploymentId","description":"DeploymentId of the target service.","required":true},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the target verb when called. The format is the format accepted by the target."},{"type":"ApiTriggerId","name":"trigger","description":"Trigger info","required":true},{"type":"String","name":"verb","description":"Verb to be called within the target service.","required":true}],"anyField":false},"MassTriggers":{"type":"MassTriggers","javaClass":"com.zetapush.common.messages.trigger.MassTriggers","fields":[{"type":"List[ApiTriggerListener]","name":"apiTriggers","description":"List of API trigger listeners"},{"type":"boolean","name":"purge","description":"Whether to purge all the already stored listeners before storing the given listeners"},{"type":"List[TriggerListener]","name":"triggers","description":"List of trigger listeners"}],"anyField":false},"WorkerAdminBulkRequest":{"type":"WorkerAdminBulkRequest","javaClass":"com.zetapush.common.messages.queue.admin.WorkerAdminBulkRequest","fields":[{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[WorkerAdminRequest]","name":"requests","description":"List of admin requests"}],"anyField":false},"LogSinkConfig":{"type":"LogSinkConfig","javaClass":"com.zetapush.common.log.LogSinkConfig","fields":[{"type":"Map[String,Object]","name":"sinkConfig"},{"type":"LogSinkType","name":"sinkType"}],"anyField":false},"CheckPasswordResult":{"type":"CheckPasswordResult","javaClass":"com.zetapush.common.messages.simple.CheckPasswordResult","fields":[{"type":"String","name":"key","description":"account key in the realm. (configured 'unique key' used for authentication)"},{"type":"boolean","name":"matches","description":"Whether the password matches"}],"anyField":false},"ImpersonatedRequest":{"type":"ImpersonatedRequest","javaClass":"com.zetapush.common.messages.remoting.ImpersonatedRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false},"MacroBlock":{"type":"MacroBlock","javaClass":"com.zetapush.common.messages.macro.MacroBlock","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true}],"anyField":false},"MacroTest":{"type":"MacroTest","javaClass":"com.zetapush.common.messages.macro.MacroTest","fields":[{"type":"String","name":"condition","description":"Macro step condition. when evaluated to true, allows for execution of the steps","required":true},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"MacroBlock","name":"otherwise","description":"Else"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true}],"anyField":false},"RdbmsSimpleQuery":{"type":"RdbmsSimpleQuery","javaClass":"com.zetapush.common.messages.rdbms.RdbmsSimpleQuery","fields":[{"type":"String","name":"statement","description":"SQL query"}],"anyField":false},"DeviceAvailability":{"type":"DeviceAvailability","javaClass":"com.zetapush.common.messages.remoting.DeviceAvailability","fields":[{"type":"String","name":"action","description":"Action for which the device's availability is tested"},{"type":"boolean","name":"available","description":"Whether the device is available or not"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"},{"type":"String","name":"uid","description":"Session id of the answering device"},{"type":"String","name":"user","description":"User inquiring about availability"}],"anyField":false},"GdaDataType":{"type":"GdaDataType","javaClass":"com.zetapush.common.messages.gda.GdaDataType","enumValues":[{"name":"LONG","description":"64-bit signed integer. This is the only eligible type for the 'inc' API call"},{"name":"STRING","description":"Character String"},{"name":"BOOLEAN","description":"Boolean value : true or false"},{"name":"DOUBLE","description":"Floating point number"},{"name":"OBJECT","description":"Complex object"}],"anyField":false},"GdaTableColumn":{"type":"GdaTableColumn","javaClass":"com.zetapush.common.messages.gda.GdaTableColumn","fields":[{"type":"boolean","name":"map","description":"False if the column contains a single piece of data or true when it can contain several data, mapped by (sub-)keys. Defaults to 'false'"},{"type":"String","name":"name","description":"Column name","required":true},{"type":"GdaDataType","name":"type","description":"Column type","required":true}],"anyField":false},"GdaTableModification":{"type":"GdaTableModification","javaClass":"com.zetapush.common.messages.gda.GdaTableModification","fields":[{"type":"List[GdaTableColumn]","name":"columns","description":"List of column specifications","required":true},{"type":"Idempotence","name":"idempotence","description":"Specify the behavior when the table already exists. The default value is IGNORE_DIFFERENT.IGNORE_IDENTICAL ignores all pre-existing (identical or additional) columns, but does not allow to change or add columns.IGNORE_DIFFERENT ignores all pre-existing (identical or additional) columns, can add columns, but does not allow to change column types."},{"type":"String","name":"name","description":"Table name","required":true}],"anyField":false},"GdaTableStructure":{"type":"GdaTableStructure","javaClass":"com.zetapush.common.messages.gda.GdaTableStructure","fields":[{"type":"List[GdaTableColumn]","name":"columns","description":"List of column specifications","required":true},{"type":"String","name":"name","description":"Table name","required":true}],"anyField":false},"MacroVariable":{"type":"MacroVariable","javaClass":"com.zetapush.common.messages.macro.MacroVariable","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"Object","name":"value","description":"value to be evaluated","required":true},{"type":"String","name":"var","description":"Variable identifier","required":true}],"anyField":false},"GroupPresence":{"type":"GroupPresence","javaClass":"com.zetapush.common.messages.presence.GroupPresence","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"List[Presence]","name":"presences","description":"List of group users, with their presence information."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"MacroTypeDefinition":{"type":"MacroTypeDefinition","javaClass":"com.zetapush.common.messages.macro.MacroTypeDefinition","fields":[{"type":"List[MacroScriptParam]","name":"fields","description":"List of field definitions"},{"type":"String","name":"name","description":"Type name"},{"type":"Map[String,Object]","name":"thisObject","description":"Initializer. contains class common fields, copied into each new instance"}],"anyField":false},"SoapFaultDefinition":{"type":"SoapFaultDefinition","javaClass":"com.zetapush.common.messages.httpclient.HttpClientSOAPRequest.SoapFaultDefinition","fields":[{"type":"String","name":"targetNamespace"},{"type":"MacroTypeDefinition","name":"type","required":true}],"anyField":false},"HttpClientSOAPRequest":{"type":"HttpClientSOAPRequest","javaClass":"com.zetapush.common.messages.httpclient.HttpClientSOAPRequest","fields":[{"type":"Object","name":"content","description":"Request body. String (passed as is) or complex object (serialized to json)"},{"type":"List[HttpClientHeader]","name":"headers","description":"Headers to be sent"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"requestWrapperNamespace","description":"Use when the xml root type does not declare any namespace, but does need it"},{"type":"String","name":"soapAction","description":"SOAP action, as defined in the WSDL, for inclusion in the generated request headers"},{"type":"List[SoapFaultDefinition]","name":"soapFaults","description":"List of possible soap fault classes for this request"},{"type":"List[Object]","name":"soapHeaders","description":"Soap headers : the content of &lt;soapenv:Header&gt;"},{"type":"MacroTypeDefinition","name":"typeDefinition","description":"Type reference, as returned in ZMS by 'YourClassName.class' "},{"type":"String","name":"url","description":"Remote URL. a literal string","required":true}],"anyField":false},"MacroInfos":{"type":"MacroInfos","javaClass":"com.zetapush.common.messages.macro.MacroInfos","fields":[{"type":"String","name":"deploymentId","description":"Deployment ID of the macro service"},{"type":"List[MacroFunction]","name":"functions","description":"List of functions"},{"type":"Map[String,Object]","name":"globals","description":"Global data"},{"type":"List[MacroInfo]","name":"macros","description":"List of macros"},{"type":"boolean","name":"purge","description":"Whether to wipe out all existing macros before taking the given ones into account"},{"type":"List[MacroTypeDefinition]","name":"types","description":"List of user types"}],"anyField":false},"UserSearchConfig":{"type":"UserSearchConfig","javaClass":"com.zetapush.common.messages.directory.UserSearchConfig","fields":[{"type":"Map[String,Object]","name":"settings","description":"ElasticSearch index settings."},{"type":"Map[String,Object]","name":"usersMapping","description":"ES mappings for the 'users' type"}],"anyField":false},"WorkflowCreationRequest":{"type":"WorkflowCreationRequest","javaClass":"com.zetapush.common.messages.workflow.WorkflowCreationRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"templateName","description":"Template on which this workflow is based.","required":true},{"type":"Object","name":"userData","description":"User data. Put your domain-specific data here. It can be a complex object or a simple reference to something that you store somewhere else."}],"anyField":false},"SmsMessage":{"type":"SmsMessage","javaClass":"com.zetapush.common.messages.sms.SmsMessage","fields":[{"type":"String","name":"message","description":"Text message. Standard restrictions for text messages apply"},{"type":"List[String]","name":"receivers","description":"List of recipients"},{"type":"String","name":"sender","description":"Sender name"}],"anyField":false},"GdaRemoveColumns":{"type":"GdaRemoveColumns","javaClass":"com.zetapush.common.messages.gda.GdaRemoveColumns","fields":[{"type":"Set[String]","name":"columns","description":"List of column names","required":true},{"type":"String","name":"name","description":"Table name","required":true}],"anyField":false},"MacroPlay":{"type":"MacroPlay","javaClass":"com.zetapush.common.messages.macro.MacroPlay","fields":[{"type":"int","name":"debug","description":"Deprecated. Use the 'livedebug' API."},{"type":"boolean","name":"hardFail","description":"True if an error should trigger a response on an error channel, or false (the default) if the error should be simply reported in an error field"},{"type":"String","name":"name","description":"Macro name","required":true},{"type":"Map[String,Object]","name":"parameters","description":"Macro named parameters"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GdaPut":{"type":"GdaPut","javaClass":"com.zetapush.common.messages.gda.GdaPut","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"Object","name":"data","description":"stored data","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"key2","description":"optional cell key inside the column"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"LogConfig":{"type":"LogConfig","javaClass":"com.zetapush.common.log.LogConfig","fields":[{"type":"Map[String,LogLevel]","name":"levels","description":"Maps loggers to levels (DEBUG, INFO, ...)"},{"type":"LogLevel","name":"rootLevel","description":"Level for the root logger"},{"type":"LogSinkConfig","name":"sinkConfig","description":"specific to each sink type"}],"anyField":false},"ListOrSingle":{"type":"ListOrSingle","javaClass":"com.zetapush.common.messages.ListOrSingle","fields":[{"type":"List[String]","name":"values","description":"The list of values"}],"anyField":false},"ProvisioningTask":{"type":"ProvisioningTask","javaClass":"com.zetapush.common.messages.queue.ProvisioningTask","fields":[{"type":"OwnerResource","name":"assignee","description":"Slave coordinates for this task"},{"type":"String","name":"businessId","description":"Sandbox ID of this queue service"},{"type":"String","name":"channel","description":"Channel name"},{"type":"String","name":"comet","description":"STR Node processing the request"},{"type":"String","name":"deploymentId","description":"Deployment ID of this queue service"},{"type":"boolean","name":"dispatched","description":"for server use"},{"type":"boolean","name":"done","description":"for server use"},{"type":"ProvisioningTaskRequest","name":"request","description":"Use-case specific payload"},{"type":"String","name":"taskId","description":"Server-generated task ID. Should be given back to channel 'done'"}],"anyField":false},"DeployedItem":{"type":"DeployedItem","javaClass":"com.zetapush.common.messages.deployment.DeployedItem","fields":[{"type":"String","name":"businessId","required":true},{"type":"String","name":"deploymentId"},{"type":"String","name":"description"},{"type":"boolean","name":"enabled"},{"type":"Set[String]","name":"forbiddenVerbs"},{"type":"String","name":"itemId","required":true},{"type":"Map[String,String]","name":"options"}],"anyField":false},"WorkerAdminBulkServiceCreation":{"type":"WorkerAdminBulkServiceCreation","javaClass":"com.zetapush.common.messages.queue.admin.WorkerAdminBulkServiceCreation","fields":[{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[DeployedItem]","name":"services","description":"List of services to be created"}],"anyField":false},"MacroDebugBreakpointSet":{"type":"MacroDebugBreakpointSet","javaClass":"com.zetapush.common.messages.macro.MacroDebugBreakpointSet","fields":[{"type":"MacroDebugBreakpoint","name":"breakpoint","description":"Breakpoint information","required":true},{"type":"boolean","name":"enabled","description":"Whether the breakpoint is enabled or not"},{"type":"String","name":"token","description":"Debug token, previously generated by a call to the admin verb 'livedebugToken'"}],"anyField":false},"ResetRequest":{"type":"ResetRequest","javaClass":"com.zetapush.common.messages.simple.ResetRequest","fields":[{"type":"String","name":"key","description":"account key in the realm. (configured 'unique key' used for authentication)"}],"anyField":false},"GdaPutsRow":{"type":"GdaPutsRow","javaClass":"com.zetapush.common.messages.gda.GdaPutsRow","fields":[{"type":"Map[String,Object]","name":"data","description":"Stored data, as a map of columns to values","required":true},{"type":"String","name":"key","description":"Row key","required":true}],"anyField":false},"GdaPuts":{"type":"GdaPuts","javaClass":"com.zetapush.common.messages.gda.GdaPuts","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[GdaPutsRow]","name":"rows","description":"Rows to be inserted","required":true},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"WorkflowTransitionRequest":{"type":"WorkflowTransitionRequest","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"to","description":"Destination state","required":true},{"type":"Object","name":"userData","description":"User data. When not null, used to update the user-data field of the workflow instance"},{"type":"String","name":"workflow","description":"Workflow ID, as returned by 'create'","required":true}],"anyField":false},"Format":{"type":"Format","javaClass":"com.zetapush.common.zms.TimeUtils.Format","enumValues":[{"name":"Y","description":"missing enum desc"},{"name":"YMDHMSN","description":"missing enum desc"},{"name":"YMDHMS","description":"missing enum desc"},{"name":"YMDHMSM","description":"missing enum desc"},{"name":"YMD","description":"missing enum desc"},{"name":"YMDH","description":"missing enum desc"},{"name":"YMDHM","description":"missing enum desc"},{"name":"YM","description":"missing enum desc"}],"anyField":false},"NotificationMessage":{"type":"NotificationMessage","javaClass":"com.zetapush.common.messages.notifications.NotificationMessage","fields":[{"type":"Object","name":"data","description":"Data to be sent (map or string). Top-level fields to be included in the message. If data is a string, data will be put in the right, vendor-specific, location in the data structure sent to the device."},{"type":"String","name":"resource","description":"Resource of the target device (optional. if not given, will notify all devices of the user)"},{"type":"String","name":"target","description":"Target user key (as in __userKey)","required":true}],"anyField":false},"NotifiableApplication":{"type":"NotifiableApplication","javaClass":"com.zetapush.common.messages.notifications.NotifiableApplication","fields":[{"type":"String","name":"appId","description":"Application primary key, that you choose arbitrarily. If absent, it will default to the value of applicationName"},{"type":"String","name":"applicationName","description":"Application name, as registered in your vendor-specific management console","required":true},{"type":"String","name":"credential","description":"Vendor-specific credential : 'private key' for APNS, 'API key' for GCM","required":true},{"type":"NotificationPlatform","name":"platform","description":"Platform type","required":true},{"type":"String","name":"principal","description":"Your vendor-specific principal : 'SSL certificate' (PEM format) for APNS, N/A for GCM"}],"anyField":false},"QueueTask":{"type":"QueueTask","javaClass":"com.zetapush.common.messages.queue.QueueTask","fields":[{"type":"OwnerResource","name":"assignee","description":"Slave coordinates for this task"},{"type":"String","name":"businessId","description":"Sandbox ID of this queue service"},{"type":"String","name":"channel","description":"Channel name"},{"type":"String","name":"comet","description":"STR Node processing the request"},{"type":"String","name":"deploymentId","description":"Deployment ID of this queue service"},{"type":"boolean","name":"dispatched","description":"for server use"},{"type":"boolean","name":"done","description":"for server use"},{"type":"TaskRequest","name":"request","description":"Use-case specific payload"},{"type":"String","name":"taskId","description":"Server-generated task ID. Should be given back to channel 'done'"}],"anyField":false},"WorkflowList":{"type":"WorkflowList","javaClass":"com.zetapush.common.messages.workflow.WorkflowList","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"CronTaskDeletion":{"type":"CronTaskDeletion","javaClass":"com.zetapush.common.messages.cron.CronTaskDeletion","fields":[{"type":"String","name":"cronName","description":"cron name identifying the task to be removed"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"TaskConsumerRegistration":{"type":"TaskConsumerRegistration","javaClass":"com.zetapush.common.messages.queue.TaskConsumerRegistration","fields":[{"type":"int","name":"capacity","description":"Task consumer maximum capacity at a given time. The server will not exceed that capacity when dispatching new tasks"}],"anyField":false},"LogEntry":{"type":"LogEntry","javaClass":"com.zetapush.common.log.LogEntry","fields":[{"type":"String","name":"contextId","description":"Context ID. Clients and developers must not pass this explicitly. This value was generated by the server and passed back by the worker SDKs."},{"type":"Map[String,Object]","name":"custom","description":"For developer-defined values, tags, etc... A typical usage is to trace an application-generated transaction ID across several API calls, to be able to retrace a full click-stream afterwards"},{"type":"Object","name":"data","description":"The actual data you are logging. Can be a text message, or more structured data."},{"type":"LogLevel","name":"level","description":"By setting the level you ensure that this request ends up in the logs only when configured to do so."},{"type":"String","name":"logger","description":"Logger name. Hierarchical, dot-separated identifier, such as 'myClass.myVerb' to ease log storage and filtering."},{"type":"String","name":"node","description":"server node name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Refines the identification of a connected client. Automtically set by the server."},{"type":"Long","name":"timestamp","description":"server-generated timestamp"},{"type":"long","name":"timestampOverride","description":"User supplied timestamp. The server will still store its own timestamp."}],"anyField":false},"LogEntries":{"type":"LogEntries","javaClass":"com.zetapush.common.log.LogEntries","fields":[{"type":"PageContent[LogEntry]","name":"entries"},{"type":"Pagination","name":"page"},{"type":"long","name":"start"},{"type":"long","name":"stop"}],"anyField":false},"NotificationSendStatus":{"type":"NotificationSendStatus","javaClass":"com.zetapush.common.messages.notifications.NotificationSendStatus","fields":[{"type":"NotificationMessage","name":"message","description":"Source message"},{"type":"List[DeviceNotificationSendStatus]","name":"report","description":"List of statuses for each target device"}],"anyField":false},"GrantCheckRequest":{"type":"GrantCheckRequest","javaClass":"com.zetapush.common.messages.remoting.GrantCheckRequest","fields":[{"type":"String","name":"action","description":"The action to check"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"The resource to check"},{"type":"String","name":"user","description":"The user needing authorization"}],"anyField":false},"GrantCheckResult":{"type":"GrantCheckResult","javaClass":"com.zetapush.common.messages.remoting.GrantCheckResult","fields":[{"type":"boolean","name":"ok","description":"True when the check passed"},{"type":"GrantCheckRequest","name":"request","description":"The request"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false},"ThumbnailResult":{"type":"ThumbnailResult","javaClass":"com.zetapush.common.messages.filestorage.ThumbnailResult","fields":[{"type":"UploadedFile","name":"baseFile","description":"The file used as base for generating thumbnails"},{"type":"List[ZetaApiError]","name":"failed","description":"Generated thumbnails"},{"type":"List[Thumbnail]","name":"thumbnails","description":"Generated thumbnails"}],"anyField":false},"UserToken":{"type":"UserToken","javaClass":"com.zetapush.common.messages.weak.UserToken","fields":[{"type":"String","name":"publicToken","description":"public token"},{"type":"String","name":"token","description":"private token"},{"type":"String","name":"userKey","description":"userKey for this user"}],"anyField":false},"ProvisioningResult":{"type":"ProvisioningResult","javaClass":"com.zetapush.common.messages.weak.ProvisioningResult","fields":[{"type":"List[UserToken]","name":"users","description":"List of provisioned tokens"}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"GdaFilterRequest":{"type":"GdaFilterRequest","javaClass":"com.zetapush.common.messages.gda.GdaFilterRequest","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"Object","name":"function","description":"Boolean predicate. The function must accept one parameter : the current row. The return value must be a boolean. When true, the row is retained, otherwise it is filtered out."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key (inclusive)"},{"type":"String","name":"stop","description":"Stop row key (exclusive)"},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaList":{"type":"GdaList","javaClass":"com.zetapush.common.messages.gda.GdaList","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaListResult":{"type":"GdaListResult","javaClass":"com.zetapush.common.messages.gda.GdaListResult","fields":[{"type":"GdaList","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"PageContent[Map[String,Object]]","name":"result","description":"Result for the specified request"}],"anyField":false},"GdaFilterResult":{"type":"GdaFilterResult","javaClass":"com.zetapush.common.messages.gda.GdaFilterResult","fields":[{"type":"GdaFilterRequest","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"PageContent[Map[String,Object]]","name":"result","description":"Result for the specified request"}],"anyField":false},"GdaRemoveRange":{"type":"GdaRemoveRange","javaClass":"com.zetapush.common.messages.gda.GdaRemoveRange","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key","required":true},{"type":"String","name":"stop","description":"Stop row key","required":true},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaRange":{"type":"GdaRange","javaClass":"com.zetapush.common.messages.gda.GdaRange","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key (inclusive)","required":true},{"type":"String","name":"stop","description":"Stop row key (exclusive)","required":true},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaRangeResult":{"type":"GdaRangeResult","javaClass":"com.zetapush.common.messages.gda.GdaRangeResult","fields":[{"type":"GdaRange","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"PageContent[Map[String,Object]]","name":"result","description":"Result for the specified request"}],"anyField":false},"GdaMultiGetRequest":{"type":"GdaMultiGetRequest","javaClass":"com.zetapush.common.messages.gda.GdaMultiGetRequest","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"List[String]","name":"keys","description":"List of wanted row keys","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaMultiGetResult":{"type":"GdaMultiGetResult","javaClass":"com.zetapush.common.messages.gda.GdaMultiGetResult","fields":[{"type":"GdaMultiGetRequest","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"List[Map[String,Object]]","name":"result","description":"Result for the specified request"}],"anyField":false},"GdaReduceRequest":{"type":"GdaReduceRequest","javaClass":"com.zetapush.common.messages.gda.GdaReduceRequest","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"Object","name":"function","description":"Computation function. The function must accept two parameters : the current value and the current row. The return value is ignored : the current value must be updated instead."},{"type":"Map[String,Object]","name":"initialValue","description":"Initial value for the computation function. Example : {sum:0, mean:null}"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key (inclusive)","required":true},{"type":"String","name":"stop","description":"Stop row key (exclusive)","required":true},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaReduceResult":{"type":"GdaReduceResult","javaClass":"com.zetapush.common.messages.gda.GdaReduceResult","fields":[{"type":"GdaReduceRequest","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Map[String,Object]","name":"result","description":"Result for the specified request"}],"anyField":false},"SearchData":{"type":"SearchData","javaClass":"com.zetapush.common.messages.search.SearchData","fields":[{"type":"Map[String,Object]","name":"data","description":"Document data","required":true},{"type":"String","name":"id","description":"Document id","required":true},{"type":"String","name":"index","description":"Index name","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"type","description":"Type name","required":true}],"anyField":false},"MacroDebugInfoRequest":{"type":"MacroDebugInfoRequest","javaClass":"com.zetapush.common.messages.macro.MacroDebugInfoRequest","fields":[{"type":"String","name":"exp","description":"expression to evaluate"},{"type":"int","name":"frame","description":"Frame index, as sent by the server by 'resume'"},{"type":"String","name":"path","description":"optional path to apply on the result of the evaluation of exp"},{"type":"String","name":"requestId","description":"request ID"},{"type":"String","name":"token","description":"Debug token, previously generated by a call to the admin verb 'livedebugToken'"}],"anyField":false},"SearchIndex":{"type":"SearchIndex","javaClass":"com.zetapush.common.messages.search.SearchIndex","fields":[{"type":"String","name":"index","description":"Index name","required":true},{"type":"Map[String,Map[String,Object]]","name":"mappings","description":"ElasticSearch field mappings"},{"type":"Map[String,Object]","name":"settings","description":"ElasticSearch index settings."}],"anyField":false},"CronTaskListRequest":{"type":"CronTaskListRequest","javaClass":"com.zetapush.common.messages.cron.CronTaskListRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"long","name":"start","description":"Start timestamp for the task list. Not implemented"},{"type":"long","name":"stop","description":"Stop timestamp for the task list. Not implemented"}],"anyField":false},"FileUploadLocation":{"type":"FileUploadLocation","javaClass":"com.zetapush.common.messages.filestorage.FileUploadLocation","fields":[{"type":"String","name":"guid","description":"GUID of the uploaded file"},{"type":"String","name":"httpMethod","description":"HTTP method, typically POST or PUT"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"url","description":"Upload URL for the http client"}],"anyField":false},"WorkflowInfo":{"type":"WorkflowInfo","javaClass":"com.zetapush.common.messages.workflow.WorkflowInfo","fields":[{"type":"long","name":"creation","description":"Creation timestamp of this workflow."},{"type":"String","name":"firstState","description":"First state of this workflow."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"state","description":"Current state of this workflow."},{"type":"WorkflowTemplate","name":"template","description":"Template on which this workflow is based."},{"type":"Object","name":"userData","description":"User data for this workflow."},{"type":"String","name":"workflow","description":"Workflow ID, as returned by 'create'","required":true}],"anyField":false},"GameState":{"type":"GameState","javaClass":"com.zetapush.common.messages.game.GameState","fields":[{"type":"Map[String,Object]","name":"data","description":"Game specific data"},{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"GameStatus","name":"status","description":"Current game status"}],"anyField":false},"TemplateListRequest":{"type":"TemplateListRequest","javaClass":"com.zetapush.common.messages.template.TemplateListRequest","fields":[{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"JoinedGroups":{"type":"JoinedGroups","javaClass":"com.zetapush.common.messages.remoting.JoinedGroups","fields":[{"type":"PageContent[GroupInfo]","name":"groups","description":"Groups joined by the user."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"StackItem":{"type":"StackItem","javaClass":"com.zetapush.common.messages.stack.StackItem","fields":[{"type":"Map[String,Object]","name":"data","description":"Stored data"},{"type":"byte[]","name":"guid","description":"Server-generated GUID"},{"type":"long","name":"ts","description":"Insertion timestamp"}],"anyField":false},"StackListResponse":{"type":"StackListResponse","javaClass":"com.zetapush.common.messages.stack.StackListResponse","fields":[{"type":"StackListRequest","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"PageContent[StackItem]","name":"result","description":"Result for the specified request"}],"anyField":false},"TemplateCreation":{"type":"TemplateCreation","javaClass":"com.zetapush.common.messages.template.TemplateCreation","fields":[{"type":"String","name":"name","description":"template name","required":true},{"type":"String","name":"template","description":"template contents, as a character string","required":true}],"anyField":false},"TemplateInfo":{"type":"TemplateInfo","javaClass":"com.zetapush.common.messages.template.TemplateInfo","fields":[{"type":"List[String]","name":"languageTags","description":"List of languages for which a localization of the template exists"},{"type":"String","name":"name","description":"Template name"}],"anyField":false},"TemplateListResult":{"type":"TemplateListResult","javaClass":"com.zetapush.common.messages.template.TemplateListResult","fields":[{"type":"TemplateListRequest","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"PageContent[TemplateInfo]","name":"result","description":"Result for the specified request"}],"anyField":false},"TemplateResult":{"type":"TemplateResult","javaClass":"com.zetapush.common.messages.template.TemplateResult","fields":[{"type":"String","name":"content","description":"Result of template evaluation"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false},"CronPlanning":{"type":"CronPlanning","javaClass":"com.zetapush.common.messages.cron.CronPlanning","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"CronTaskListRequest","name":"request","description":"Cron planning request"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"PageContent[CronTaskRequest]","name":"tasks","description":"List of all tasks matching the request"}],"anyField":false},"TraceLevel":{"type":"TraceLevel","javaClass":"com.zetapush.common.messages.macro.MacroTrace.TraceLevel","enumValues":[{"name":"DEBUG","description":"Debug (server-generated traces are DEBUG)"},{"name":"ERROR","description":"Currently unused"},{"name":"TRACE","description":"From the 'trace' keyword"},{"name":"WARN","description":"Currently unused"},{"name":"INFO","description":"Currently unused"}],"anyField":false},"MacroTrace":{"type":"MacroTrace","javaClass":"com.zetapush.common.messages.macro.MacroTrace","fields":[{"type":"long","name":"ctx","description":"Trace context (differentiates client calls)"},{"type":"Object","name":"data","description":"Trace data"},{"type":"TraceLevel","name":"level","description":"Trace level"},{"type":"int","name":"line","description":"Line number in the source code."},{"type":"String","name":"location","description":"Location of the source code."},{"type":"int","name":"n","description":"Trace number (monotonous increase)"},{"type":"String","name":"owner","description":"Zetapush key of the user generating the trace"},{"type":"TraceType","name":"type","description":"Trace type (differentiates client calls)"}],"anyField":false},"UserGroupMembership":{"type":"UserGroupMembership","javaClass":"com.zetapush.common.messages.remoting.UserGroupMembership","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"boolean","name":"member","description":"Whether the user is member of the group"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"user","description":"The user's key (as in __userKey)"}],"anyField":false},"StackItemAdd":{"type":"StackItemAdd","javaClass":"com.zetapush.common.messages.stack.StackItemAdd","fields":[{"type":"Map[String,Object]","name":"data","description":"Stored data","required":true},{"type":"byte[]","name":"guid","description":"Key of this stack item"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true},{"type":"long","name":"ts","description":"Insertion timestamp"}],"anyField":false},"WorkflowTemplateCreation":{"type":"WorkflowTemplateCreation","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplateCreation","fields":[{"type":"List[FullWorkflowStateDefinition]","name":"states","description":"All the possible states of this workflow","required":true},{"type":"String","name":"templateName","description":"Unique template name","required":true},{"type":"List[WorkflowTransitionDefinition]","name":"transitions","description":"All the transitions of this workflow"}],"anyField":false},"FileCreationRequest":{"type":"FileCreationRequest","javaClass":"com.zetapush.common.messages.filestorage.FileCreationRequest","fields":[{"type":"String","name":"contentType","description":"Content type (matches the value of the HTTP content type header)"},{"type":"Object","name":"data","description":"Contents. Can be a String (will be stored as UTF-8), a byte array","required":true},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"}],"anyField":false},"ChronoUnit":{"type":"ChronoUnit","enumValues":[{"name":"SECONDS","description":"missing enum desc"},{"name":"MICROS","description":"missing enum desc"},{"name":"FOREVER","description":"missing enum desc"},{"name":"CENTURIES","description":"missing enum desc"},{"name":"MILLIS","description":"missing enum desc"},{"name":"DAYS","description":"missing enum desc"},{"name":"HALF_DAYS","description":"missing enum desc"},{"name":"MONTHS","description":"missing enum desc"},{"name":"WEEKS","description":"missing enum desc"},{"name":"HOURS","description":"missing enum desc"},{"name":"NANOS","description":"missing enum desc"},{"name":"YEARS","description":"missing enum desc"},{"name":"DECADES","description":"missing enum desc"},{"name":"ERAS","description":"missing enum desc"},{"name":"MILLENNIA","description":"missing enum desc"},{"name":"MINUTES","description":"missing enum desc"}],"anyField":false},"FolderCreationRequest":{"type":"FolderCreationRequest","javaClass":"com.zetapush.common.messages.filestorage.FolderCreationRequest","fields":[{"type":"String","name":"folder","description":"Folder name","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"boolean","name":"parents","description":"Whether to create all non-existing parents. Defaults to false."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"TimerResult":{"type":"TimerResult","javaClass":"com.zetapush.common.messages.cron.TimerResult","fields":[{"type":"String","name":"id","description":"Timer identifier"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"MacroDebugEventVar":{"type":"MacroDebugEventVar","javaClass":"com.zetapush.common.messages.macro.MacroDebugEventVar","fields":[{"type":"ZetaApiError","name":"error","description":"The request may have caused an error"},{"type":"int","name":"frame","description":"Frame index, as requested"},{"type":"String","name":"requestId","description":"request ID"},{"type":"String","name":"type","description":"Data type"},{"type":"MacroDebugFrameValue","name":"value","description":"Data value"},{"type":"String","name":"var","description":"Evaluated expression, as requested"}],"anyField":false},"MacroDebugFrameVariable":{"type":"MacroDebugFrameVariable","javaClass":"com.zetapush.common.messages.macro.MacroDebugFrameVariable","fields":[{"type":"String","name":"name","description":"Variable name"},{"type":"String","name":"type","description":"Variable type"},{"type":"MacroDebugFrameValue","name":"value","description":"Variable value"}],"anyField":false},"MacroDebugFrame":{"type":"MacroDebugFrame","javaClass":"com.zetapush.common.messages.macro.MacroDebugFrame","fields":[{"type":"int","name":"line","description":"Line number"},{"type":"String","name":"location","description":"Source location"},{"type":"String","name":"macroName","description":"Macro name"},{"type":"List[MacroDebugFrameVariable]","name":"vars","description":"Variables"}],"anyField":false},"MacroDebugFrameValue":{"type":"MacroDebugFrameValue","javaClass":"com.zetapush.common.messages.macro.MacroDebugFrameValue","fields":[{"type":"String","name":"type","description":"Value type"},{"type":"Object","name":"value","description":"Actual value, for primitive types. Size for complex types"},{"type":"List[MacroDebugFrameVariable]","name":"vars","description":"Sub fields, for complex types"}],"anyField":false},"MacroDebugEventPause":{"type":"MacroDebugEventPause","javaClass":"com.zetapush.common.messages.macro.MacroDebugEventPause","fields":[{"type":"List[MacroDebugFrame]","name":"frames","description":"Stack frames"},{"type":"int","name":"line","description":"Line number"},{"type":"String","name":"location","description":"Source location"},{"type":"boolean","name":"stepIntoPossible","description":"Whether it is possible to step into."}],"anyField":false},"Message":{"type":"Message","javaClass":"com.zetapush.common.messages.messaging.Message","fields":[{"type":"String","name":"channel","description":"Optional (alphanumeric) channel name"},{"type":"Map[String,Object]","name":"data","description":"Data to be sent","required":true},{"type":"String","name":"source","description":"User key of the message sender"},{"type":"ListOrSingle[String]","name":"target","description":"Target user or group. Can be either a string, an array of string or an object that contains an array of string. The 'target' property of the output message will have exactly the same form.","required":true}],"anyField":false}},"scopes":{"GROUP":"The result is sent to a list of users :","SESSION":"The result is only sent to the user session who made the call.","USER":"The result is sent to all live connections of the user."},"functions":[{"prefix":"coll","name":"addAll","description":"Adds the contents of the second (or more) collection to the first collection, and returns the first collection.","paramDescs":[{"name":"Target collection","variadic":false},{"name":"Collection(s) of elements to add","variadic":true}],"visible":true},{"prefix":"coll","name":"compare","description":"Returns true if the given collections contain the same elements in the same order. Elements are compared by value, which is well defined for values of some types (integers or strings), but undefined in the general case (in particular, comparing floating point numbers or structures is undefined)","paramDescs":[{"name":"collection of values","variadic":false},{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"coll","name":"contains","description":"Returns true if the given collection contains the given element. Elements are compared by value, which is well defined for values of some types (integers or strings), but undefined in the general case (in particular, comparing floating point numbers or structures is undefined)","paramDescs":[{"name":"collection of values","variadic":false},{"name":"element","variadic":false}],"visible":true},{"prefix":"coll","name":"copyMap","description":"Returns a map which is a shallow copy of the argument","paramDescs":[{"name":"source map","variadic":false}],"visible":true},{"prefix":"coll","name":"count","description":"Counts elements of a collection according to a unary predicate. A predicate takes one parameter and returns a boolean","paramDescs":[{"name":"collection of values","variadic":false},{"name":"unary predicate","variadic":false}],"visible":true},{"prefix":"coll","name":"filter","description":"Filters a collection according to a unary predicate. A predicate takes one parameter and returns a boolean","paramDescs":[{"name":"collection of values","variadic":false},{"name":"unary predicate","variadic":false}],"visible":true},{"prefix":"coll","name":"map","description":"Maps a collection to another according to a transformation function. The function takes one input parameter and produces the output.","paramDescs":[{"name":"collection of values","variadic":false},{"name":"unary function","variadic":false}],"visible":true},{"prefix":"coll","name":"reduce","description":"Reduces elements of a collection according to a accumulator function : a function taking two parameters (partial result, current element) and returning a result for the next iteration","paramDescs":[{"name":"collection of values","variadic":false},{"name":"Accumulator function","variadic":false},{"name":"Initial value","variadic":false}],"visible":true},{"prefix":"coll","name":"set","description":"Returns a set based on the given collection","paramDescs":[{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"coll","name":"size","description":"Returns the size of the given collection","paramDescs":[{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"coll","name":"sort","description":"Sorts (in place) a list of values according to a given comparator. A comparator is a function taking two parameters and returning -1, 0 or 1 when param1 is less, equal or greater than param2.","paramDescs":[{"name":"collection of values","variadic":false},{"name":"comparator","variadic":false}],"visible":true},{"prefix":"coll","name":"sset","description":"Returns a sorted set based on the given collection","paramDescs":[{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"coll","name":"sub","description":"Returns a collection based on sub-elements","paramDescs":[{"name":"collection of values","variadic":false},{"name":"Path to sub-element","variadic":false}],"visible":true},{"prefix":"coll","name":"toMap","description":"Maps a collection to a map according to two transformation functions (key generation, value generation). The functions take one input parameter and produce one output.","paramDescs":[{"name":"collection of values","variadic":false},{"name":"unary function generating keys","variadic":false},{"name":"unary function generating values","variadic":false}],"visible":true},{"prefix":"csv","name":"parse","description":"Parses input as CSV and returns an iterable list of rows (arrays or maps, depending on whether you specified column names). You may specify a list of column names.<br>The input can be a string or a file handle (as in the handle field of the result of a call to zpfs_hdfs.open)","paramDescs":[{"name":"CSV input (string or file)","variadic":false},{"name":"column specifications : array of objects with required 'name' and optional 'type' ('string','number','boolean', the default being 'string') .<br> You can use null to obtain an array, an empty list to obtain a map with automatically deduce columns from the first line.","variadic":false},{"name":"field separator (';' and ',' are usual values)","variadic":false}],"visible":true},{"prefix":"fmt","name":"pad","description":"Formats the given number with the given number of digits","paramDescs":[{"name":"number to format","variadic":false},{"name":"number of integer digits","variadic":false},{"name":"number of fraction digits","variadic":false},{"name":"decimal point","variadic":false}],"visible":true},{"prefix":"json","name":"parse","description":"Parses input as JSON and returns an object.","paramDescs":[{"name":"JSON input","variadic":false}],"visible":true},{"prefix":"json","name":"stringify","description":"Generates JSON from an object.","paramDescs":[{"name":"Input object","variadic":false}],"visible":true},{"prefix":"list","name":"add","description":"Adds an element to the end of a list. The existing list is modified if it exists.","paramDescs":[{"name":"collection of values","variadic":false},{"name":"element","variadic":false}],"visible":true},{"prefix":"list","name":"copyList","description":"Creates a new list which is a shallow copy of the argument","paramDescs":[{"name":"list of values","variadic":false}],"visible":true},{"prefix":"list","name":"first","description":"Returns the first element of a list","paramDescs":[{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"list","name":"last","description":"Returns the last element of a list","paramDescs":[{"name":"list of values","variadic":false}],"visible":true},{"prefix":"list","name":"list","description":"Creates a list","paramDescs":[],"visible":true},{"prefix":"list","name":"remove","description":"Removes the given element of a list","paramDescs":[{"name":"position (0-based)","variadic":false},{"name":"list of values","variadic":false}],"visible":true},{"prefix":"math","name":"abs","description":"Returns the absolute value of an integer","paramDescs":[{"name":"integer argument","variadic":false}],"visible":true},{"prefix":"math","name":"acos","description":"Returns the arc cosine of a value","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"math","name":"asin","description":"Returns the arc sine of a value","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"math","name":"atan","description":"Returns the arc tangent of a value","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"math","name":"cbrt","description":"Returns the cube root of a value","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"math","name":"ceil","description":"Returns the smallest float that is greater than or equal to the argument and is equal to an integer.","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"math","name":"cos","description":"Returns the trigonometric cosine of an angle","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"math","name":"cosh","description":"Returns the hyperbolic cosine of an angle","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"math","name":"fabs","description":"Returns the absolute value of a float","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"math","name":"floor","description":"Returns the largest float that is less than or equal to the argument and is equal to an integer.","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"math","name":"lrand","description":"Returns a 64-bit long pseudorandomly chosen between the inclusive lower bound and the exclusive upper bound.","paramDescs":[{"name":"inclusive lower bound","variadic":false},{"name":"exclusive upper bound","variadic":false}],"visible":true},{"prefix":"math","name":"max","description":"Returns the maximum of two integers","paramDescs":[{"name":"integer argument","variadic":false},{"name":"integer argument","variadic":false}],"visible":true},{"prefix":"math","name":"min","description":"Returns the minimum of two integers","paramDescs":[{"name":"integer argument","variadic":false},{"name":"integer argument","variadic":false}],"visible":true},{"prefix":"math","name":"pow","description":"Returns the value of the first argument raised to the power of the second argument","paramDescs":[{"name":"floating point argument","variadic":false},{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"math","name":"rand","description":"Returns a pseudorandom (double) floating point value with a positive sign, greater than or equal to 0.0 and less than 1.0.","paramDescs":[],"visible":true},{"prefix":"math","name":"range","description":"Returns a read-only collection of 32-bit signed integers between a low inclusive and a high exclusive bound","paramDescs":[{"name":"integer argument","variadic":false},{"name":"integer argument","variadic":false}],"visible":true},{"prefix":"math","name":"round","description":"Returns the closest long to the argument, with ties rounding up.","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"math","name":"sin","description":"Returns the trigonometric sine of an angle","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"math","name":"sinh","description":"Returns the hyperbolic sine of an angle","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"math","name":"sqrt","description":"Returns the square root of a value","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"math","name":"tan","description":"Returns the trigonometric tangent of an angle","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"math","name":"tanh","description":"Returns the hyperbolic tangent of an angle","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"stat","name":"gmean","description":"Returns the geometric mean of a list of values","paramDescs":[{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"stat","name":"max","description":"Returns the maximum of a list of values","paramDescs":[{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"stat","name":"mean","description":"Returns the arithmetic mean of a list of values","paramDescs":[{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"stat","name":"min","description":"Returns the minimum of a list of values","paramDescs":[{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"stat","name":"populationVariance","description":"Returns the population variance of a list of values","paramDescs":[{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"stat","name":"product","description":"Returns the product of a list of values","paramDescs":[{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"stat","name":"sum","description":"Returns the sum of a list of values","paramDescs":[{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"stat","name":"sumSqr","description":"Returns the sum of the squares of a list of values","paramDescs":[{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"stat","name":"variance","description":"Returns the variance of a list of values","paramDescs":[{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"str","name":"b64decode","description":"Decodes the given base64 string to a byte array","paramDescs":[{"name":"string argument","variadic":false}],"visible":true},{"prefix":"str","name":"b64decodeWithOptions","description":"Decodes the given base64 string to a byte array","paramDescs":[{"name":"string argument","variadic":false},{"name":"The wanted RFC compliance, to be chosen amongst [RFC4648, RFC4648_URLSAFE, RFC2045]","variadic":false}],"visible":true},{"prefix":"str","name":"b64encode","description":"Encodes the given string to base64","paramDescs":[{"name":"string argument or byte array","variadic":false}],"visible":true},{"prefix":"str","name":"b64encodeWithOptions","description":"Encodes the given string to base64","paramDescs":[{"name":"string argument or byte array","variadic":false},{"name":"The wanted RFC compliance, to be chosen amongst [RFC4648, RFC4648_URLSAFE, RFC2045]","variadic":false},{"name":"pass true if you do not want padding, false if you want","variadic":false}],"visible":true},{"prefix":"str","name":"bytes","description":"Returns the byte array UTF8 representation of the given string","paramDescs":[{"name":"string argument","variadic":false}],"visible":true},{"prefix":"str","name":"contains","description":"Tests whether a string contains some other string","paramDescs":[{"name":"containing string","variadic":false},{"name":"test string","variadic":false}],"visible":true},{"prefix":"str","name":"decodeUrl","description":"URL decodes a UTF8 string","paramDescs":[{"name":"string argument","variadic":false}],"visible":true},{"prefix":"str","name":"encodeUrl","description":"URL encodes a UTF8 string","paramDescs":[{"name":"string argument","variadic":false}],"visible":true},{"prefix":"str","name":"endsWith","description":"Tests whether a string ends with some other string","paramDescs":[{"name":"containing string","variadic":false},{"name":"test string","variadic":false}],"visible":true},{"prefix":"str","name":"fromCode","description":"Converts an integer unicode code point into a string","paramDescs":[{"name":"code point","variadic":false}],"visible":true},{"prefix":"str","name":"hex","description":"Returns an hex String representation of the given byte array","paramDescs":[{"name":"string argument or byte array","variadic":false}],"visible":true},{"prefix":"str","name":"indexOf","description":"Returns the index within this string of the first occurrence of the specified substring. Returns -1 if not found","paramDescs":[{"name":"containing string","variadic":false},{"name":"test string","variadic":false}],"visible":true},{"prefix":"str","name":"isAlpha","description":"Tests whether the given string is alphanumerical","paramDescs":[{"name":"string argument","variadic":false}],"visible":true},{"prefix":"str","name":"join","description":"Generates a string from elements and a delimiter.","paramDescs":[{"name":"Delimiter","variadic":false},{"name":"Various elements","variadic":true}],"visible":true},{"prefix":"str","name":"len","description":"Returns the length of a string, 0 if null.","paramDescs":[{"name":"string argument","variadic":false}],"visible":true},{"prefix":"str","name":"lower","description":"Returns the given string converted to lower case with a server-specific default locale","paramDescs":[{"name":"string argument","variadic":false}],"visible":true},{"prefix":"str","name":"match","description":"Tests whether a string matches a pattern (regex)","paramDescs":[{"name":"regex","variadic":false},{"name":"test string","variadic":false}],"visible":true},{"prefix":"str","name":"md5","description":"Returns a MD5 hash (byte array) of the given string","paramDescs":[{"name":"string argument or byte array","variadic":false}],"visible":true},{"prefix":"str","name":"padLeft","description":"Pads a string with the given character on the left. The resulting string will have at least the given minimum length, or the input string length if greater. The input string is left untouched","paramDescs":[{"name":"string argument","variadic":false},{"name":"minimum length","variadic":false},{"name":"character to pad with","variadic":false}],"visible":true},{"prefix":"str","name":"padRight","description":"Pads a string with the given character on the right. The resulting string will have at least the given minimum length, or the input string length if greater. The input string is left untouched","paramDescs":[{"name":"string argument","variadic":false},{"name":"minimum length","variadic":false},{"name":"character to pad with","variadic":false}],"visible":true},{"prefix":"str","name":"parseNumber","description":"Parses string input as a number. Returns null if the input cannot be parsed","paramDescs":[{"name":"number as a string","variadic":false}],"visible":true},{"prefix":"str","name":"queryString","description":"URL encodes a query string. Does NOT prefix the result with '?' ","paramDescs":[{"name":"Map of parameters","variadic":false}],"visible":true},{"prefix":"str","name":"replace","description":"Returns a String where occurences of a substring are replaced by another string","paramDescs":[{"name":"containing string","variadic":false},{"name":"old string","variadic":false},{"name":"replacement string","variadic":false}],"visible":true},{"prefix":"str","name":"rnd10","description":"Returns a random String with base-10 characters","paramDescs":[{"name":"Length of the resulting string","variadic":false}],"visible":true},{"prefix":"str","name":"rnd36","description":"Returns a random String with base-36 characters","paramDescs":[{"name":"number of bytes of entropy","variadic":false}],"visible":true},{"prefix":"str","name":"rnd64","description":"Returns a random String with URL-friendly base-64 characters","paramDescs":[{"name":"number of bytes of entropy","variadic":false}],"visible":true},{"prefix":"str","name":"sha1","description":"Returns a SHA-1 hash (byte array) of the given string","paramDescs":[{"name":"string argument or byte array","variadic":false}],"visible":true},{"prefix":"str","name":"split","description":"Splits a string around matches of the given single character","paramDescs":[{"name":"containing string","variadic":false},{"name":"separator","variadic":false}],"visible":true},{"prefix":"str","name":"startsWith","description":"Tests whether a string starts with some other string","paramDescs":[{"name":"containing string","variadic":false},{"name":"test string","variadic":false}],"visible":true},{"prefix":"str","name":"substr","description":"Returns a substring of a string","paramDescs":[{"name":"containing string","variadic":false},{"name":"starting position(inclusive)","variadic":false},{"name":"ending position(exclusive)","variadic":false}],"visible":true},{"prefix":"str","name":"upper","description":"Returns the given string converted to upper case with a server-specific default locale","paramDescs":[{"name":"string argument","variadic":false}],"visible":true},{"prefix":"time","name":"add","description":"Adds an amount of the given type to the given time and returns the result as an opaque time object suitable for use by other time manipulation functions. The input parameter is not modified.","paramDescs":[{"name":"time, as milliseconds from the epoch, or as returned by time:parse","variadic":false},{"name":"Amount of time units to be added","variadic":false},{"name":"Time unit. Allowed values are [NANOS, MICROS, MILLIS, SECONDS, MINUTES, HOURS, HALFDAYS, DAYS, WEEKS, MONTHS, YEARS, DECADES, CENTURIES, MILLENNIA, ERAS, FOREVER]","variadic":false}],"visible":true},{"prefix":"time","name":"before","description":"Returns whether the first date is before the second","paramDescs":[{"name":"time, as milliseconds from the epoch, or as returned by time:parse","variadic":false},{"name":"time, as milliseconds from the epoch, or as returned by time:parse","variadic":false}],"visible":true},{"prefix":"time","name":"between","description":"Calculates the amount of time between two dates, in the given unit","paramDescs":[{"name":"time, as milliseconds from the epoch, or as returned by time:parse (lower inclusive bound)","variadic":false},{"name":"time, as milliseconds from the epoch, or as returned by time:parse (upper exclusive bound)","variadic":false},{"name":"Time unit. Allowed values are [NANOS, MICROS, MILLIS, SECONDS, MINUTES, HOURS, HALFDAYS, DAYS, WEEKS, MONTHS, YEARS, DECADES, CENTURIES, MILLENNIA, ERAS, FOREVER]","variadic":false}],"visible":true},{"prefix":"time","name":"dom","description":"Returns the day of month (1 to 31) for the given time","paramDescs":[{"name":"time, as milliseconds from the epoch, or as returned by time:parse","variadic":false}],"visible":true},{"prefix":"time","name":"dow","description":"Returns the day of week (1 to 7 for monday to sunday) for the given time","paramDescs":[{"name":"time, as milliseconds from the epoch, or as returned by time:parse","variadic":false}],"visible":true},{"prefix":"time","name":"doy","description":"Returns the day of year (1 to 365-6) for the given time","paramDescs":[{"name":"time, as milliseconds from the epoch, or as returned by time:parse","variadic":false}],"visible":true},{"prefix":"time","name":"fmt","description":"Formats the given time with the given symbolic string format. The time zone is the one used when first obtaining the given time","paramDescs":[{"name":"time, as milliseconds from the epoch, or as returned by time:parse","variadic":false},{"name":"format. allowed values are [Y, YM, YMD, YMDH, YMDHM, YMDHMS, YMDHMSM, YMDHMSN]","variadic":false}],"visible":true},{"prefix":"time","name":"format","description":"Formats the given time with the given pattern string. The pattern supports the following characters : <table>\n     <tr bgcolor=\"#ccccff\">\n         <th align=left>Letter\n         <th align=left>Date or Time Component\n         <th align=left>Examples\n     <tr>\n         <td><code>G</code>\n         <td>Era designator\n         <td><code>AD</code>\n     <tr bgcolor=\"#eeeeff\">\n         <td><code>y</code>\n         <td>Year\n         <td><code>1996</code>; <code>96</code>\n     <tr>\n         <td><code>Y</code>\n         <td>Week year\n         <td><code>2009</code>; <code>09</code>\n     <tr bgcolor=\"#eeeeff\">\n         <td><code>M</code>\n         <td>Month in year\n         <td><code>July</code>; <code>Jul</code>; <code>07</code>\n     <tr>\n         <td><code>w</code>\n         <td>Week in year\n         <td><code>27</code>\n     <tr bgcolor=\"#eeeeff\">\n         <td><code>W</code>\n         <td>Week in month\n         <td><code>2</code>\n     <tr>\n         <td><code>D</code>\n         <td>Day in year\n         <td><code>189</code>\n     <tr bgcolor=\"#eeeeff\">\n         <td><code>d</code>\n         <td>Day in month\n         <td><code>10</code>\n     <tr>\n         <td><code>F</code>\n         <td>Day of week in month\n         <td><code>2</code>\n     <tr bgcolor=\"#eeeeff\">\n         <td><code>E</code>\n         <td>Day name in week\n         <td><code>Tuesday</code>; <code>Tue</code>\n     <tr>\n         <td><code>u</code>\n         <td>Day number of week (1 = Monday, ..., 7 = Sunday)\n         <td><code>1</code>\n     <tr bgcolor=\"#eeeeff\">\n         <td><code>a</code>\n         <td>Am/pm marker\n         <td><code>PM</code>\n     <tr>\n         <td><code>H</code>\n         <td>Hour in day (0-23)\n         <td><code>0</code>\n     <tr bgcolor=\"#eeeeff\">\n         <td><code>k</code>\n         <td>Hour in day (1-24)\n         <td><code>24</code>\n     <tr>\n         <td><code>K</code>\n         <td>Hour in am/pm (0-11)\n         <td><code>0</code>\n     <tr bgcolor=\"#eeeeff\">\n         <td><code>h</code>\n         <td>Hour in am/pm (1-12)\n         <td><code>12</code>\n     <tr>\n         <td><code>m</code>\n         <td>Minute in hour\n         <td><code>30</code>\n     <tr bgcolor=\"#eeeeff\">\n         <td><code>s</code>\n         <td>Second in minute\n         <td><code>55</code>\n     <tr>\n         <td><code>S</code>\n         <td>Millisecond\n         <td><code>978</code>\n     <tr bgcolor=\"#eeeeff\">\n         <td><code>z</code>\n         <td>Time zone\n         <td><code>Pacific Standard Time</code>; <code>PST</code>; <code>GMT-08:00</code>\n     <tr>\n         <td><code>Z</code>\n         <td>Time zone\n         <td><code>-0800</code>\n     <tr bgcolor=\"#eeeeff\">\n         <td><code>X</code>\n         <td>Time zone\n         <td><code>-08</code>; <code>-0800</code>;  <code>-08:00</code>\n </table>","paramDescs":[{"name":"time, as milliseconds from the epoch, or as returned by time:parse","variadic":false},{"name":"Time format pattern","variadic":false}],"visible":true},{"prefix":"time","name":"hod","description":"Returns the hour of day (0 to 23) for the given time","paramDescs":[{"name":"time, as milliseconds from the epoch, or as returned by time:parse","variadic":false}],"visible":true},{"prefix":"time","name":"moy","description":"Returns the month of year (1 to 12) for the given time","paramDescs":[{"name":"time, as milliseconds from the epoch, or as returned by time:parse","variadic":false}],"visible":true},{"prefix":"time","name":"now","description":"Returns the current time, as milliseconds from the epoch","paramDescs":[],"visible":true},{"prefix":"time","name":"parse","description":"Parses the given string (as formatted by time:fmt) and returns an object suitable for use by other time manipulation functions. The time zone can be specified.","paramDescs":[{"name":"String representation of the time","variadic":false},{"name":"Time Zone (format : GMT+hh:mm)","variadic":false}],"visible":true},{"prefix":"time","name":"parseUTC","description":"Parses the given string (as formatted by time:fmt) and returns an object suitable for use by other time manipulation functions. Time is UTC.","paramDescs":[{"name":"String representation of the time","variadic":false}],"visible":true},{"prefix":"time","name":"toEpoch","description":"Returns the milliseconds from the epoch","paramDescs":[{"name":"time, as milliseconds from the epoch, or as returned by time:parse","variadic":false}],"visible":true},{"prefix":"time","name":"zfmt","description":"Formats the given time with the given symbolic string format and the given time zone","paramDescs":[{"name":"time, as milliseconds from the epoch, or as returned by time:parse","variadic":false},{"name":"format. allowed values are [Y, YM, YMD, YMDH, YMDHM, YMDHMS, YMDHMSM, YMDHMSN]","variadic":false},{"name":"Time Zone (format : GMT+hh:mm)","variadic":false}],"visible":true}],"constraints":[{"description":"a NotNull parameter will cause an error when absent","name":"NotNull"},{"description":"minimum value for an integer","name":"Min","options":[{"description":"minimum value","name":"min","defaultOption":true}]},{"description":"maximum value for an integer","name":"Max","options":[{"description":"maximum value","name":"max","defaultOption":true}]},{"description":"size of a string","name":"Size","options":[{"description":"minimum value","name":"min","defaultOption":false},{"description":"maximum value","name":"max","defaultOption":false}]},{"description":"value must match the given regular expression","name":"Pattern","options":[{"description":"the regular expression to match","name":"regexp","defaultOption":true}]},{"description":"value must be part of the list","name":"Enum","options":[{"description":"the list of authorized values","name":"list","defaultOption":true}]},{"description":"@Valid causes a custom type to be validated","name":"Valid"},{"description":"URL Path Variable. Must reference a placeholder in a @RequestMapping annotated route","name":"PathVariable","options":[{"description":"placeholder variable name","name":"value","defaultOption":true}]},{"description":"Synonym for @PathVariable","name":"PathParam","options":[{"description":"placeholder variable name","name":"value","defaultOption":true}]},{"description":"Part of the URL after /macro/exec","name":"Path"},{"description":"Query Parameter. Only meaningful for @RequestMapping annotated macroscripts","name":"RequestParam","options":[{"description":"query parameter name","name":"value","defaultOption":true}]},{"description":"Query Parameter (Synonym for @RequestParam)","name":"QueryParam","options":[{"description":"query parameter name","name":"value","defaultOption":true}]},{"description":"HTTP request method (GET, POST...)","name":"RequestMethod"},{"description":"HTTP request header. Only meaningful for @RequestMapping annotated macroscripts","name":"RequestHeader","options":[{"description":"header name","name":"value","defaultOption":true}]},{"description":"HTTP request header (Synonym for @RequestHeader)","name":"HeaderParam","options":[{"description":"header name","name":"value","defaultOption":true}]},{"description":"Body of the HTTP request. Only meaningful for @RequestMapping annotated macroscripts","name":"RequestBody"},{"description":"Body of the HTTP response. Only meaningful for @RequestMapping annotated macroscripts. Can be used on a particular field or on the macroscript itself (meaning the returned object is the body)","name":"ResponseBody"},{"description":"Map a field to an XML element","name":"XmlElement","options":[{"description":"Name of the XML Schema element","name":"name","defaultOption":false},{"description":"XML target namespace of the XML Schema element","name":"namespace","defaultOption":false},{"description":"Customize the element declaration to be required","name":"required","defaultOption":false},{"description":"Customize the element declaration to be nillable","name":"nillable","defaultOption":false}]},{"description":"Map a field to an XML element derived from property's type","name":"XmlElementRef","options":[{"description":"Name of the XML Schema element","name":"name","defaultOption":false},{"description":"XML target namespace of the XML Schema element","name":"namespace","defaultOption":false},{"description":"Customize the element declaration to be required","name":"required","defaultOption":false}]},{"description":"Enables mapping a class to a XML Schema complex type with a simpleContent or a XML Schema simple type","name":"XmlValue"},{"description":"Maps a JavaBean property to a XML attribute","name":"XmlAttribute","options":[{"description":"Name of the XML Schema attribute","name":"name","defaultOption":false},{"description":"XML target namespace of the XML Schema attribute","name":"namespace","defaultOption":false},{"description":"Customize the element declaration to be required","name":"required","defaultOption":false}]},{"description":"Injects dependencies by type (default) or by name if you specify it.","name":"Inject","options":[{"description":"name of the injected object","name":"value","defaultOption":true}]},{"description":"Defines a placeholder value (for displaying purposes only : this is not an actual valid value).","name":"PlaceHolder","options":[{"description":"value of the placeholder","name":"value","defaultOption":true}]}]},"services":[{"clazz":"com.zetapush.str.authentication.delegating.DelegatingAuthenticationService","name":"Delegating","itemId":"delegating","desc":"End-user API for the delegating authentication","notes":["Provisioning verbs."],"verbs":[{"name":"userInfo","type":{"typeName":"ExistingUser","imports":["com.zetapush.common.messages.simple.ExistingUser"]},"returnType":{"typeName":"Map<String,Object>","imports":["java.util.Map","java.lang.Object","java.lang.String"]},"desc":"Get user info","notes":["Retrieves cached user info or (if missing) eagerly creates a zetapush key for the user.","The returned field 'zetapushKey' is a unique and permanent ID identifying a user in a sandbox."],"verbInfo":{"desc":"Get user info","deprecation":"","notes":["Retrieves cached user info or (if missing) eagerly creates a zetapush key for the user.","The returned field 'zetapushKey' is a unique and permanent ID identifying a user in a sandbox."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId1/userInfo","description":"Get user info","verb":"userInfo","notes":["Retrieves cached user info or (if missing) eagerly creates a zetapush key for the user.","The returned field 'zetapushKey' is a unique and permanent ID identifying a user in a sandbox."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ExistingUser","resolved":{"types":{"ExistingUser":{"type":"ExistingUser","javaClass":"com.zetapush.common.messages.simple.ExistingUser","fields":[{"type":"String","name":"key","description":"User key within the realm","required":true}],"anyField":false}}}},"responseInfo":{"type":"Map[String,Object]","resolved":{"types":{}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":false}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId1/userInfo","description":"Get user info","verb":"userInfo","notes":["Retrieves cached user info or (if missing) eagerly creates a zetapush key for the user.","The returned field 'zetapushKey' is a unique and permanent ID identifying a user in a sandbox."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ExistingUser","resolved":{"types":{"ExistingUser":{"type":"ExistingUser","javaClass":"com.zetapush.common.messages.simple.ExistingUser","fields":[{"type":"String","name":"key","description":"User key within the realm","required":true}],"anyField":false}}}},"responseInfo":{"type":"Map[String,Object]","resolved":{"types":{}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"Map<String,Object>","imports":["java.util.Map","java.lang.Object","java.lang.String"]}}]},{"clazz":"com.zetapush.str.services.rdbms.RdbmsService","name":"Rdbms","itemId":"rdbms","desc":"RDBMS User API","notes":["User API for SQL queries.","Contrary to GDA or Stacks, the data are not stored on a per-user basis.","Users can store, get, list their data."],"verbs":[{"name":"update","type":{"typeName":"RdbmsQuery","imports":["com.zetapush.common.messages.rdbms.RdbmsQuery"]},"desc":"Runs an update.","notes":["Runs a DML update with SQL syntax on this database."],"verbInfo":{"desc":"","deprecation":"","notes":["Runs a DML update with SQL syntax on this database."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId7/update","description":"Runs an update.","verb":"update","action":"update","notes":["Runs a DML update with SQL syntax on this database."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"RdbmsQuery","resolved":{"types":{"RdbmsQuery":{"type":"RdbmsQuery","javaClass":"com.zetapush.common.messages.rdbms.RdbmsQuery","fields":[{"type":"List[Object]","name":"parameters","description":"Parameters of the query"},{"type":"String","name":"statement","description":"SQL query"}],"anyField":false}}}},"errors":[]},"traceable":false},{"name":"query","type":{"typeName":"RdbmsQuery","imports":["com.zetapush.common.messages.rdbms.RdbmsQuery"]},"returnType":{"typeName":"RdbmsResultSet<>","imports":["com.zetapush.str.service.rdbms.RdbmsResultSet"]},"desc":"Runs a query.","notes":["Runs a DML query with SQL syntax on this database.","The @@sql statement supports inline SQL (unquoted), embedded constants (prefixed by '$', unescaped and statically replaced in the generated SQL query), embedded parameters (prefixed by ':', dynamically replaced and escaped at run-time)","The returned RdbmsResultSet is an iterable collection of rows.","The returned result set is iterable only once.","The content of a row is accessible only when it is being iterated on."],"verbInfo":{"desc":"","deprecation":"","notes":["Runs a DML query with SQL syntax on this database.","The @@sql statement supports inline SQL (unquoted), embedded constants (prefixed by '$', unescaped and statically replaced in the generated SQL query), embedded parameters (prefixed by ':', dynamically replaced and escaped at run-time)","The returned RdbmsResultSet is an iterable collection of rows.","The returned result set is iterable only once.","The content of a row is accessible only when it is being iterated on."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId7/query","description":"Runs a query.","verb":"query","action":"query","notes":["Runs a DML query with SQL syntax on this database.","The @@sql statement supports inline SQL (unquoted), embedded constants (prefixed by '$', unescaped and statically replaced in the generated SQL query), embedded parameters (prefixed by ':', dynamically replaced and escaped at run-time)","The returned RdbmsResultSet is an iterable collection of rows.","The returned result set is iterable only once.","The content of a row is accessible only when it is being iterated on."],"serverOnly":true,"clientOnly":false,"slaveDisabled":true,"paramInfo":{"type":"RdbmsQuery","resolved":{"types":{"RdbmsQuery":{"type":"RdbmsQuery","javaClass":"com.zetapush.common.messages.rdbms.RdbmsQuery","fields":[{"type":"List[Object]","name":"parameters","description":"Parameters of the query"},{"type":"String","name":"statement","description":"SQL query"}],"anyField":false}}}},"responseInfo":{"type":"RdbmsResultSet","resolved":{"types":{"RdbmsResultSet":{"type":"RdbmsResultSet","javaClass":"com.zetapush.str.service.rdbms.RdbmsResultSet","fields":[],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":false}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId7/update","description":"Runs an update.","verb":"update","action":"update","notes":["Runs a DML update with SQL syntax on this database."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"RdbmsQuery","resolved":{"types":{"RdbmsQuery":{"type":"RdbmsQuery","javaClass":"com.zetapush.common.messages.rdbms.RdbmsQuery","fields":[{"type":"List[Object]","name":"parameters","description":"Parameters of the query"},{"type":"String","name":"statement","description":"SQL query"}],"anyField":false}}}},"errors":[]}},{"listenerInfo":{"channel":"/service/BU_ID/depId7/query","description":"Runs a query.","verb":"query","action":"query","notes":["Runs a DML query with SQL syntax on this database.","The @@sql statement supports inline SQL (unquoted), embedded constants (prefixed by '$', unescaped and statically replaced in the generated SQL query), embedded parameters (prefixed by ':', dynamically replaced and escaped at run-time)","The returned RdbmsResultSet is an iterable collection of rows.","The returned result set is iterable only once.","The content of a row is accessible only when it is being iterated on."],"serverOnly":true,"clientOnly":false,"slaveDisabled":true,"paramInfo":{"type":"RdbmsQuery","resolved":{"types":{"RdbmsQuery":{"type":"RdbmsQuery","javaClass":"com.zetapush.common.messages.rdbms.RdbmsQuery","fields":[{"type":"List[Object]","name":"parameters","description":"Parameters of the query"},{"type":"String","name":"statement","description":"SQL query"}],"anyField":false}}}},"responseInfo":{"type":"RdbmsResultSet","resolved":{"types":{"RdbmsResultSet":{"type":"RdbmsResultSet","javaClass":"com.zetapush.str.service.rdbms.RdbmsResultSet","fields":[],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"RdbmsResultSet<>","imports":["com.zetapush.str.service.rdbms.RdbmsResultSet"]}}]},{"clazz":"com.zetapush.str.services.gda.GdaService","name":"Gda","itemId":"gda","desc":"GDA User API","notes":["User API for Generic Data Access.","The data are stored on a per-user basis.","Users can put, get, list their data."],"verbs":[{"name":"puts","type":{"typeName":"GdaPuts","imports":["com.zetapush.common.messages.gda.GdaPuts"]},"returnType":{"typeName":"GdaPutsResult","imports":["com.zetapush.common.messages.gda.GdaPutsResult"]},"desc":"Puts several rows","notes":["Creates or replaces the (maybe partial) contents of a collection of rows.","This method only creates or replaces cells for non-null input values."],"verbInfo":{"desc":"","deprecation":"","notes":["Creates or replaces the (maybe partial) contents of a collection of rows.","This method only creates or replaces cells for non-null input values."],"relatedClasses":[],"errors":[{"code":"NO_SUCH_COLUMN","desc":"Happens when the specified column does not exist (columns are defined by a createTable or addColumns call)."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId6/puts","description":"Puts several rows","verb":"puts","action":"puts","notes":["Creates or replaces the (maybe partial) contents of a collection of rows.","This method only creates or replaces cells for non-null input values."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaPuts","resolved":{"types":{"GdaPuts":{"type":"GdaPuts","javaClass":"com.zetapush.common.messages.gda.GdaPuts","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[GdaPutsRow]","name":"rows","description":"Rows to be inserted","required":true},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaPutsRow":{"type":"GdaPutsRow","javaClass":"com.zetapush.common.messages.gda.GdaPutsRow","fields":[{"type":"Map[String,Object]","name":"data","description":"Stored data, as a map of columns to values","required":true},{"type":"String","name":"key","description":"Row key","required":true}],"anyField":false}}}},"responseInfo":{"type":"GdaPutsResult","resolved":{"types":{"GdaPutsResult":{"type":"GdaPutsResult","javaClass":"com.zetapush.common.messages.gda.GdaPutsResult","fields":[{"type":"long","name":"inserted","description":"Number of inserted rows"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."},{"code":"NO_SUCH_COLUMN","desc":"Happens when the specified column does not exist (columns are defined by a createTable or addColumns call)."}]},"traceable":true},{"name":"inc","type":{"typeName":"GdaPut","imports":["com.zetapush.common.messages.gda.GdaPut"]},"returnType":{"typeName":"GdaPut","imports":["com.zetapush.common.messages.gda.GdaPut"]},"desc":"Increments an integer value","notes":["Increments a cell 64-bit signed integer value and returns the result in the data field.","The increment is atomic : if you concurrently increment 10 times a value by 1, the final result will be the initial value plus 10. The actual individual resulting values seen by the 10 concurrent callers may vary discontinuously, with duplicates : at least one of them will see the final (+10) result."],"verbInfo":{"desc":"","deprecation":"","notes":["Increments a cell 64-bit signed integer value and returns the result in the data field.","The increment is atomic : if you concurrently increment 10 times a value by 1, the final result will be the initial value plus 10. The actual individual resulting values seen by the 10 concurrent callers may vary discontinuously, with duplicates : at least one of them will see the final (+10) result."],"relatedClasses":[],"errors":[{"code":"NO_SUCH_COLUMN","desc":"Happens when the specified column does not exist (columns are defined by a createTable or addColumns call)."},{"code":"BAD_COLUMN","desc":"Happens when the input data is incorrect for the specified column"}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId6/inc","description":"Increments an integer value","verb":"inc","action":"inc","notes":["Increments a cell 64-bit signed integer value and returns the result in the data field.","The increment is atomic : if you concurrently increment 10 times a value by 1, the final result will be the initial value plus 10. The actual individual resulting values seen by the 10 concurrent callers may vary discontinuously, with duplicates : at least one of them will see the final (+10) result."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaPut","resolved":{"types":{"GdaPut":{"type":"GdaPut","javaClass":"com.zetapush.common.messages.gda.GdaPut","fields":[{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true},{"type":"Object","name":"data","description":"stored data. \n64-bit signed integer value interpreted as a delta. This delta increments the specified field.","required":true,"serverGenerated":false},{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"key2","description":"optional cell key inside the column"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"column","description":"column name inside the row","required":true}],"anyField":false}}}},"responseInfo":{"type":"GdaPut","resolved":{"types":{"GdaPut":{"type":"GdaPut","javaClass":"com.zetapush.common.messages.gda.GdaPut","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"Object","name":"data","description":"stored data","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"key2","description":"optional cell key inside the column"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."},{"code":"NO_SUCH_COLUMN","desc":"Happens when the specified column does not exist (columns are defined by a createTable or addColumns call)."},{"code":"BAD_COLUMN","desc":"Happens when the input data is incorrect for the specified column"}]},"traceable":true},{"name":"removeRow","type":{"typeName":"GdaRowRequest","imports":["com.zetapush.common.messages.gda.GdaRowRequest"]},"returnType":{"typeName":"GdaRowRequest","imports":["com.zetapush.common.messages.gda.GdaRowRequest"]},"desc":"Removes one full row","notes":["Removes all columns of the given row from the given table."],"verbInfo":{"desc":"","deprecation":"","notes":["Removes all columns of the given row from the given table."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId6/removeRow","description":"Removes one full row","verb":"removeRow","action":"removeRow","notes":["Removes all columns of the given row from the given table."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaRowRequest","resolved":{"types":{"GdaRowRequest":{"type":"GdaRowRequest","javaClass":"com.zetapush.common.messages.gda.GdaRowRequest","fields":[{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}}},"responseInfo":{"type":"GdaRowRequest","resolved":{"types":{"GdaRowRequest":{"type":"GdaRowRequest","javaClass":"com.zetapush.common.messages.gda.GdaRowRequest","fields":[{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},"traceable":true},{"name":"removeColumn","type":{"typeName":"GdaColumnRequest","imports":["com.zetapush.common.messages.gda.GdaColumnRequest"]},"returnType":{"typeName":"GdaColumnRequest","imports":["com.zetapush.common.messages.gda.GdaColumnRequest"]},"desc":"Removes one full column of a row","notes":["Removes all cells of the given column of the given row from the given table."],"verbInfo":{"desc":"","deprecation":"","notes":["Removes all cells of the given column of the given row from the given table."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId6/removeColumn","description":"Removes one full column of a row","verb":"removeColumn","action":"removeColumn","notes":["Removes all cells of the given column of the given row from the given table."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaColumnRequest","resolved":{"types":{"GdaColumnRequest":{"type":"GdaColumnRequest","javaClass":"com.zetapush.common.messages.gda.GdaColumnRequest","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}}},"responseInfo":{"type":"GdaColumnRequest","resolved":{"types":{"GdaColumnRequest":{"type":"GdaColumnRequest","javaClass":"com.zetapush.common.messages.gda.GdaColumnRequest","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},"traceable":true},{"name":"removeCell","type":{"typeName":"GdaCellRequest","imports":["com.zetapush.common.messages.gda.GdaCellRequest"]},"returnType":{"typeName":"GdaCellRequest","imports":["com.zetapush.common.messages.gda.GdaCellRequest"]},"desc":"Removes one cell inside a column of a row","notes":["Removes only one cell of the given column of the given row from the given table."],"verbInfo":{"desc":"","deprecation":"","notes":["Removes only one cell of the given column of the given row from the given table."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId6/removeCell","description":"Removes one cell inside a column of a row","verb":"removeCell","action":"removeCell","notes":["Removes only one cell of the given column of the given row from the given table."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaCellRequest","resolved":{"types":{"GdaCellRequest":{"type":"GdaCellRequest","javaClass":"com.zetapush.common.messages.gda.GdaCellRequest","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"key2","description":"cell key inside the column","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}}},"responseInfo":{"type":"GdaCellRequest","resolved":{"types":{"GdaCellRequest":{"type":"GdaCellRequest","javaClass":"com.zetapush.common.messages.gda.GdaCellRequest","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"key2","description":"cell key inside the column","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},"traceable":true},{"name":"mget","type":{"typeName":"GdaMultiGetRequest","imports":["com.zetapush.common.messages.gda.GdaMultiGetRequest"]},"returnType":{"typeName":"GdaMultiGetResult","imports":["com.zetapush.common.messages.gda.GdaMultiGetResult"]},"desc":"Asks for several data rows","notes":["Returns full data rows, in the order they were asked."],"verbInfo":{"desc":"","deprecation":"","notes":["Returns full data rows, in the order they were asked."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId6/mget","description":"Asks for several data rows","verb":"mget","action":"mget","notes":["Returns full data rows, in the order they were asked."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaMultiGetRequest","resolved":{"types":{"GdaMultiGetRequest":{"type":"GdaMultiGetRequest","javaClass":"com.zetapush.common.messages.gda.GdaMultiGetRequest","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"List[String]","name":"keys","description":"List of wanted row keys","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false}}}},"responseInfo":{"type":"GdaMultiGetResult","resolved":{"types":{"GdaMultiGetResult":{"type":"GdaMultiGetResult","javaClass":"com.zetapush.common.messages.gda.GdaMultiGetResult","fields":[{"type":"GdaMultiGetRequest","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"List[Map[String,Object]]","name":"result","description":"Result for the specified request"}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"GdaMultiGetRequest":{"type":"GdaMultiGetRequest","javaClass":"com.zetapush.common.messages.gda.GdaMultiGetRequest","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"List[String]","name":"keys","description":"List of wanted row keys","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},"traceable":true},{"name":"getCells","type":{"typeName":"GdaCellsRequest","imports":["com.zetapush.common.messages.gda.GdaCellsRequest"]},"returnType":{"typeName":"GdaCellsResult","imports":["com.zetapush.common.messages.gda.GdaCellsResult"]},"desc":"Asks for a data cell","notes":["Returns a precise list of cells from a column in a data row."],"verbInfo":{"desc":"","deprecation":"","notes":["Returns a precise list of cells from a column in a data row."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId6/getCells","description":"Asks for a data cell","verb":"getCells","action":"getCells","notes":["Returns a precise list of cells from a column in a data row."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaCellsRequest","resolved":{"types":{"GdaCellsRequest":{"type":"GdaCellsRequest","javaClass":"com.zetapush.common.messages.gda.GdaCellsRequest","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"List[String]","name":"key2","description":"cell keys inside the column","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}}},"responseInfo":{"type":"GdaCellsResult","resolved":{"types":{"GdaCellsResult":{"type":"GdaCellsResult","javaClass":"com.zetapush.common.messages.gda.GdaCellsResult","fields":[{"type":"GdaCellsRequest","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Object","name":"result","description":"Result for the specified request"}],"anyField":false},"GdaCellsRequest":{"type":"GdaCellsRequest","javaClass":"com.zetapush.common.messages.gda.GdaCellsRequest","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"List[String]","name":"key2","description":"cell keys inside the column","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},"traceable":true},{"name":"get","type":{"typeName":"GdaGet","imports":["com.zetapush.common.messages.gda.GdaGet"]},"returnType":{"typeName":"GdaGetResult","imports":["com.zetapush.common.messages.gda.GdaGetResult"]},"desc":"Asks for a data row","notes":["Returns a full data row."],"verbInfo":{"desc":"","deprecation":"","notes":["Returns a full data row."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId6/get","description":"Asks for a data row","verb":"get","action":"get","notes":["Returns a full data row."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaGet","resolved":{"types":{"GdaGet":{"type":"GdaGet","javaClass":"com.zetapush.common.messages.gda.GdaGet","fields":[{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}}},"responseInfo":{"type":"GdaGetResult","resolved":{"types":{"GdaGetResult":{"type":"GdaGetResult","javaClass":"com.zetapush.common.messages.gda.GdaGetResult","fields":[{"type":"GdaGet","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Map[String,Object]","name":"result","description":"Result for the specified request"}],"anyField":false},"GdaGet":{"type":"GdaGet","javaClass":"com.zetapush.common.messages.gda.GdaGet","fields":[{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},"traceable":true},{"name":"put","type":{"typeName":"GdaPut","imports":["com.zetapush.common.messages.gda.GdaPut"]},"returnType":{"typeName":"GdaPut","imports":["com.zetapush.common.messages.gda.GdaPut"]},"desc":"Puts some data into a cell","notes":["Creates or replaces the contents of a particular cell."],"verbInfo":{"desc":"","deprecation":"","notes":["Creates or replaces the contents of a particular cell."],"relatedClasses":[],"errors":[{"code":"NO_SUCH_COLUMN","desc":"Happens when the specified column does not exist (columns are defined by a createTable or addColumns call)."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId6/put","description":"Puts some data into a cell","verb":"put","action":"put","notes":["Creates or replaces the contents of a particular cell."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaPut","resolved":{"types":{"GdaPut":{"type":"GdaPut","javaClass":"com.zetapush.common.messages.gda.GdaPut","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"Object","name":"data","description":"stored data","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"key2","description":"optional cell key inside the column"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}}},"responseInfo":{"type":"GdaPut","resolved":{"types":{"GdaPut":{"type":"GdaPut","javaClass":"com.zetapush.common.messages.gda.GdaPut","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"Object","name":"data","description":"stored data","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"key2","description":"optional cell key inside the column"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."},{"code":"NO_SUCH_COLUMN","desc":"Happens when the specified column does not exist (columns are defined by a createTable or addColumns call)."}]},"traceable":true},{"name":"list","type":{"typeName":"GdaList","imports":["com.zetapush.common.messages.gda.GdaList"]},"returnType":{"typeName":"GdaListResult","imports":["com.zetapush.common.messages.gda.GdaListResult"]},"desc":"Asks for a list of rows","notes":["Returns a paginated list of rows from the given table."],"verbInfo":{"desc":"","deprecation":"","notes":["Returns a paginated list of rows from the given table."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId6/list","description":"Asks for a list of rows","verb":"list","action":"list","notes":["Returns a paginated list of rows from the given table."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaList","resolved":{"types":{"GdaList":{"type":"GdaList","javaClass":"com.zetapush.common.messages.gda.GdaList","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"GdaListResult","resolved":{"types":{"GdaListResult":{"type":"GdaListResult","javaClass":"com.zetapush.common.messages.gda.GdaListResult","fields":[{"type":"GdaList","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"PageContent[Map[String,Object]]","name":"result","description":"Result for the specified request"}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"GdaList":{"type":"GdaList","javaClass":"com.zetapush.common.messages.gda.GdaList","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},"traceable":true},{"name":"removeRange","type":{"typeName":"GdaRemoveRange","imports":["com.zetapush.common.messages.gda.GdaRemoveRange"]},"returnType":{"typeName":"GdaRemoveRange","imports":["com.zetapush.common.messages.gda.GdaRemoveRange"]},"desc":"Removes a range of rows","notes":["Removes the specified columns of the given range of rows from the given table."],"verbInfo":{"desc":"","deprecation":"","notes":["Removes the specified columns of the given range of rows from the given table."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId6/removeRange","description":"Removes a range of rows","verb":"removeRange","action":"removeRange","notes":["Removes the specified columns of the given range of rows from the given table."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaRemoveRange","resolved":{"types":{"GdaRemoveRange":{"type":"GdaRemoveRange","javaClass":"com.zetapush.common.messages.gda.GdaRemoveRange","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key","required":true},{"type":"String","name":"stop","description":"Stop row key","required":true},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false}}}},"responseInfo":{"type":"GdaRemoveRange","resolved":{"types":{"GdaRemoveRange":{"type":"GdaRemoveRange","javaClass":"com.zetapush.common.messages.gda.GdaRemoveRange","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key","required":true},{"type":"String","name":"stop","description":"Stop row key","required":true},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},"traceable":true},{"name":"filter","type":{"typeName":"GdaFilterRequest","imports":["com.zetapush.common.messages.gda.GdaFilterRequest"]},"returnType":{"typeName":"GdaFilterResult","imports":["com.zetapush.common.messages.gda.GdaFilterResult"]},"desc":"Filters a range of rows","notes":["Similar to range, but rows can be filtered out according to a developer-supplied predicate.","A range consists of consecutive rows from the start key (inclusive) to the stop key (exclusive).","You can specify partial keys for the start and stop fields."],"verbInfo":{"desc":"","deprecation":"","notes":["Similar to range, but rows can be filtered out according to a developer-supplied predicate.","A range consists of consecutive rows from the start key (inclusive) to the stop key (exclusive).","You can specify partial keys for the start and stop fields."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId6/filter","description":"Filters a range of rows","verb":"filter","action":"filter","notes":["Similar to range, but rows can be filtered out according to a developer-supplied predicate.","A range consists of consecutive rows from the start key (inclusive) to the stop key (exclusive).","You can specify partial keys for the start and stop fields."],"serverOnly":true,"clientOnly":false,"slaveDisabled":true,"paramInfo":{"type":"GdaFilterRequest","resolved":{"types":{"GdaFilterRequest":{"type":"GdaFilterRequest","javaClass":"com.zetapush.common.messages.gda.GdaFilterRequest","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"Object","name":"function","description":"Boolean predicate. The function must accept one parameter : the current row. The return value must be a boolean. When true, the row is retained, otherwise it is filtered out."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key (inclusive)"},{"type":"String","name":"stop","description":"Stop row key (exclusive)"},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"GdaFilterResult","resolved":{"types":{"GdaFilterResult":{"type":"GdaFilterResult","javaClass":"com.zetapush.common.messages.gda.GdaFilterResult","fields":[{"type":"GdaFilterRequest","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"PageContent[Map[String,Object]]","name":"result","description":"Result for the specified request"}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"GdaFilterRequest":{"type":"GdaFilterRequest","javaClass":"com.zetapush.common.messages.gda.GdaFilterRequest","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"Object","name":"function","description":"Boolean predicate. The function must accept one parameter : the current row. The return value must be a boolean. When true, the row is retained, otherwise it is filtered out."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key (inclusive)"},{"type":"String","name":"stop","description":"Stop row key (exclusive)"},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},"traceable":true},{"name":"range","type":{"typeName":"GdaRange","imports":["com.zetapush.common.messages.gda.GdaRange"]},"returnType":{"typeName":"GdaRangeResult","imports":["com.zetapush.common.messages.gda.GdaRangeResult"]},"desc":"Asks for a range of rows","notes":["Returns a paginated range of rows from the given table.","A range consists of consecutive rows from the start key (inclusive) to the stop key (exclusive).","You can specify partial keys for the start and stop fields."],"verbInfo":{"desc":"","deprecation":"","notes":["Returns a paginated range of rows from the given table.","A range consists of consecutive rows from the start key (inclusive) to the stop key (exclusive).","You can specify partial keys for the start and stop fields."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId6/range","description":"Asks for a range of rows","verb":"range","action":"range","notes":["Returns a paginated range of rows from the given table.","A range consists of consecutive rows from the start key (inclusive) to the stop key (exclusive).","You can specify partial keys for the start and stop fields."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaRange","resolved":{"types":{"GdaRange":{"type":"GdaRange","javaClass":"com.zetapush.common.messages.gda.GdaRange","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key (inclusive)","required":true},{"type":"String","name":"stop","description":"Stop row key (exclusive)","required":true},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"GdaRangeResult","resolved":{"types":{"GdaRangeResult":{"type":"GdaRangeResult","javaClass":"com.zetapush.common.messages.gda.GdaRangeResult","fields":[{"type":"GdaRange","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"PageContent[Map[String,Object]]","name":"result","description":"Result for the specified request"}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"GdaRange":{"type":"GdaRange","javaClass":"com.zetapush.common.messages.gda.GdaRange","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key (inclusive)","required":true},{"type":"String","name":"stop","description":"Stop row key (exclusive)","required":true},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},"traceable":true},{"name":"reduce","type":{"typeName":"GdaReduceRequest","imports":["com.zetapush.common.messages.gda.GdaReduceRequest"]},"returnType":{"typeName":"GdaReduceResult","imports":["com.zetapush.common.messages.gda.GdaReduceResult"]},"desc":"Reduces a range of rows","notes":["Returns a computed single reduced result from a range of rows from the given table.","A range consists of consecutive rows from the start key (inclusive) to the stop key (exclusive).","You can specify partial keys for the start and stop fields."],"verbInfo":{"desc":"","deprecation":"","notes":["Returns a computed single reduced result from a range of rows from the given table.","A range consists of consecutive rows from the start key (inclusive) to the stop key (exclusive).","You can specify partial keys for the start and stop fields."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId6/reduce","description":"Reduces a range of rows","verb":"reduce","action":"reduce","notes":["Returns a computed single reduced result from a range of rows from the given table.","A range consists of consecutive rows from the start key (inclusive) to the stop key (exclusive).","You can specify partial keys for the start and stop fields."],"serverOnly":true,"clientOnly":false,"slaveDisabled":true,"paramInfo":{"type":"GdaReduceRequest","resolved":{"types":{"GdaReduceRequest":{"type":"GdaReduceRequest","javaClass":"com.zetapush.common.messages.gda.GdaReduceRequest","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"Object","name":"function","description":"Computation function. The function must accept two parameters : the current value and the current row. The return value is ignored : the current value must be updated instead."},{"type":"Map[String,Object]","name":"initialValue","description":"Initial value for the computation function. Example : {sum:0, mean:null}"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key (inclusive)","required":true},{"type":"String","name":"stop","description":"Stop row key (exclusive)","required":true},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"GdaReduceResult","resolved":{"types":{"GdaReduceResult":{"type":"GdaReduceResult","javaClass":"com.zetapush.common.messages.gda.GdaReduceResult","fields":[{"type":"GdaReduceRequest","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Map[String,Object]","name":"result","description":"Result for the specified request"}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"GdaReduceRequest":{"type":"GdaReduceRequest","javaClass":"com.zetapush.common.messages.gda.GdaReduceRequest","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"Object","name":"function","description":"Computation function. The function must accept two parameters : the current value and the current row. The return value is ignored : the current value must be updated instead."},{"type":"Map[String,Object]","name":"initialValue","description":"Initial value for the computation function. Example : {sum:0, mean:null}"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key (inclusive)","required":true},{"type":"String","name":"stop","description":"Stop row key (exclusive)","required":true},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},"traceable":true}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId6/puts","description":"Puts several rows","verb":"puts","action":"puts","notes":["Creates or replaces the (maybe partial) contents of a collection of rows.","This method only creates or replaces cells for non-null input values."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaPuts","resolved":{"types":{"GdaPuts":{"type":"GdaPuts","javaClass":"com.zetapush.common.messages.gda.GdaPuts","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[GdaPutsRow]","name":"rows","description":"Rows to be inserted","required":true},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaPutsRow":{"type":"GdaPutsRow","javaClass":"com.zetapush.common.messages.gda.GdaPutsRow","fields":[{"type":"Map[String,Object]","name":"data","description":"Stored data, as a map of columns to values","required":true},{"type":"String","name":"key","description":"Row key","required":true}],"anyField":false}}}},"responseInfo":{"type":"GdaPutsResult","resolved":{"types":{"GdaPutsResult":{"type":"GdaPutsResult","javaClass":"com.zetapush.common.messages.gda.GdaPutsResult","fields":[{"type":"long","name":"inserted","description":"Number of inserted rows"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."},{"code":"NO_SUCH_COLUMN","desc":"Happens when the specified column does not exist (columns are defined by a createTable or addColumns call)."}]},"returnedType":{"typeName":"GdaPutsResult","imports":["com.zetapush.common.messages.gda.GdaPutsResult"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId6/inc","description":"Increments an integer value","verb":"inc","action":"inc","notes":["Increments a cell 64-bit signed integer value and returns the result in the data field.","The increment is atomic : if you concurrently increment 10 times a value by 1, the final result will be the initial value plus 10. The actual individual resulting values seen by the 10 concurrent callers may vary discontinuously, with duplicates : at least one of them will see the final (+10) result."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaPut","resolved":{"types":{"GdaPut":{"type":"GdaPut","javaClass":"com.zetapush.common.messages.gda.GdaPut","fields":[{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true},{"type":"Object","name":"data","description":"stored data. \n64-bit signed integer value interpreted as a delta. This delta increments the specified field.","required":true,"serverGenerated":false},{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"key2","description":"optional cell key inside the column"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"column","description":"column name inside the row","required":true}],"anyField":false}}}},"responseInfo":{"type":"GdaPut","resolved":{"types":{"GdaPut":{"type":"GdaPut","javaClass":"com.zetapush.common.messages.gda.GdaPut","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"Object","name":"data","description":"stored data","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"key2","description":"optional cell key inside the column"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."},{"code":"NO_SUCH_COLUMN","desc":"Happens when the specified column does not exist (columns are defined by a createTable or addColumns call)."},{"code":"BAD_COLUMN","desc":"Happens when the input data is incorrect for the specified column"}]},"returnedType":{"typeName":"GdaPut","imports":["com.zetapush.common.messages.gda.GdaPut"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId6/removeRow","description":"Removes one full row","verb":"removeRow","action":"removeRow","notes":["Removes all columns of the given row from the given table."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaRowRequest","resolved":{"types":{"GdaRowRequest":{"type":"GdaRowRequest","javaClass":"com.zetapush.common.messages.gda.GdaRowRequest","fields":[{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}}},"responseInfo":{"type":"GdaRowRequest","resolved":{"types":{"GdaRowRequest":{"type":"GdaRowRequest","javaClass":"com.zetapush.common.messages.gda.GdaRowRequest","fields":[{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},"returnedType":{"typeName":"GdaRowRequest","imports":["com.zetapush.common.messages.gda.GdaRowRequest"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId6/removeColumn","description":"Removes one full column of a row","verb":"removeColumn","action":"removeColumn","notes":["Removes all cells of the given column of the given row from the given table."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaColumnRequest","resolved":{"types":{"GdaColumnRequest":{"type":"GdaColumnRequest","javaClass":"com.zetapush.common.messages.gda.GdaColumnRequest","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}}},"responseInfo":{"type":"GdaColumnRequest","resolved":{"types":{"GdaColumnRequest":{"type":"GdaColumnRequest","javaClass":"com.zetapush.common.messages.gda.GdaColumnRequest","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},"returnedType":{"typeName":"GdaColumnRequest","imports":["com.zetapush.common.messages.gda.GdaColumnRequest"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId6/removeCell","description":"Removes one cell inside a column of a row","verb":"removeCell","action":"removeCell","notes":["Removes only one cell of the given column of the given row from the given table."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaCellRequest","resolved":{"types":{"GdaCellRequest":{"type":"GdaCellRequest","javaClass":"com.zetapush.common.messages.gda.GdaCellRequest","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"key2","description":"cell key inside the column","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}}},"responseInfo":{"type":"GdaCellRequest","resolved":{"types":{"GdaCellRequest":{"type":"GdaCellRequest","javaClass":"com.zetapush.common.messages.gda.GdaCellRequest","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"key2","description":"cell key inside the column","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},"returnedType":{"typeName":"GdaCellRequest","imports":["com.zetapush.common.messages.gda.GdaCellRequest"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId6/mget","description":"Asks for several data rows","verb":"mget","action":"mget","notes":["Returns full data rows, in the order they were asked."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaMultiGetRequest","resolved":{"types":{"GdaMultiGetRequest":{"type":"GdaMultiGetRequest","javaClass":"com.zetapush.common.messages.gda.GdaMultiGetRequest","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"List[String]","name":"keys","description":"List of wanted row keys","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false}}}},"responseInfo":{"type":"GdaMultiGetResult","resolved":{"types":{"GdaMultiGetResult":{"type":"GdaMultiGetResult","javaClass":"com.zetapush.common.messages.gda.GdaMultiGetResult","fields":[{"type":"GdaMultiGetRequest","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"List[Map[String,Object]]","name":"result","description":"Result for the specified request"}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"GdaMultiGetRequest":{"type":"GdaMultiGetRequest","javaClass":"com.zetapush.common.messages.gda.GdaMultiGetRequest","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"List[String]","name":"keys","description":"List of wanted row keys","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},"returnedType":{"typeName":"GdaMultiGetResult","imports":["com.zetapush.common.messages.gda.GdaMultiGetResult"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId6/getCells","description":"Asks for a data cell","verb":"getCells","action":"getCells","notes":["Returns a precise list of cells from a column in a data row."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaCellsRequest","resolved":{"types":{"GdaCellsRequest":{"type":"GdaCellsRequest","javaClass":"com.zetapush.common.messages.gda.GdaCellsRequest","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"List[String]","name":"key2","description":"cell keys inside the column","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}}},"responseInfo":{"type":"GdaCellsResult","resolved":{"types":{"GdaCellsResult":{"type":"GdaCellsResult","javaClass":"com.zetapush.common.messages.gda.GdaCellsResult","fields":[{"type":"GdaCellsRequest","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Object","name":"result","description":"Result for the specified request"}],"anyField":false},"GdaCellsRequest":{"type":"GdaCellsRequest","javaClass":"com.zetapush.common.messages.gda.GdaCellsRequest","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"List[String]","name":"key2","description":"cell keys inside the column","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},"returnedType":{"typeName":"GdaCellsResult","imports":["com.zetapush.common.messages.gda.GdaCellsResult"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId6/get","description":"Asks for a data row","verb":"get","action":"get","notes":["Returns a full data row."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaGet","resolved":{"types":{"GdaGet":{"type":"GdaGet","javaClass":"com.zetapush.common.messages.gda.GdaGet","fields":[{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}}},"responseInfo":{"type":"GdaGetResult","resolved":{"types":{"GdaGetResult":{"type":"GdaGetResult","javaClass":"com.zetapush.common.messages.gda.GdaGetResult","fields":[{"type":"GdaGet","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Map[String,Object]","name":"result","description":"Result for the specified request"}],"anyField":false},"GdaGet":{"type":"GdaGet","javaClass":"com.zetapush.common.messages.gda.GdaGet","fields":[{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},"returnedType":{"typeName":"GdaGetResult","imports":["com.zetapush.common.messages.gda.GdaGetResult"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId6/put","description":"Puts some data into a cell","verb":"put","action":"put","notes":["Creates or replaces the contents of a particular cell."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaPut","resolved":{"types":{"GdaPut":{"type":"GdaPut","javaClass":"com.zetapush.common.messages.gda.GdaPut","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"Object","name":"data","description":"stored data","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"key2","description":"optional cell key inside the column"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}}},"responseInfo":{"type":"GdaPut","resolved":{"types":{"GdaPut":{"type":"GdaPut","javaClass":"com.zetapush.common.messages.gda.GdaPut","fields":[{"type":"String","name":"column","description":"column name inside the row","required":true},{"type":"Object","name":"data","description":"stored data","required":true},{"type":"String","name":"key","description":"Row key","required":true},{"type":"String","name":"key2","description":"optional cell key inside the column"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."},{"code":"NO_SUCH_COLUMN","desc":"Happens when the specified column does not exist (columns are defined by a createTable or addColumns call)."}]},"returnedType":{"typeName":"GdaPut","imports":["com.zetapush.common.messages.gda.GdaPut"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId6/list","description":"Asks for a list of rows","verb":"list","action":"list","notes":["Returns a paginated list of rows from the given table."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaList","resolved":{"types":{"GdaList":{"type":"GdaList","javaClass":"com.zetapush.common.messages.gda.GdaList","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"GdaListResult","resolved":{"types":{"GdaListResult":{"type":"GdaListResult","javaClass":"com.zetapush.common.messages.gda.GdaListResult","fields":[{"type":"GdaList","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"PageContent[Map[String,Object]]","name":"result","description":"Result for the specified request"}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"GdaList":{"type":"GdaList","javaClass":"com.zetapush.common.messages.gda.GdaList","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},"returnedType":{"typeName":"GdaListResult","imports":["com.zetapush.common.messages.gda.GdaListResult"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId6/removeRange","description":"Removes a range of rows","verb":"removeRange","action":"removeRange","notes":["Removes the specified columns of the given range of rows from the given table."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaRemoveRange","resolved":{"types":{"GdaRemoveRange":{"type":"GdaRemoveRange","javaClass":"com.zetapush.common.messages.gda.GdaRemoveRange","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key","required":true},{"type":"String","name":"stop","description":"Stop row key","required":true},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false}}}},"responseInfo":{"type":"GdaRemoveRange","resolved":{"types":{"GdaRemoveRange":{"type":"GdaRemoveRange","javaClass":"com.zetapush.common.messages.gda.GdaRemoveRange","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key","required":true},{"type":"String","name":"stop","description":"Stop row key","required":true},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},"returnedType":{"typeName":"GdaRemoveRange","imports":["com.zetapush.common.messages.gda.GdaRemoveRange"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId6/filter","description":"Filters a range of rows","verb":"filter","action":"filter","notes":["Similar to range, but rows can be filtered out according to a developer-supplied predicate.","A range consists of consecutive rows from the start key (inclusive) to the stop key (exclusive).","You can specify partial keys for the start and stop fields."],"serverOnly":true,"clientOnly":false,"slaveDisabled":true,"paramInfo":{"type":"GdaFilterRequest","resolved":{"types":{"GdaFilterRequest":{"type":"GdaFilterRequest","javaClass":"com.zetapush.common.messages.gda.GdaFilterRequest","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"Object","name":"function","description":"Boolean predicate. The function must accept one parameter : the current row. The return value must be a boolean. When true, the row is retained, otherwise it is filtered out."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key (inclusive)"},{"type":"String","name":"stop","description":"Stop row key (exclusive)"},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"GdaFilterResult","resolved":{"types":{"GdaFilterResult":{"type":"GdaFilterResult","javaClass":"com.zetapush.common.messages.gda.GdaFilterResult","fields":[{"type":"GdaFilterRequest","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"PageContent[Map[String,Object]]","name":"result","description":"Result for the specified request"}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"GdaFilterRequest":{"type":"GdaFilterRequest","javaClass":"com.zetapush.common.messages.gda.GdaFilterRequest","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"Object","name":"function","description":"Boolean predicate. The function must accept one parameter : the current row. The return value must be a boolean. When true, the row is retained, otherwise it is filtered out."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key (inclusive)"},{"type":"String","name":"stop","description":"Stop row key (exclusive)"},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},"returnedType":{"typeName":"GdaFilterResult","imports":["com.zetapush.common.messages.gda.GdaFilterResult"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId6/range","description":"Asks for a range of rows","verb":"range","action":"range","notes":["Returns a paginated range of rows from the given table.","A range consists of consecutive rows from the start key (inclusive) to the stop key (exclusive).","You can specify partial keys for the start and stop fields."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GdaRange","resolved":{"types":{"GdaRange":{"type":"GdaRange","javaClass":"com.zetapush.common.messages.gda.GdaRange","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key (inclusive)","required":true},{"type":"String","name":"stop","description":"Stop row key (exclusive)","required":true},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"GdaRangeResult","resolved":{"types":{"GdaRangeResult":{"type":"GdaRangeResult","javaClass":"com.zetapush.common.messages.gda.GdaRangeResult","fields":[{"type":"GdaRange","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"PageContent[Map[String,Object]]","name":"result","description":"Result for the specified request"}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"GdaRange":{"type":"GdaRange","javaClass":"com.zetapush.common.messages.gda.GdaRange","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key (inclusive)","required":true},{"type":"String","name":"stop","description":"Stop row key (exclusive)","required":true},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},"returnedType":{"typeName":"GdaRangeResult","imports":["com.zetapush.common.messages.gda.GdaRangeResult"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId6/reduce","description":"Reduces a range of rows","verb":"reduce","action":"reduce","notes":["Returns a computed single reduced result from a range of rows from the given table.","A range consists of consecutive rows from the start key (inclusive) to the stop key (exclusive).","You can specify partial keys for the start and stop fields."],"serverOnly":true,"clientOnly":false,"slaveDisabled":true,"paramInfo":{"type":"GdaReduceRequest","resolved":{"types":{"GdaReduceRequest":{"type":"GdaReduceRequest","javaClass":"com.zetapush.common.messages.gda.GdaReduceRequest","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"Object","name":"function","description":"Computation function. The function must accept two parameters : the current value and the current row. The return value is ignored : the current value must be updated instead."},{"type":"Map[String,Object]","name":"initialValue","description":"Initial value for the computation function. Example : {sum:0, mean:null}"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key (inclusive)","required":true},{"type":"String","name":"stop","description":"Stop row key (exclusive)","required":true},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"GdaReduceResult","resolved":{"types":{"GdaReduceResult":{"type":"GdaReduceResult","javaClass":"com.zetapush.common.messages.gda.GdaReduceResult","fields":[{"type":"GdaReduceRequest","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Map[String,Object]","name":"result","description":"Result for the specified request"}],"anyField":false},"GdaColumnSpec":{"type":"GdaColumnSpec","javaClass":"com.zetapush.common.messages.gda.GdaMultiCellRequest.GdaColumnSpec","fields":[{"type":"String","name":"column","description":"Mandatory column name","required":true},{"type":"List[String]","name":"key2","description":"Optional list of cell names"}],"defaultField":"column","anyField":false},"GdaReduceRequest":{"type":"GdaReduceRequest","javaClass":"com.zetapush.common.messages.gda.GdaReduceRequest","fields":[{"type":"List[GdaColumnSpec]","name":"columns","description":"Optional column/cell specifications of the columns/cells to retrieve"},{"type":"Object","name":"function","description":"Computation function. The function must accept two parameters : the current value and the current row. The return value is ignored : the current value must be updated instead."},{"type":"Map[String,Object]","name":"initialValue","description":"Initial value for the computation function. Example : {sum:0, mean:null}"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"start","description":"Start row key (inclusive)","required":true},{"type":"String","name":"stop","description":"Stop row key (exclusive)","required":true},{"type":"String","name":"table","description":"Table name","required":true}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_TABLE","desc":"Happens when the specified table does not exist (tables are created by a createTable call)."}]},"returnedType":{"typeName":"GdaReduceResult","imports":["com.zetapush.common.messages.gda.GdaReduceResult"]}}]},{"clazz":"com.zetapush.str.services.macro.MacroService","name":"Macro","itemId":"macro","desc":"User API for macro execution","notes":["Simple errors are reported as usual.","However, the macro execution verbs treat most errors in a particular way : instead of reporting errors on the usual 'error' channel, errors are put in the returned 'MacroCompletion' result.","This behavior can be tuned on a per-call basis with the hardFail parameter.","Note that some particular errors will always behave as if hardFail were true, because they are related to programming errors, or prevent processing from ending gracefully : STACK_OVERFLOW, NO_SUCH_FUNCTION, RAM_EXCEEDED, CYCLES_EXCEEDED, TIME_EXCEEDED, QUOTA_EXCEEDED, RATE_EXCEEDED, BAD_COMPARATOR_VALUE"],"verbs":[{"name":"call","type":{"typeName":"MacroPlay","imports":["com.zetapush.common.messages.macro.MacroPlay"]},"desc":"Plays a previously recorded macro","notes":["DO NOT use this verb from inside an enclosing macro when you need the result in order to proceed with the enclosing macro.","You can override the default notification channel when defining the macro."],"verbInfo":{"desc":"","deprecation":"","notes":["DO NOT use this verb from inside an enclosing macro when you need the result in order to proceed with the enclosing macro.","You can override the default notification channel when defining the macro."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId15/call","description":"Plays a previously recorded macro","verb":"call","notes":["DO NOT use this verb from inside an enclosing macro when you need the result in order to proceed with the enclosing macro.","You can override the default notification channel when defining the macro."],"serverOnly":false,"clientOnly":true,"slaveDisabled":false,"paramInfo":{"type":"MacroPlay","resolved":{"types":{"MacroPlay":{"type":"MacroPlay","javaClass":"com.zetapush.common.messages.macro.MacroPlay","fields":[{"type":"int","name":"debug","description":"Deprecated. Use the 'livedebug' API."},{"type":"boolean","name":"hardFail","description":"True if an error should trigger a response on an error channel, or false (the default) if the error should be simply reported in an error field"},{"type":"String","name":"name","description":"Macro name","required":true},{"type":"Map[String,Object]","name":"parameters","description":"Macro named parameters"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"otherOutputs":[{"type":"MacroCompletion","resolved":{"types":{"MacroCompletion":{"type":"MacroCompletion","javaClass":"com.zetapush.common.messages.macro.MacroCompletion","fields":[{"type":"List[ZetaApiError]","name":"errors","description":"Encountered errors. Error reporting behavior can be changed with the hardFail parameter."},{"type":"List[String]","name":"log","description":"Generated debug output, if applicable"},{"type":"String","name":"name","description":"Macro name"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Object","name":"result","description":"Generated result, if applicable"},{"type":"MacroCompletionStats","name":"stats","description":"Execution statistics, when debug is enabled"}],"anyField":false},"MacroCompletionStats":{"type":"MacroCompletionStats","javaClass":"com.zetapush.common.messages.macro.MacroCompletion.MacroCompletionStats","fields":[{"type":"long","name":"cycles","description":"Total number of VM cycles"},{"type":"long","name":"elapsedMillis","description":"Elapsed server time for the execution of the macro"},{"type":"long","name":"nbCalls","description":"Total number of called verbs"},{"type":"long","name":"ram","description":"Total number of RAM bytes"}],"anyField":false},"ZetaApiError":{"type":"ZetaApiError","javaClass":"com.zetapush.common.messages.ZetaApiError","fields":[{"type":"String","name":"code","description":"Symbolic error code"},{"type":"Object","name":"context","description":"Developer-generated context. Each code can have a specific context format."},{"type":"String","name":"location","description":"Error location, if available"},{"type":"String","name":"message","description":"Human readable message. May vary depending on one or more of locale, input, developer code."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false}}},"channel":"completed","target":"","description":"The macro is ran. Upon completion the caller is asynchronously notified.","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"MacroCompletion","imports":["com.zetapush.common.messages.macro.MacroCompletion"]}}],"errors":[{"code":"NOT_FOUND","desc":"A macro with the given name could not be found."},{"code":"CAPACITY_EXCEEDED","desc":"The macro execution engine allows only a fixed amount of macros to be run concurrently."}]},"traceable":false},{"name":"evaluate","type":{"typeName":"MacroFunctionRequest","imports":["com.zetapush.str.services.macro.MacroFunctionRequest"]},"returnType":{"typeName":"MacroFunctionResult","imports":["com.zetapush.str.services.macro.MacroFunctionResult"]},"desc":"Evaluates a function result.","listenerInfo":{"channel":"/service/BU_ID/depId15/evaluate","description":"Evaluates a function result.","verb":"evaluate","serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"MacroFunctionRequest","resolved":{"types":{"MacroFunctionRequest":{"type":"MacroFunctionRequest","javaClass":"com.zetapush.str.services.macro.MacroFunctionRequest","fields":[{"type":"String","name":"name","description":"Function name","required":true},{"type":"List[Object]","name":"params","description":"Function parameter values","required":true}],"anyField":false}}}},"responseInfo":{"type":"MacroFunctionResult","resolved":{"types":{"MacroFunctionResult":{"type":"MacroFunctionResult","javaClass":"com.zetapush.str.services.macro.MacroFunctionResult","fields":[{"type":"Object","name":"result","description":"Function evaluation result"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"A macro with the given name could not be found."},{"code":"CAPACITY_EXCEEDED","desc":"The macro execution engine allows only a fixed amount of macros to be run concurrently."}]},"traceable":false},{"name":"func","type":{"typeName":"MacroPlay","imports":["com.zetapush.common.messages.macro.MacroPlay"]},"returnType":{"typeName":"MacroCompletion","imports":["com.zetapush.common.messages.macro.MacroCompletion"]},"desc":"Plays a previously recorded macro and returns the result.","notes":["Use this verb when you want to synchronously call a macro from inside another macro.","Despite being a server verb, func will honor the 'loud' modifier in ZMS."],"verbInfo":{"desc":"","deprecation":"","notes":["Use this verb when you want to synchronously call a macro from inside another macro.","Despite being a server verb, func will honor the 'loud' modifier in ZMS."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId15/func","description":"Plays a previously recorded macro and returns the result.","verb":"func","notes":["Use this verb when you want to synchronously call a macro from inside another macro.","Despite being a server verb, func will honor the 'loud' modifier in ZMS."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"MacroPlay","resolved":{"types":{"MacroPlay":{"type":"MacroPlay","javaClass":"com.zetapush.common.messages.macro.MacroPlay","fields":[{"type":"int","name":"debug","description":"Deprecated. Use the 'livedebug' API."},{"type":"boolean","name":"hardFail","description":"True if an error should trigger a response on an error channel, or false (the default) if the error should be simply reported in an error field"},{"type":"String","name":"name","description":"Macro name","required":true},{"type":"Map[String,Object]","name":"parameters","description":"Macro named parameters"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"MacroCompletion","resolved":{"types":{"MacroCompletion":{"type":"MacroCompletion","javaClass":"com.zetapush.common.messages.macro.MacroCompletion","fields":[{"type":"List[ZetaApiError]","name":"errors","description":"Encountered errors. Error reporting behavior can be changed with the hardFail parameter."},{"type":"List[String]","name":"log","description":"Generated debug output, if applicable"},{"type":"String","name":"name","description":"Macro name"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Object","name":"result","description":"Generated result, if applicable"},{"type":"MacroCompletionStats","name":"stats","description":"Execution statistics, when debug is enabled"}],"anyField":false},"MacroCompletionStats":{"type":"MacroCompletionStats","javaClass":"com.zetapush.common.messages.macro.MacroCompletion.MacroCompletionStats","fields":[{"type":"long","name":"cycles","description":"Total number of VM cycles"},{"type":"long","name":"elapsedMillis","description":"Elapsed server time for the execution of the macro"},{"type":"long","name":"nbCalls","description":"Total number of called verbs"},{"type":"long","name":"ram","description":"Total number of RAM bytes"}],"anyField":false},"ZetaApiError":{"type":"ZetaApiError","javaClass":"com.zetapush.common.messages.ZetaApiError","fields":[{"type":"String","name":"code","description":"Symbolic error code"},{"type":"Object","name":"context","description":"Developer-generated context. Each code can have a specific context format."},{"type":"String","name":"location","description":"Error location, if available"},{"type":"String","name":"message","description":"Human readable message. May vary depending on one or more of locale, input, developer code."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"A macro with the given name could not be found."},{"code":"CAPACITY_EXCEEDED","desc":"The macro execution engine allows only a fixed amount of macros to be run concurrently."}]},"traceable":true},{"name":"sudo","type":{"typeName":"SuMacroPlay","imports":["com.zetapush.common.messages.macro.SuMacroPlay"]},"returnType":{"typeName":"MacroCompletion","imports":["com.zetapush.common.messages.macro.MacroCompletion"]},"desc":"Similar to func, with the ability to impersonate any user at will.","notes":["Use this verb when you do not want to use or cannot use the standard rights system and wish to bypass it completely.","Use this verb sparingly, as it can give the caller any right on any resource."],"verbInfo":{"desc":"","deprecation":"Starting with STR v2.3.15 and plugin v1.1.53, all API calls can use the sudo keyword from ZMS macro code.","notes":["Use this verb when you do not want to use or cannot use the standard rights system and wish to bypass it completely.","Use this verb sparingly, as it can give the caller any right on any resource."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId15/sudo","description":"Similar to func, with the ability to impersonate any user at will.","verb":"sudo","deprecation":"Starting with STR v2.3.15 and plugin v1.1.53, all API calls can use the sudo keyword from ZMS macro code.","notes":["Use this verb when you do not want to use or cannot use the standard rights system and wish to bypass it completely.","Use this verb sparingly, as it can give the caller any right on any resource."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"SuMacroPlay","resolved":{"types":{"SuMacroPlay":{"type":"SuMacroPlay","javaClass":"com.zetapush.common.messages.macro.SuMacroPlay","fields":[{"type":"int","name":"debug","description":"Deprecated. Use the 'livedebug' API."},{"type":"boolean","name":"hardFail","description":"True if an error should trigger a response on an error channel, or false (the default) if the error should be simply reported in an error field"},{"type":"String","name":"name","description":"Macro name","required":true},{"type":"Map[String,Object]","name":"parameters","description":"Macro named parameters"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"suKey","description":"Key of the impersonated user","required":true},{"type":"List[MacroInfo]","name":"tempMacros","description":"Temporary macros. This feature does not support concurrent calls."}],"anyField":false},"MacroBlock":{"type":"MacroBlock","javaClass":"com.zetapush.common.messages.macro.MacroBlock","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true}],"anyField":false},"MacroCall":{"type":"MacroCall","javaClass":"com.zetapush.common.messages.macro.MacroCall","fields":[{"type":"String","name":"deploymentId","description":"DeploymentId of the service to be called","required":true},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"boolean","name":"noExpand","description":"Specifies whether parameter expansion should be avoided. The server will of course set this to true automatically if no refs are present. Defaults to false"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the verb. The format is the format expected by the target verb, with the following exception : any field can be replaced by a placeholder. A placeholder is an object with a '__ref' field. The value of the ref field follows java EL syntax with some pre-defined objects and functions (see the documentation on macros)"},{"type":"String","name":"resultName","description":"Name of the result, for future reference"},{"type":"String","name":"suKey","description":"Key of the impersonated user"},{"type":"String","name":"verb","description":"Verb to be called inside the specified service","required":true}],"anyField":false},"MacroFunction":{"type":"MacroFunction","javaClass":"com.zetapush.common.messages.macro.MacroFunction","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"String","name":"name","description":"Function name","required":true},{"type":"List[MacroFunctionParam]","name":"parameters","description":"Function parameters"},{"type":"Object","name":"result","description":"Function result","required":true},{"type":"String","name":"source","description":"source file"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true}],"anyField":false},"MacroFunctionParam":{"type":"MacroFunctionParam","javaClass":"com.zetapush.common.messages.macro.MacroFunctionParam","fields":[{"type":"String","name":"name","description":"Parameter name"}],"anyField":false},"MacroInfo":{"type":"MacroInfo","javaClass":"com.zetapush.common.messages.macro.MacroInfo","fields":[{"type":"boolean","name":"broadcast","description":"Whether to broadcast to all the user's sessions, or just to the asking session. Defaults to false (request-response paradigm)."},{"type":"String","name":"channel","description":"Optional return channel. Defaults to completed"},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"String","name":"name","description":"Macro name","required":true},{"type":"List[MacroScriptParam]","name":"params","description":"Optional parameter specifications"},{"type":"Map[String,Object]","name":"result","description":"Optional macro result"},{"type":"List[MacroScriptParam]","name":"returned","description":"Optional output field specifications"},{"type":"String","name":"source","description":"source file (for debug)"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true},{"type":"Object","name":"target","description":"Target for the response (the syntax is the same as in messaging.send). Overrides 'broadcast' when set."},{"type":"String","name":"userKey","description":"Setting this field effectively overrides the __userKey pseudo-constant for the duration of the macro. All non-sudoed internal calls will behave as if sudoed with the given user key. When this field is set, there is not point in calling this macro with sudo"}],"anyField":false},"MacroJump":{"type":"MacroJump","javaClass":"com.zetapush.common.messages.macro.MacroJump","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"Type","name":"type","description":"jump type","required":true}],"anyField":false},"MacroLocalFunction":{"type":"MacroLocalFunction","javaClass":"com.zetapush.common.messages.macro.MacroLocalFunction","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"MacroFunction","name":"f","description":"Function definition","required":true},{"type":"int","name":"line","description":"Line number in source file"},{"type":"String","name":"var","description":"Function local name","required":true}],"anyField":false},"MacroLog":{"type":"MacroLog","javaClass":"com.zetapush.common.messages.macro.MacroLog","fields":[{"type":"Object","name":"data","description":"Data to be logged. The server will fail to produce an accurate result if the actual evaluated data is too big."},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"}],"anyField":false},"MacroLoop":{"type":"MacroLoop","javaClass":"com.zetapush.common.messages.macro.MacroLoop","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"String","name":"items","description":"Collection to iterate on","required":true},{"type":"int","name":"line","description":"Line number in source file"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true},{"type":"String","name":"var","description":"Loop variable","required":true}],"anyField":false},"MacroScriptParam":{"type":"MacroScriptParam","javaClass":"com.zetapush.common.messages.macro.MacroScriptParam","fields":[{"type":"List[MacroScriptParamConstraint]","name":"constraints","description":"Optional parameter constraints"},{"type":"String","name":"name","description":"Parameter name"}],"anyField":false},"MacroScriptParamConstraint":{"type":"MacroScriptParamConstraint","javaClass":"com.zetapush.common.messages.macro.MacroScriptParamConstraint","fields":[{"type":"Map[String,Object]","name":"config","description":"Constraint configuration"},{"type":"String","name":"name","description":"Constraint name"}],"anyField":false},"MacroStatement":{"type":"MacroStatement","javaClass":"com.zetapush.common.messages.macro.MacroStatement","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"String","name":"exec","description":"Statement to be executed","required":true},{"type":"int","name":"line","description":"Line number in source file"}],"anyField":false},"MacroStep":{"type":"MacroStep","subTypeMarker":"_type","javaClass":"com.zetapush.common.messages.macro.MacroStep","subtypes":{"call":"MacroCall","macro":"MacroInfo","test":"MacroTest","log":"MacroLog","var":"MacroVariable","loop":"MacroLoop","lf":"MacroLocalFunction","exec":"MacroStatement","jump":"MacroJump"},"fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"}],"anyField":false},"MacroTest":{"type":"MacroTest","javaClass":"com.zetapush.common.messages.macro.MacroTest","fields":[{"type":"String","name":"condition","description":"Macro step condition. when evaluated to true, allows for execution of the steps","required":true},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"MacroBlock","name":"otherwise","description":"Else"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true}],"anyField":false},"MacroVariable":{"type":"MacroVariable","javaClass":"com.zetapush.common.messages.macro.MacroVariable","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"Object","name":"value","description":"value to be evaluated","required":true},{"type":"String","name":"var","description":"Variable identifier","required":true}],"anyField":false},"Type":{"type":"Type","javaClass":"com.zetapush.common.messages.macro.MacroJump.Type","enumValues":[{"name":"BREAK","description":"missing enum desc"},{"name":"CONTINUE","description":"missing enum desc"}],"anyField":false}}}},"responseInfo":{"type":"MacroCompletion","resolved":{"types":{"MacroCompletion":{"type":"MacroCompletion","javaClass":"com.zetapush.common.messages.macro.MacroCompletion","fields":[{"type":"List[ZetaApiError]","name":"errors","description":"Encountered errors. Error reporting behavior can be changed with the hardFail parameter."},{"type":"List[String]","name":"log","description":"Generated debug output, if applicable"},{"type":"String","name":"name","description":"Macro name"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Object","name":"result","description":"Generated result, if applicable"},{"type":"MacroCompletionStats","name":"stats","description":"Execution statistics, when debug is enabled"}],"anyField":false},"MacroCompletionStats":{"type":"MacroCompletionStats","javaClass":"com.zetapush.common.messages.macro.MacroCompletion.MacroCompletionStats","fields":[{"type":"long","name":"cycles","description":"Total number of VM cycles"},{"type":"long","name":"elapsedMillis","description":"Elapsed server time for the execution of the macro"},{"type":"long","name":"nbCalls","description":"Total number of called verbs"},{"type":"long","name":"ram","description":"Total number of RAM bytes"}],"anyField":false},"ZetaApiError":{"type":"ZetaApiError","javaClass":"com.zetapush.common.messages.ZetaApiError","fields":[{"type":"String","name":"code","description":"Symbolic error code"},{"type":"Object","name":"context","description":"Developer-generated context. Each code can have a specific context format."},{"type":"String","name":"location","description":"Error location, if available"},{"type":"String","name":"message","description":"Human readable message. May vary depending on one or more of locale, input, developer code."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"A macro with the given name could not be found."},{"code":"CAPACITY_EXCEEDED","desc":"The macro execution engine allows only a fixed amount of macros to be run concurrently."}]},"traceable":true},{"name":"getPublicHttpUrl","type":{"imports":[]},"returnType":{"typeName":"MacroExecBaseUrl","imports":["com.zetapush.common.messages.macro.MacroExecBaseUrl"]},"desc":"Returns the base HTTP URL for 'macro/exec' in this macro service.","listenerInfo":{"channel":"/service/BU_ID/depId15/getPublicHttpUrl","description":"Returns the base HTTP URL for 'macro/exec' in this macro service.","verb":"getPublicHttpUrl","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"responseInfo":{"type":"MacroExecBaseUrl","resolved":{"types":{"MacroExecBaseUrl":{"type":"MacroExecBaseUrl","javaClass":"com.zetapush.common.messages.macro.MacroExecBaseUrl","fields":[{"type":"String","name":"url"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"A macro with the given name could not be found."},{"code":"CAPACITY_EXCEEDED","desc":"The macro execution engine allows only a fixed amount of macros to be run concurrently."}]},"traceable":false}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId15/call","description":"Plays a previously recorded macro","verb":"call","notes":["DO NOT use this verb from inside an enclosing macro when you need the result in order to proceed with the enclosing macro.","You can override the default notification channel when defining the macro."],"serverOnly":false,"clientOnly":true,"slaveDisabled":false,"paramInfo":{"type":"MacroPlay","resolved":{"types":{"MacroPlay":{"type":"MacroPlay","javaClass":"com.zetapush.common.messages.macro.MacroPlay","fields":[{"type":"int","name":"debug","description":"Deprecated. Use the 'livedebug' API."},{"type":"boolean","name":"hardFail","description":"True if an error should trigger a response on an error channel, or false (the default) if the error should be simply reported in an error field"},{"type":"String","name":"name","description":"Macro name","required":true},{"type":"Map[String,Object]","name":"parameters","description":"Macro named parameters"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"otherOutputs":[{"type":"MacroCompletion","resolved":{"types":{"MacroCompletion":{"type":"MacroCompletion","javaClass":"com.zetapush.common.messages.macro.MacroCompletion","fields":[{"type":"List[ZetaApiError]","name":"errors","description":"Encountered errors. Error reporting behavior can be changed with the hardFail parameter."},{"type":"List[String]","name":"log","description":"Generated debug output, if applicable"},{"type":"String","name":"name","description":"Macro name"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Object","name":"result","description":"Generated result, if applicable"},{"type":"MacroCompletionStats","name":"stats","description":"Execution statistics, when debug is enabled"}],"anyField":false},"MacroCompletionStats":{"type":"MacroCompletionStats","javaClass":"com.zetapush.common.messages.macro.MacroCompletion.MacroCompletionStats","fields":[{"type":"long","name":"cycles","description":"Total number of VM cycles"},{"type":"long","name":"elapsedMillis","description":"Elapsed server time for the execution of the macro"},{"type":"long","name":"nbCalls","description":"Total number of called verbs"},{"type":"long","name":"ram","description":"Total number of RAM bytes"}],"anyField":false},"ZetaApiError":{"type":"ZetaApiError","javaClass":"com.zetapush.common.messages.ZetaApiError","fields":[{"type":"String","name":"code","description":"Symbolic error code"},{"type":"Object","name":"context","description":"Developer-generated context. Each code can have a specific context format."},{"type":"String","name":"location","description":"Error location, if available"},{"type":"String","name":"message","description":"Human readable message. May vary depending on one or more of locale, input, developer code."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false}}},"channel":"completed","target":"","description":"The macro is ran. Upon completion the caller is asynchronously notified.","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"MacroCompletion","imports":["com.zetapush.common.messages.macro.MacroCompletion"]}}],"errors":[{"code":"NOT_FOUND","desc":"A macro with the given name could not be found."},{"code":"CAPACITY_EXCEEDED","desc":"The macro execution engine allows only a fixed amount of macros to be run concurrently."}]}},{"listenerInfo":{"channel":"/service/BU_ID/depId15/evaluate","description":"Evaluates a function result.","verb":"evaluate","serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"MacroFunctionRequest","resolved":{"types":{"MacroFunctionRequest":{"type":"MacroFunctionRequest","javaClass":"com.zetapush.str.services.macro.MacroFunctionRequest","fields":[{"type":"String","name":"name","description":"Function name","required":true},{"type":"List[Object]","name":"params","description":"Function parameter values","required":true}],"anyField":false}}}},"responseInfo":{"type":"MacroFunctionResult","resolved":{"types":{"MacroFunctionResult":{"type":"MacroFunctionResult","javaClass":"com.zetapush.str.services.macro.MacroFunctionResult","fields":[{"type":"Object","name":"result","description":"Function evaluation result"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"A macro with the given name could not be found."},{"code":"CAPACITY_EXCEEDED","desc":"The macro execution engine allows only a fixed amount of macros to be run concurrently."}]},"returnedType":{"typeName":"MacroFunctionResult","imports":["com.zetapush.str.services.macro.MacroFunctionResult"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId15/func","description":"Plays a previously recorded macro and returns the result.","verb":"func","notes":["Use this verb when you want to synchronously call a macro from inside another macro.","Despite being a server verb, func will honor the 'loud' modifier in ZMS."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"MacroPlay","resolved":{"types":{"MacroPlay":{"type":"MacroPlay","javaClass":"com.zetapush.common.messages.macro.MacroPlay","fields":[{"type":"int","name":"debug","description":"Deprecated. Use the 'livedebug' API."},{"type":"boolean","name":"hardFail","description":"True if an error should trigger a response on an error channel, or false (the default) if the error should be simply reported in an error field"},{"type":"String","name":"name","description":"Macro name","required":true},{"type":"Map[String,Object]","name":"parameters","description":"Macro named parameters"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"MacroCompletion","resolved":{"types":{"MacroCompletion":{"type":"MacroCompletion","javaClass":"com.zetapush.common.messages.macro.MacroCompletion","fields":[{"type":"List[ZetaApiError]","name":"errors","description":"Encountered errors. Error reporting behavior can be changed with the hardFail parameter."},{"type":"List[String]","name":"log","description":"Generated debug output, if applicable"},{"type":"String","name":"name","description":"Macro name"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Object","name":"result","description":"Generated result, if applicable"},{"type":"MacroCompletionStats","name":"stats","description":"Execution statistics, when debug is enabled"}],"anyField":false},"MacroCompletionStats":{"type":"MacroCompletionStats","javaClass":"com.zetapush.common.messages.macro.MacroCompletion.MacroCompletionStats","fields":[{"type":"long","name":"cycles","description":"Total number of VM cycles"},{"type":"long","name":"elapsedMillis","description":"Elapsed server time for the execution of the macro"},{"type":"long","name":"nbCalls","description":"Total number of called verbs"},{"type":"long","name":"ram","description":"Total number of RAM bytes"}],"anyField":false},"ZetaApiError":{"type":"ZetaApiError","javaClass":"com.zetapush.common.messages.ZetaApiError","fields":[{"type":"String","name":"code","description":"Symbolic error code"},{"type":"Object","name":"context","description":"Developer-generated context. Each code can have a specific context format."},{"type":"String","name":"location","description":"Error location, if available"},{"type":"String","name":"message","description":"Human readable message. May vary depending on one or more of locale, input, developer code."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"A macro with the given name could not be found."},{"code":"CAPACITY_EXCEEDED","desc":"The macro execution engine allows only a fixed amount of macros to be run concurrently."}]},"returnedType":{"typeName":"MacroCompletion","imports":["com.zetapush.common.messages.macro.MacroCompletion"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId15/sudo","description":"Similar to func, with the ability to impersonate any user at will.","verb":"sudo","deprecation":"Starting with STR v2.3.15 and plugin v1.1.53, all API calls can use the sudo keyword from ZMS macro code.","notes":["Use this verb when you do not want to use or cannot use the standard rights system and wish to bypass it completely.","Use this verb sparingly, as it can give the caller any right on any resource."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"SuMacroPlay","resolved":{"types":{"SuMacroPlay":{"type":"SuMacroPlay","javaClass":"com.zetapush.common.messages.macro.SuMacroPlay","fields":[{"type":"int","name":"debug","description":"Deprecated. Use the 'livedebug' API."},{"type":"boolean","name":"hardFail","description":"True if an error should trigger a response on an error channel, or false (the default) if the error should be simply reported in an error field"},{"type":"String","name":"name","description":"Macro name","required":true},{"type":"Map[String,Object]","name":"parameters","description":"Macro named parameters"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"suKey","description":"Key of the impersonated user","required":true},{"type":"List[MacroInfo]","name":"tempMacros","description":"Temporary macros. This feature does not support concurrent calls."}],"anyField":false},"MacroBlock":{"type":"MacroBlock","javaClass":"com.zetapush.common.messages.macro.MacroBlock","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true}],"anyField":false},"MacroCall":{"type":"MacroCall","javaClass":"com.zetapush.common.messages.macro.MacroCall","fields":[{"type":"String","name":"deploymentId","description":"DeploymentId of the service to be called","required":true},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"boolean","name":"noExpand","description":"Specifies whether parameter expansion should be avoided. The server will of course set this to true automatically if no refs are present. Defaults to false"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the verb. The format is the format expected by the target verb, with the following exception : any field can be replaced by a placeholder. A placeholder is an object with a '__ref' field. The value of the ref field follows java EL syntax with some pre-defined objects and functions (see the documentation on macros)"},{"type":"String","name":"resultName","description":"Name of the result, for future reference"},{"type":"String","name":"suKey","description":"Key of the impersonated user"},{"type":"String","name":"verb","description":"Verb to be called inside the specified service","required":true}],"anyField":false},"MacroFunction":{"type":"MacroFunction","javaClass":"com.zetapush.common.messages.macro.MacroFunction","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"String","name":"name","description":"Function name","required":true},{"type":"List[MacroFunctionParam]","name":"parameters","description":"Function parameters"},{"type":"Object","name":"result","description":"Function result","required":true},{"type":"String","name":"source","description":"source file"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true}],"anyField":false},"MacroFunctionParam":{"type":"MacroFunctionParam","javaClass":"com.zetapush.common.messages.macro.MacroFunctionParam","fields":[{"type":"String","name":"name","description":"Parameter name"}],"anyField":false},"MacroInfo":{"type":"MacroInfo","javaClass":"com.zetapush.common.messages.macro.MacroInfo","fields":[{"type":"boolean","name":"broadcast","description":"Whether to broadcast to all the user's sessions, or just to the asking session. Defaults to false (request-response paradigm)."},{"type":"String","name":"channel","description":"Optional return channel. Defaults to completed"},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"String","name":"name","description":"Macro name","required":true},{"type":"List[MacroScriptParam]","name":"params","description":"Optional parameter specifications"},{"type":"Map[String,Object]","name":"result","description":"Optional macro result"},{"type":"List[MacroScriptParam]","name":"returned","description":"Optional output field specifications"},{"type":"String","name":"source","description":"source file (for debug)"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true},{"type":"Object","name":"target","description":"Target for the response (the syntax is the same as in messaging.send). Overrides 'broadcast' when set."},{"type":"String","name":"userKey","description":"Setting this field effectively overrides the __userKey pseudo-constant for the duration of the macro. All non-sudoed internal calls will behave as if sudoed with the given user key. When this field is set, there is not point in calling this macro with sudo"}],"anyField":false},"MacroJump":{"type":"MacroJump","javaClass":"com.zetapush.common.messages.macro.MacroJump","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"Type","name":"type","description":"jump type","required":true}],"anyField":false},"MacroLocalFunction":{"type":"MacroLocalFunction","javaClass":"com.zetapush.common.messages.macro.MacroLocalFunction","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"MacroFunction","name":"f","description":"Function definition","required":true},{"type":"int","name":"line","description":"Line number in source file"},{"type":"String","name":"var","description":"Function local name","required":true}],"anyField":false},"MacroLog":{"type":"MacroLog","javaClass":"com.zetapush.common.messages.macro.MacroLog","fields":[{"type":"Object","name":"data","description":"Data to be logged. The server will fail to produce an accurate result if the actual evaluated data is too big."},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"}],"anyField":false},"MacroLoop":{"type":"MacroLoop","javaClass":"com.zetapush.common.messages.macro.MacroLoop","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"String","name":"items","description":"Collection to iterate on","required":true},{"type":"int","name":"line","description":"Line number in source file"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true},{"type":"String","name":"var","description":"Loop variable","required":true}],"anyField":false},"MacroScriptParam":{"type":"MacroScriptParam","javaClass":"com.zetapush.common.messages.macro.MacroScriptParam","fields":[{"type":"List[MacroScriptParamConstraint]","name":"constraints","description":"Optional parameter constraints"},{"type":"String","name":"name","description":"Parameter name"}],"anyField":false},"MacroScriptParamConstraint":{"type":"MacroScriptParamConstraint","javaClass":"com.zetapush.common.messages.macro.MacroScriptParamConstraint","fields":[{"type":"Map[String,Object]","name":"config","description":"Constraint configuration"},{"type":"String","name":"name","description":"Constraint name"}],"anyField":false},"MacroStatement":{"type":"MacroStatement","javaClass":"com.zetapush.common.messages.macro.MacroStatement","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"String","name":"exec","description":"Statement to be executed","required":true},{"type":"int","name":"line","description":"Line number in source file"}],"anyField":false},"MacroStep":{"type":"MacroStep","subTypeMarker":"_type","javaClass":"com.zetapush.common.messages.macro.MacroStep","subtypes":{"call":"MacroCall","macro":"MacroInfo","test":"MacroTest","log":"MacroLog","var":"MacroVariable","loop":"MacroLoop","lf":"MacroLocalFunction","exec":"MacroStatement","jump":"MacroJump"},"fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"}],"anyField":false},"MacroTest":{"type":"MacroTest","javaClass":"com.zetapush.common.messages.macro.MacroTest","fields":[{"type":"String","name":"condition","description":"Macro step condition. when evaluated to true, allows for execution of the steps","required":true},{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"MacroBlock","name":"otherwise","description":"Else"},{"type":"List[MacroStep]","name":"steps","description":"Sub steps, sequentially executed","required":true}],"anyField":false},"MacroVariable":{"type":"MacroVariable","javaClass":"com.zetapush.common.messages.macro.MacroVariable","fields":[{"type":"String","name":"description","description":"Informative text, for the macro creator. You SHOULD always fill this field, as reported errors will include this description."},{"type":"int","name":"line","description":"Line number in source file"},{"type":"Object","name":"value","description":"value to be evaluated","required":true},{"type":"String","name":"var","description":"Variable identifier","required":true}],"anyField":false},"Type":{"type":"Type","javaClass":"com.zetapush.common.messages.macro.MacroJump.Type","enumValues":[{"name":"BREAK","description":"missing enum desc"},{"name":"CONTINUE","description":"missing enum desc"}],"anyField":false}}}},"responseInfo":{"type":"MacroCompletion","resolved":{"types":{"MacroCompletion":{"type":"MacroCompletion","javaClass":"com.zetapush.common.messages.macro.MacroCompletion","fields":[{"type":"List[ZetaApiError]","name":"errors","description":"Encountered errors. Error reporting behavior can be changed with the hardFail parameter."},{"type":"List[String]","name":"log","description":"Generated debug output, if applicable"},{"type":"String","name":"name","description":"Macro name"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Object","name":"result","description":"Generated result, if applicable"},{"type":"MacroCompletionStats","name":"stats","description":"Execution statistics, when debug is enabled"}],"anyField":false},"MacroCompletionStats":{"type":"MacroCompletionStats","javaClass":"com.zetapush.common.messages.macro.MacroCompletion.MacroCompletionStats","fields":[{"type":"long","name":"cycles","description":"Total number of VM cycles"},{"type":"long","name":"elapsedMillis","description":"Elapsed server time for the execution of the macro"},{"type":"long","name":"nbCalls","description":"Total number of called verbs"},{"type":"long","name":"ram","description":"Total number of RAM bytes"}],"anyField":false},"ZetaApiError":{"type":"ZetaApiError","javaClass":"com.zetapush.common.messages.ZetaApiError","fields":[{"type":"String","name":"code","description":"Symbolic error code"},{"type":"Object","name":"context","description":"Developer-generated context. Each code can have a specific context format."},{"type":"String","name":"location","description":"Error location, if available"},{"type":"String","name":"message","description":"Human readable message. May vary depending on one or more of locale, input, developer code."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"A macro with the given name could not be found."},{"code":"CAPACITY_EXCEEDED","desc":"The macro execution engine allows only a fixed amount of macros to be run concurrently."}]},"returnedType":{"typeName":"MacroCompletion","imports":["com.zetapush.common.messages.macro.MacroCompletion"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId15/getPublicHttpUrl","description":"Returns the base HTTP URL for 'macro/exec' in this macro service.","verb":"getPublicHttpUrl","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"responseInfo":{"type":"MacroExecBaseUrl","resolved":{"types":{"MacroExecBaseUrl":{"type":"MacroExecBaseUrl","javaClass":"com.zetapush.common.messages.macro.MacroExecBaseUrl","fields":[{"type":"String","name":"url"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"A macro with the given name could not be found."},{"code":"CAPACITY_EXCEEDED","desc":"The macro execution engine allows only a fixed amount of macros to be run concurrently."}]},"returnedType":{"typeName":"MacroExecBaseUrl","imports":["com.zetapush.common.messages.macro.MacroExecBaseUrl"]}}]},{"clazz":"com.zetapush.str.services.template.TemplateManagementService","name":"TemplateManagement","itemId":"template","desc":"User API for templates management","notes":["Users use this API to configure templates."],"verbs":[{"name":"add","type":{"typeName":"LocalizedTemplateCreation","imports":["com.zetapush.common.messages.template.LocalizedTemplateCreation"]},"desc":"Creates a localized template","notes":["Creates a new localized template for the given 'name' and 'languageTag' (IETF BCP 47), replacing an existing one if it already exists. The default template for the given 'name' must exist."],"verbInfo":{"desc":"Creates a localized template","deprecation":"","notes":["Creates a new localized template for the given 'name' and 'languageTag' (IETF BCP 47), replacing an existing one if it already exists. The default template for the given 'name' must exist."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId21/add","description":"Creates a localized template","verb":"add","notes":["Creates a new localized template for the given 'name' and 'languageTag' (IETF BCP 47), replacing an existing one if it already exists. The default template for the given 'name' must exist."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"LocalizedTemplateCreation","resolved":{"types":{"LocalizedTemplateCreation":{"type":"LocalizedTemplateCreation","javaClass":"com.zetapush.common.messages.template.LocalizedTemplateCreation","fields":[{"type":"String","name":"languageTag","description":"IETF BCP 47 language tag","required":true},{"type":"String","name":"name","description":"template name","required":true},{"type":"String","name":"template","description":"template contents, as a character string","required":true}],"anyField":false}}}},"errors":[]},"traceable":false},{"name":"delete","type":{"typeName":"TemplateRemoval","imports":["com.zetapush.common.messages.template.TemplateRemoval"]},"desc":"Removes a template","notes":["Removes an existing localized template for the given 'name' and 'languageTag'.","If you omit the languageTag, all localizations will be removed, including the default."],"verbInfo":{"desc":"Removes a template","deprecation":"","notes":["Removes an existing localized template for the given 'name' and 'languageTag'.","If you omit the languageTag, all localizations will be removed, including the default."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId21/delete","description":"Removes a template","verb":"delete","notes":["Removes an existing localized template for the given 'name' and 'languageTag'.","If you omit the languageTag, all localizations will be removed, including the default."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TemplateRemoval","resolved":{"types":{"TemplateRemoval":{"type":"TemplateRemoval","javaClass":"com.zetapush.common.messages.template.TemplateRemoval","fields":[{"type":"String","name":"languageTag","description":"IETF BCP 47 language tag"},{"type":"String","name":"name","description":"template name","required":true}],"anyField":false}}}},"errors":[]},"traceable":false},{"name":"create","type":{"typeName":"TemplateCreation","imports":["com.zetapush.common.messages.template.TemplateCreation"]},"desc":"Creates a template","notes":["Creates a new default template for the given 'name', replacing an existing one if it already exists."],"verbInfo":{"desc":"Creates a template","deprecation":"","notes":["Creates a new default template for the given 'name', replacing an existing one if it already exists."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId21/create","description":"Creates a template","verb":"create","notes":["Creates a new default template for the given 'name', replacing an existing one if it already exists."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TemplateCreation","resolved":{"types":{"TemplateCreation":{"type":"TemplateCreation","javaClass":"com.zetapush.common.messages.template.TemplateCreation","fields":[{"type":"String","name":"name","description":"template name","required":true},{"type":"String","name":"template","description":"template contents, as a character string","required":true}],"anyField":false}}}},"errors":[]},"traceable":false},{"name":"list","type":{"typeName":"TemplateListRequest","imports":["com.zetapush.common.messages.template.TemplateListRequest"]},"returnType":{"typeName":"TemplateListResult","imports":["com.zetapush.common.messages.template.TemplateListResult"]},"desc":"Lists template information","notes":["Returns a paginated list of previously uploaded template information."],"verbInfo":{"desc":"Lists template information","deprecation":"","notes":["Returns a paginated list of previously uploaded template information."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId21/list","description":"Lists template information","verb":"list","notes":["Returns a paginated list of previously uploaded template information."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TemplateListRequest","resolved":{"types":{"TemplateListRequest":{"type":"TemplateListRequest","javaClass":"com.zetapush.common.messages.template.TemplateListRequest","fields":[{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"TemplateListResult","resolved":{"types":{"TemplateListResult":{"type":"TemplateListResult","javaClass":"com.zetapush.common.messages.template.TemplateListResult","fields":[{"type":"TemplateListRequest","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"PageContent[TemplateInfo]","name":"result","description":"Result for the specified request"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"TemplateInfo":{"type":"TemplateInfo","javaClass":"com.zetapush.common.messages.template.TemplateInfo","fields":[{"type":"List[String]","name":"languageTags","description":"List of languages for which a localization of the template exists"},{"type":"String","name":"name","description":"Template name"}],"anyField":false},"TemplateListRequest":{"type":"TemplateListRequest","javaClass":"com.zetapush.common.messages.template.TemplateListRequest","fields":[{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":false}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId21/add","description":"Creates a localized template","verb":"add","notes":["Creates a new localized template for the given 'name' and 'languageTag' (IETF BCP 47), replacing an existing one if it already exists. The default template for the given 'name' must exist."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"LocalizedTemplateCreation","resolved":{"types":{"LocalizedTemplateCreation":{"type":"LocalizedTemplateCreation","javaClass":"com.zetapush.common.messages.template.LocalizedTemplateCreation","fields":[{"type":"String","name":"languageTag","description":"IETF BCP 47 language tag","required":true},{"type":"String","name":"name","description":"template name","required":true},{"type":"String","name":"template","description":"template contents, as a character string","required":true}],"anyField":false}}}},"errors":[]}},{"listenerInfo":{"channel":"/service/BU_ID/depId21/delete","description":"Removes a template","verb":"delete","notes":["Removes an existing localized template for the given 'name' and 'languageTag'.","If you omit the languageTag, all localizations will be removed, including the default."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TemplateRemoval","resolved":{"types":{"TemplateRemoval":{"type":"TemplateRemoval","javaClass":"com.zetapush.common.messages.template.TemplateRemoval","fields":[{"type":"String","name":"languageTag","description":"IETF BCP 47 language tag"},{"type":"String","name":"name","description":"template name","required":true}],"anyField":false}}}},"errors":[]}},{"listenerInfo":{"channel":"/service/BU_ID/depId21/create","description":"Creates a template","verb":"create","notes":["Creates a new default template for the given 'name', replacing an existing one if it already exists."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TemplateCreation","resolved":{"types":{"TemplateCreation":{"type":"TemplateCreation","javaClass":"com.zetapush.common.messages.template.TemplateCreation","fields":[{"type":"String","name":"name","description":"template name","required":true},{"type":"String","name":"template","description":"template contents, as a character string","required":true}],"anyField":false}}}},"errors":[]}},{"listenerInfo":{"channel":"/service/BU_ID/depId21/list","description":"Lists template information","verb":"list","notes":["Returns a paginated list of previously uploaded template information."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TemplateListRequest","resolved":{"types":{"TemplateListRequest":{"type":"TemplateListRequest","javaClass":"com.zetapush.common.messages.template.TemplateListRequest","fields":[{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"TemplateListResult","resolved":{"types":{"TemplateListResult":{"type":"TemplateListResult","javaClass":"com.zetapush.common.messages.template.TemplateListResult","fields":[{"type":"TemplateListRequest","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"PageContent[TemplateInfo]","name":"result","description":"Result for the specified request"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"TemplateInfo":{"type":"TemplateInfo","javaClass":"com.zetapush.common.messages.template.TemplateInfo","fields":[{"type":"List[String]","name":"languageTags","description":"List of languages for which a localization of the template exists"},{"type":"String","name":"name","description":"Template name"}],"anyField":false},"TemplateListRequest":{"type":"TemplateListRequest","javaClass":"com.zetapush.common.messages.template.TemplateListRequest","fields":[{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"TemplateListResult","imports":["com.zetapush.common.messages.template.TemplateListResult"]}}]},{"clazz":"com.zetapush.str.service.game.impl.GameEngineApiImpl","name":"GameEngine","itemId":"game","desc":"Game Engine API","notes":["The Game Engine API is for game engine clients, not end-users."],"verbs":[{"name":"unjoin_result","type":{"typeName":"GameJoinResponse","imports":["com.zetapush.common.messages.gameengine.GameJoinResponse"]},"desc":"Notify the result for an unjoin request","notes":["A Game Engine notifies the STR of the result of an unjoin request that it received on unjoin_callback"],"verbInfo":{"desc":"Notify the result for an unjoin request","deprecation":"","notes":["A Game Engine notifies the STR of the result of an unjoin request that it received on unjoin_callback"],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId19/unjoin_result","description":"Notify the result for an unjoin request","verb":"unjoin_result","notes":["A Game Engine notifies the STR of the result of an unjoin request that it received on unjoin_callback"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameJoinResponse","resolved":{"types":{"GameJoinResponse":{"type":"GameJoinResponse","javaClass":"com.zetapush.common.messages.gameengine.GameJoinResponse","fields":[{"type":"String","name":"callerId","description":"caller ID from the original request"},{"type":"String","name":"error","description":"error message"},{"type":"String","name":"msgId","description":"unique ID for this message, matching the request ID"},{"type":"GameJoin","name":"payload","description":"response payload"}],"anyField":false},"GameJoin":{"type":"GameJoin","javaClass":"com.zetapush.common.messages.game.GameJoin","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"role","description":"Optional role for the player. Meaning is game specific"},{"type":"String","name":"userId","description":"User unique key"},{"type":"String","name":"userName","description":"Player name inside the game"}],"anyField":false}}}},"errors":[]},"traceable":false},{"name":"start_result","type":{"typeName":"GameStart","imports":["com.zetapush.common.messages.game.GameStart"]},"desc":"Notify the result for a start request","notes":["A Game Engine notifies the STR of the result of a start request that it received on start_callback"],"verbInfo":{"desc":"Notify the result for a start request","deprecation":"","notes":["A Game Engine notifies the STR of the result of a start request that it received on start_callback"],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId19/start_result","description":"Notify the result for a start request","verb":"start_result","notes":["A Game Engine notifies the STR of the result of a start request that it received on start_callback"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameStart","resolved":{"types":{"GameStart":{"type":"GameStart","javaClass":"com.zetapush.common.messages.game.GameStart","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"}],"anyField":false}}}},"errors":[]},"traceable":false},{"name":"organize_result","type":{"typeName":"GameOrganizationResponse","imports":["com.zetapush.common.messages.gameengine.GameOrganizationResponse"]},"desc":"Notify the result for an organization request","notes":["A Game Engine notifies the STR of the result of an organization request that it received on organize_callback"],"verbInfo":{"desc":"Notify the result for an organization request","deprecation":"","notes":["A Game Engine notifies the STR of the result of an organization request that it received on organize_callback"],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId19/organize_result","description":"Notify the result for an organization request","verb":"organize_result","notes":["A Game Engine notifies the STR of the result of an organization request that it received on organize_callback"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameOrganizationResponse","resolved":{"types":{"GameOrganizationResponse":{"type":"GameOrganizationResponse","javaClass":"com.zetapush.common.messages.gameengine.GameOrganizationResponse","fields":[{"type":"String","name":"callerId","description":"caller ID from the original request"},{"type":"String","name":"error","description":"error message"},{"type":"String","name":"msgId","description":"unique ID for this message, matching the request ID"},{"type":"GameOrganization","name":"payload","description":"response payload"}],"anyField":false},"GameOrganization":{"type":"GameOrganization","javaClass":"com.zetapush.common.messages.game.GameOrganization","fields":[{"type":"String","name":"gameId","description":"Game identifier"},{"type":"Map[String,Object]","name":"options","description":"Game creation options"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"GameType","name":"type","description":"Game type","required":true}],"anyField":false},"GameType":{"type":"GameType","javaClass":"com.zetapush.common.messages.game.GameType","fields":[{"type":"String","name":"description","description":"Game description"},{"type":"String","name":"name","description":"Game type identifier"}],"anyField":false}}}},"errors":[]},"traceable":false},{"name":"join_result","type":{"typeName":"GameJoinResponse","imports":["com.zetapush.common.messages.gameengine.GameJoinResponse"]},"desc":"Notify the result for a join request","notes":["A Game Engine notifies the STR of the result of a join request that it received on join_callback"],"verbInfo":{"desc":"Notify the result for a join request","deprecation":"","notes":["A Game Engine notifies the STR of the result of a join request that it received on join_callback"],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId19/join_result","description":"Notify the result for a join request","verb":"join_result","notes":["A Game Engine notifies the STR of the result of a join request that it received on join_callback"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameJoinResponse","resolved":{"types":{"GameJoinResponse":{"type":"GameJoinResponse","javaClass":"com.zetapush.common.messages.gameengine.GameJoinResponse","fields":[{"type":"String","name":"callerId","description":"caller ID from the original request"},{"type":"String","name":"error","description":"error message"},{"type":"String","name":"msgId","description":"unique ID for this message, matching the request ID"},{"type":"GameJoin","name":"payload","description":"response payload"}],"anyField":false},"GameJoin":{"type":"GameJoin","javaClass":"com.zetapush.common.messages.game.GameJoin","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"role","description":"Optional role for the player. Meaning is game specific"},{"type":"String","name":"userId","description":"User unique key"},{"type":"String","name":"userName","description":"Player name inside the game"}],"anyField":false}}}},"errors":[]},"traceable":false},{"name":"register","type":{"typeName":"GameRunnerRegistration","imports":["com.zetapush.common.messages.game.GameRunnerRegistration"]},"desc":"Registers a game engine","notes":["A client registers itself to the STR as a Game Engine.","The STR may, from now on, dispatch game of the given game type to said client.","Unregistration is done automatically on logoff."],"verbInfo":{"desc":"Registers a game engine","deprecation":"","notes":["A client registers itself to the STR as a Game Engine.","The STR may, from now on, dispatch game of the given game type to said client.","Unregistration is done automatically on logoff."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId19/register","description":"Registers a game engine","verb":"register","notes":["A client registers itself to the STR as a Game Engine.","The STR may, from now on, dispatch game of the given game type to said client.","Unregistration is done automatically on logoff."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameRunnerRegistration","resolved":{"types":{"GameRunnerRegistration":{"type":"GameRunnerRegistration","javaClass":"com.zetapush.common.messages.game.GameRunnerRegistration","fields":[{"type":"GameInfo","name":"gameInfo","description":"Game Type information","required":true},{"type":"GameRunnerFullLocation","name":"location","description":"Location of the engine. The server will fill it if left null."},{"type":"int","name":"maxGames","description":"Maximum number of simultaneous games that the registering runner can handle"}],"anyField":false},"GameInfo":{"type":"GameInfo","javaClass":"com.zetapush.common.messages.game.GameInfo","fields":[{"type":"Map[String,String]","name":"commands","description":"Available commands when playing"},{"type":"String","name":"description","description":"Game description"},{"type":"String","name":"name","description":"Game type identifier"},{"type":"Map[String,String]","name":"options","description":"Available options whan creating"}],"anyField":false},"GameRunnerFullLocation":{"type":"GameRunnerFullLocation","javaClass":"com.zetapush.common.messages.game.GameRunnerFullLocation","fields":[{"type":"String","name":"requestChannel","description":"Reserved for future use"},{"type":"String","name":"responseChannel","description":"Reserved for future use"},{"type":"String","name":"sessionId","description":"Session identifier of the game engine. Server-attributed"},{"type":"String","name":"setiId","description":"Seti identifier of the game engine. Server-attributed"}],"anyField":false}}}},"errors":[]},"traceable":false},{"name":"state","type":{"typeName":"GameState","imports":["com.zetapush.common.messages.game.GameState"]},"desc":"Notify a game event","notes":["A Game Engine notifies the STR of some arbitrary game event."],"verbInfo":{"desc":"Notify a game event","deprecation":"","notes":["A Game Engine notifies the STR of some arbitrary game event."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId19/state","description":"Notify a game event","verb":"state","notes":["A Game Engine notifies the STR of some arbitrary game event."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameState","resolved":{"types":{"GameState":{"type":"GameState","javaClass":"com.zetapush.common.messages.game.GameState","fields":[{"type":"Map[String,Object]","name":"data","description":"Game specific data"},{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"GameStatus","name":"status","description":"Current game status"}],"anyField":false},"GameStatus":{"type":"GameStatus","javaClass":"com.zetapush.common.messages.game.GameStatus","enumValues":[{"name":"RUNNING","description":"The game is running"},{"name":"FINISHED","description":"The game is finished"},{"name":"CREATED","description":"The game has been created"},{"name":"STARTING","description":"The game is starting"}],"anyField":false}}}},"errors":[]},"traceable":false}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId19/unjoin_result","description":"Notify the result for an unjoin request","verb":"unjoin_result","notes":["A Game Engine notifies the STR of the result of an unjoin request that it received on unjoin_callback"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameJoinResponse","resolved":{"types":{"GameJoinResponse":{"type":"GameJoinResponse","javaClass":"com.zetapush.common.messages.gameengine.GameJoinResponse","fields":[{"type":"String","name":"callerId","description":"caller ID from the original request"},{"type":"String","name":"error","description":"error message"},{"type":"String","name":"msgId","description":"unique ID for this message, matching the request ID"},{"type":"GameJoin","name":"payload","description":"response payload"}],"anyField":false},"GameJoin":{"type":"GameJoin","javaClass":"com.zetapush.common.messages.game.GameJoin","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"role","description":"Optional role for the player. Meaning is game specific"},{"type":"String","name":"userId","description":"User unique key"},{"type":"String","name":"userName","description":"Player name inside the game"}],"anyField":false}}}},"errors":[]}},{"listenerInfo":{"channel":"/service/BU_ID/depId19/start_result","description":"Notify the result for a start request","verb":"start_result","notes":["A Game Engine notifies the STR of the result of a start request that it received on start_callback"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameStart","resolved":{"types":{"GameStart":{"type":"GameStart","javaClass":"com.zetapush.common.messages.game.GameStart","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"}],"anyField":false}}}},"errors":[]}},{"listenerInfo":{"channel":"/service/BU_ID/depId19/organize_result","description":"Notify the result for an organization request","verb":"organize_result","notes":["A Game Engine notifies the STR of the result of an organization request that it received on organize_callback"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameOrganizationResponse","resolved":{"types":{"GameOrganizationResponse":{"type":"GameOrganizationResponse","javaClass":"com.zetapush.common.messages.gameengine.GameOrganizationResponse","fields":[{"type":"String","name":"callerId","description":"caller ID from the original request"},{"type":"String","name":"error","description":"error message"},{"type":"String","name":"msgId","description":"unique ID for this message, matching the request ID"},{"type":"GameOrganization","name":"payload","description":"response payload"}],"anyField":false},"GameOrganization":{"type":"GameOrganization","javaClass":"com.zetapush.common.messages.game.GameOrganization","fields":[{"type":"String","name":"gameId","description":"Game identifier"},{"type":"Map[String,Object]","name":"options","description":"Game creation options"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"GameType","name":"type","description":"Game type","required":true}],"anyField":false},"GameType":{"type":"GameType","javaClass":"com.zetapush.common.messages.game.GameType","fields":[{"type":"String","name":"description","description":"Game description"},{"type":"String","name":"name","description":"Game type identifier"}],"anyField":false}}}},"errors":[]}},{"listenerInfo":{"channel":"/service/BU_ID/depId19/join_result","description":"Notify the result for a join request","verb":"join_result","notes":["A Game Engine notifies the STR of the result of a join request that it received on join_callback"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameJoinResponse","resolved":{"types":{"GameJoinResponse":{"type":"GameJoinResponse","javaClass":"com.zetapush.common.messages.gameengine.GameJoinResponse","fields":[{"type":"String","name":"callerId","description":"caller ID from the original request"},{"type":"String","name":"error","description":"error message"},{"type":"String","name":"msgId","description":"unique ID for this message, matching the request ID"},{"type":"GameJoin","name":"payload","description":"response payload"}],"anyField":false},"GameJoin":{"type":"GameJoin","javaClass":"com.zetapush.common.messages.game.GameJoin","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"role","description":"Optional role for the player. Meaning is game specific"},{"type":"String","name":"userId","description":"User unique key"},{"type":"String","name":"userName","description":"Player name inside the game"}],"anyField":false}}}},"errors":[]}},{"listenerInfo":{"channel":"/service/BU_ID/depId19/register","description":"Registers a game engine","verb":"register","notes":["A client registers itself to the STR as a Game Engine.","The STR may, from now on, dispatch game of the given game type to said client.","Unregistration is done automatically on logoff."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameRunnerRegistration","resolved":{"types":{"GameRunnerRegistration":{"type":"GameRunnerRegistration","javaClass":"com.zetapush.common.messages.game.GameRunnerRegistration","fields":[{"type":"GameInfo","name":"gameInfo","description":"Game Type information","required":true},{"type":"GameRunnerFullLocation","name":"location","description":"Location of the engine. The server will fill it if left null."},{"type":"int","name":"maxGames","description":"Maximum number of simultaneous games that the registering runner can handle"}],"anyField":false},"GameInfo":{"type":"GameInfo","javaClass":"com.zetapush.common.messages.game.GameInfo","fields":[{"type":"Map[String,String]","name":"commands","description":"Available commands when playing"},{"type":"String","name":"description","description":"Game description"},{"type":"String","name":"name","description":"Game type identifier"},{"type":"Map[String,String]","name":"options","description":"Available options whan creating"}],"anyField":false},"GameRunnerFullLocation":{"type":"GameRunnerFullLocation","javaClass":"com.zetapush.common.messages.game.GameRunnerFullLocation","fields":[{"type":"String","name":"requestChannel","description":"Reserved for future use"},{"type":"String","name":"responseChannel","description":"Reserved for future use"},{"type":"String","name":"sessionId","description":"Session identifier of the game engine. Server-attributed"},{"type":"String","name":"setiId","description":"Seti identifier of the game engine. Server-attributed"}],"anyField":false}}}},"errors":[]}},{"listenerInfo":{"channel":"/service/BU_ID/depId19/state","description":"Notify a game event","verb":"state","notes":["A Game Engine notifies the STR of some arbitrary game event."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameState","resolved":{"types":{"GameState":{"type":"GameState","javaClass":"com.zetapush.common.messages.game.GameState","fields":[{"type":"Map[String,Object]","name":"data","description":"Game specific data"},{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"GameStatus","name":"status","description":"Current game status"}],"anyField":false},"GameStatus":{"type":"GameStatus","javaClass":"com.zetapush.common.messages.game.GameStatus","enumValues":[{"name":"RUNNING","description":"The game is running"},{"name":"FINISHED","description":"The game is finished"},{"name":"CREATED","description":"The game has been created"},{"name":"STARTING","description":"The game is starting"}],"anyField":false}}}},"errors":[]}}]},{"clazz":"com.zetapush.str.services.httpclient.HttpClientService","name":"Httpclient","itemId":"httpclient","desc":"User API for http requests","notes":[],"verbs":[{"name":"call","type":{"typeName":"HttpClientCall","imports":["com.zetapush.common.messages.httpclient.HttpClientCall"]},"returnType":{"typeName":"HttpClientResponse","imports":["com.zetapush.common.messages.httpclient.HttpClientResponse"]},"desc":"Makes a predefined request","notes":["Lookups a predefined request by name, and executes it."],"verbInfo":{"desc":"Makes a predefined request","deprecation":"","notes":["Lookups a predefined request by name, and executes it."],"relatedClasses":[],"errors":[{"code":"NOT_FOUND","desc":"The predefined request was not found."},{"code":"BAD_FORMAT","desc":"The given body could not be converted to a stream of bytes."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId18/call","description":"Makes a predefined request","verb":"call","notes":["Lookups a predefined request by name, and executes it."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"HttpClientCall","resolved":{"types":{"HttpClientCall":{"type":"HttpClientCall","javaClass":"com.zetapush.common.messages.httpclient.HttpClientCall","fields":[{"type":"String","name":"name","description":"name of the configured template","required":true},{"type":"String","name":"requestId","description":"optional client generated call ID to identify responses"}],"anyField":false}}}},"responseInfo":{"type":"HttpClientResponse","resolved":{"types":{"HttpClientResponse":{"type":"HttpClientResponse","javaClass":"com.zetapush.common.messages.httpclient.HttpClientResponse","fields":[{"type":"Object","name":"content","description":"received content"},{"type":"List[HttpClientHeader]","name":"headers","description":"received headers"},{"type":"int","name":"httpStatus","description":"response http status code"},{"type":"String","name":"requestId","description":"optional client generated call ID to identify responses"}],"anyField":false},"HttpClientHeader":{"type":"HttpClientHeader","javaClass":"com.zetapush.common.messages.httpclient.HttpClientHeader","fields":[{"type":"String","name":"name","description":"Header name","required":true},{"type":"String","name":"value","description":"Header value"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"The predefined request was not found."},{"code":"BAD_FORMAT","desc":"The given body could not be converted to a stream of bytes."}]},"traceable":false},{"name":"request","type":{"typeName":"HttpClientRequest","imports":["com.zetapush.common.messages.httpclient.HttpClientRequest"]},"returnType":{"typeName":"HttpClientResponse","imports":["com.zetapush.common.messages.httpclient.HttpClientResponse"]},"desc":"Makes a parameterized request","notes":["Executes an HTTP request with the given url, method, headers and body."],"verbInfo":{"desc":"Makes a parameterized request","deprecation":"","notes":["Executes an HTTP request with the given url, method, headers and body."],"relatedClasses":[],"errors":[{"code":"NOT_FOUND","desc":"The predefined request was not found."},{"code":"BAD_FORMAT","desc":"The given body could not be converted to a stream of bytes."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId18/request","description":"Makes a parameterized request","verb":"request","notes":["Executes an HTTP request with the given url, method, headers and body."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"HttpClientRequest","resolved":{"types":{"HttpClientRequest":{"type":"HttpClientRequest","javaClass":"com.zetapush.common.messages.httpclient.HttpClientRequest","fields":[{"type":"Object","name":"content","description":"Request body. String (passed as is) or complex object (serialized to json)"},{"type":"List[HttpClientHeader]","name":"headers","description":"Headers to be sent"},{"type":"String","name":"method","description":"HTTP method","required":true},{"type":"HttpClientParseMode","name":"parseMode","description":"How to parse the response content","required":true},{"type":"String","name":"requestId","description":"optional client generated call ID to identify responses"},{"type":"String","name":"url","description":"Remote URL. a literal string","required":true}],"anyField":false},"HttpClientHeader":{"type":"HttpClientHeader","javaClass":"com.zetapush.common.messages.httpclient.HttpClientHeader","fields":[{"type":"String","name":"name","description":"Header name","required":true},{"type":"String","name":"value","description":"Header value"}],"anyField":false},"HttpClientParseMode":{"type":"HttpClientParseMode","javaClass":"com.zetapush.common.messages.httpclient.HttpClientParseMode","enumValues":[{"name":"STRING","description":"Content is interpreted as a UTF8 character string"},{"name":"OBJECT","description":"Content is parsed as UTF8 JSON"},{"name":"BYTES","description":"Content is not interpreted, but available as a raw array of bytes"}],"anyField":false}}}},"responseInfo":{"type":"HttpClientResponse","resolved":{"types":{"HttpClientResponse":{"type":"HttpClientResponse","javaClass":"com.zetapush.common.messages.httpclient.HttpClientResponse","fields":[{"type":"Object","name":"content","description":"received content"},{"type":"List[HttpClientHeader]","name":"headers","description":"received headers"},{"type":"int","name":"httpStatus","description":"response http status code"},{"type":"String","name":"requestId","description":"optional client generated call ID to identify responses"}],"anyField":false},"HttpClientHeader":{"type":"HttpClientHeader","javaClass":"com.zetapush.common.messages.httpclient.HttpClientHeader","fields":[{"type":"String","name":"name","description":"Header name","required":true},{"type":"String","name":"value","description":"Header value"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"The predefined request was not found."},{"code":"BAD_FORMAT","desc":"The given body could not be converted to a stream of bytes."}]},"traceable":true},{"name":"soap","type":{"typeName":"HttpClientSOAPRequest","imports":["com.zetapush.common.messages.httpclient.HttpClientSOAPRequest"]},"returnType":{"typeName":"HttpClientSOAPResponse","imports":["com.zetapush.common.messages.httpclient.HttpClientSOAPResponse"]},"desc":"Makes a soap request","notes":["Executes an HTTP SOAP request with the given url, method, headers and body."],"verbInfo":{"desc":"Makes a soap request","deprecation":"","notes":["Executes an HTTP SOAP request with the given url, method, headers and body."],"relatedClasses":[],"errors":[{"code":"NOT_FOUND","desc":"The predefined request was not found."},{"code":"BAD_FORMAT","desc":"The given body could not be converted to a stream of bytes."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId18/soap","description":"Makes a soap request","verb":"soap","notes":["Executes an HTTP SOAP request with the given url, method, headers and body."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"HttpClientSOAPRequest","resolved":{"types":{"HttpClientSOAPRequest":{"type":"HttpClientSOAPRequest","javaClass":"com.zetapush.common.messages.httpclient.HttpClientSOAPRequest","fields":[{"type":"Object","name":"content","description":"Request body. String (passed as is) or complex object (serialized to json)"},{"type":"List[HttpClientHeader]","name":"headers","description":"Headers to be sent"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"requestWrapperNamespace","description":"Use when the xml root type does not declare any namespace, but does need it"},{"type":"String","name":"soapAction","description":"SOAP action, as defined in the WSDL, for inclusion in the generated request headers"},{"type":"List[SoapFaultDefinition]","name":"soapFaults","description":"List of possible soap fault classes for this request"},{"type":"List[Object]","name":"soapHeaders","description":"Soap headers : the content of &lt;soapenv:Header&gt;"},{"type":"MacroTypeDefinition","name":"typeDefinition","description":"Type reference, as returned in ZMS by 'YourClassName.class' "},{"type":"String","name":"url","description":"Remote URL. a literal string","required":true}],"anyField":false},"HttpClientHeader":{"type":"HttpClientHeader","javaClass":"com.zetapush.common.messages.httpclient.HttpClientHeader","fields":[{"type":"String","name":"name","description":"Header name","required":true},{"type":"String","name":"value","description":"Header value"}],"anyField":false},"MacroScriptParam":{"type":"MacroScriptParam","javaClass":"com.zetapush.common.messages.macro.MacroScriptParam","fields":[{"type":"List[MacroScriptParamConstraint]","name":"constraints","description":"Optional parameter constraints"},{"type":"String","name":"name","description":"Parameter name"}],"anyField":false},"MacroScriptParamConstraint":{"type":"MacroScriptParamConstraint","javaClass":"com.zetapush.common.messages.macro.MacroScriptParamConstraint","fields":[{"type":"Map[String,Object]","name":"config","description":"Constraint configuration"},{"type":"String","name":"name","description":"Constraint name"}],"anyField":false},"MacroTypeDefinition":{"type":"MacroTypeDefinition","javaClass":"com.zetapush.common.messages.macro.MacroTypeDefinition","fields":[{"type":"List[MacroScriptParam]","name":"fields","description":"List of field definitions"},{"type":"String","name":"name","description":"Type name"},{"type":"Map[String,Object]","name":"thisObject","description":"Initializer. contains class common fields, copied into each new instance"}],"anyField":false},"SoapFaultDefinition":{"type":"SoapFaultDefinition","javaClass":"com.zetapush.common.messages.httpclient.HttpClientSOAPRequest.SoapFaultDefinition","fields":[{"type":"String","name":"targetNamespace"},{"type":"MacroTypeDefinition","name":"type","required":true}],"anyField":false}}}},"responseInfo":{"type":"HttpClientSOAPResponse","resolved":{"types":{"HttpClientSOAPResponse":{"type":"HttpClientSOAPResponse","javaClass":"com.zetapush.common.messages.httpclient.HttpClientSOAPResponse","fields":[{"type":"Object","name":"content","description":"received content"},{"type":"SoapFault","name":"fault"},{"type":"List[HttpClientHeader]","name":"headers","description":"received headers"},{"type":"int","name":"httpStatus","description":"response http status code"},{"type":"String","name":"requestId","description":"optional client generated call ID to identify responses"}],"anyField":false},"HttpClientHeader":{"type":"HttpClientHeader","javaClass":"com.zetapush.common.messages.httpclient.HttpClientHeader","fields":[{"type":"String","name":"name","description":"Header name","required":true},{"type":"String","name":"value","description":"Header value"}],"anyField":false},"SoapFault":{"type":"SoapFault","javaClass":"com.zetapush.common.messages.httpclient.SoapFault","fields":[{"type":"List[Object]","name":"detail"},{"type":"String","name":"faultcode"},{"type":"String","name":"faultstring"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"The predefined request was not found."},{"code":"BAD_FORMAT","desc":"The given body could not be converted to a stream of bytes."}]},"traceable":true}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId18/call","description":"Makes a predefined request","verb":"call","notes":["Lookups a predefined request by name, and executes it."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"HttpClientCall","resolved":{"types":{"HttpClientCall":{"type":"HttpClientCall","javaClass":"com.zetapush.common.messages.httpclient.HttpClientCall","fields":[{"type":"String","name":"name","description":"name of the configured template","required":true},{"type":"String","name":"requestId","description":"optional client generated call ID to identify responses"}],"anyField":false}}}},"responseInfo":{"type":"HttpClientResponse","resolved":{"types":{"HttpClientResponse":{"type":"HttpClientResponse","javaClass":"com.zetapush.common.messages.httpclient.HttpClientResponse","fields":[{"type":"Object","name":"content","description":"received content"},{"type":"List[HttpClientHeader]","name":"headers","description":"received headers"},{"type":"int","name":"httpStatus","description":"response http status code"},{"type":"String","name":"requestId","description":"optional client generated call ID to identify responses"}],"anyField":false},"HttpClientHeader":{"type":"HttpClientHeader","javaClass":"com.zetapush.common.messages.httpclient.HttpClientHeader","fields":[{"type":"String","name":"name","description":"Header name","required":true},{"type":"String","name":"value","description":"Header value"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"The predefined request was not found."},{"code":"BAD_FORMAT","desc":"The given body could not be converted to a stream of bytes."}]},"returnedType":{"typeName":"HttpClientResponse","imports":["com.zetapush.common.messages.httpclient.HttpClientResponse"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId18/request","description":"Makes a parameterized request","verb":"request","notes":["Executes an HTTP request with the given url, method, headers and body."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"HttpClientRequest","resolved":{"types":{"HttpClientRequest":{"type":"HttpClientRequest","javaClass":"com.zetapush.common.messages.httpclient.HttpClientRequest","fields":[{"type":"Object","name":"content","description":"Request body. String (passed as is) or complex object (serialized to json)"},{"type":"List[HttpClientHeader]","name":"headers","description":"Headers to be sent"},{"type":"String","name":"method","description":"HTTP method","required":true},{"type":"HttpClientParseMode","name":"parseMode","description":"How to parse the response content","required":true},{"type":"String","name":"requestId","description":"optional client generated call ID to identify responses"},{"type":"String","name":"url","description":"Remote URL. a literal string","required":true}],"anyField":false},"HttpClientHeader":{"type":"HttpClientHeader","javaClass":"com.zetapush.common.messages.httpclient.HttpClientHeader","fields":[{"type":"String","name":"name","description":"Header name","required":true},{"type":"String","name":"value","description":"Header value"}],"anyField":false},"HttpClientParseMode":{"type":"HttpClientParseMode","javaClass":"com.zetapush.common.messages.httpclient.HttpClientParseMode","enumValues":[{"name":"STRING","description":"Content is interpreted as a UTF8 character string"},{"name":"OBJECT","description":"Content is parsed as UTF8 JSON"},{"name":"BYTES","description":"Content is not interpreted, but available as a raw array of bytes"}],"anyField":false}}}},"responseInfo":{"type":"HttpClientResponse","resolved":{"types":{"HttpClientResponse":{"type":"HttpClientResponse","javaClass":"com.zetapush.common.messages.httpclient.HttpClientResponse","fields":[{"type":"Object","name":"content","description":"received content"},{"type":"List[HttpClientHeader]","name":"headers","description":"received headers"},{"type":"int","name":"httpStatus","description":"response http status code"},{"type":"String","name":"requestId","description":"optional client generated call ID to identify responses"}],"anyField":false},"HttpClientHeader":{"type":"HttpClientHeader","javaClass":"com.zetapush.common.messages.httpclient.HttpClientHeader","fields":[{"type":"String","name":"name","description":"Header name","required":true},{"type":"String","name":"value","description":"Header value"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"The predefined request was not found."},{"code":"BAD_FORMAT","desc":"The given body could not be converted to a stream of bytes."}]},"returnedType":{"typeName":"HttpClientResponse","imports":["com.zetapush.common.messages.httpclient.HttpClientResponse"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId18/soap","description":"Makes a soap request","verb":"soap","notes":["Executes an HTTP SOAP request with the given url, method, headers and body."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"HttpClientSOAPRequest","resolved":{"types":{"HttpClientSOAPRequest":{"type":"HttpClientSOAPRequest","javaClass":"com.zetapush.common.messages.httpclient.HttpClientSOAPRequest","fields":[{"type":"Object","name":"content","description":"Request body. String (passed as is) or complex object (serialized to json)"},{"type":"List[HttpClientHeader]","name":"headers","description":"Headers to be sent"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"requestWrapperNamespace","description":"Use when the xml root type does not declare any namespace, but does need it"},{"type":"String","name":"soapAction","description":"SOAP action, as defined in the WSDL, for inclusion in the generated request headers"},{"type":"List[SoapFaultDefinition]","name":"soapFaults","description":"List of possible soap fault classes for this request"},{"type":"List[Object]","name":"soapHeaders","description":"Soap headers : the content of &lt;soapenv:Header&gt;"},{"type":"MacroTypeDefinition","name":"typeDefinition","description":"Type reference, as returned in ZMS by 'YourClassName.class' "},{"type":"String","name":"url","description":"Remote URL. a literal string","required":true}],"anyField":false},"HttpClientHeader":{"type":"HttpClientHeader","javaClass":"com.zetapush.common.messages.httpclient.HttpClientHeader","fields":[{"type":"String","name":"name","description":"Header name","required":true},{"type":"String","name":"value","description":"Header value"}],"anyField":false},"MacroScriptParam":{"type":"MacroScriptParam","javaClass":"com.zetapush.common.messages.macro.MacroScriptParam","fields":[{"type":"List[MacroScriptParamConstraint]","name":"constraints","description":"Optional parameter constraints"},{"type":"String","name":"name","description":"Parameter name"}],"anyField":false},"MacroScriptParamConstraint":{"type":"MacroScriptParamConstraint","javaClass":"com.zetapush.common.messages.macro.MacroScriptParamConstraint","fields":[{"type":"Map[String,Object]","name":"config","description":"Constraint configuration"},{"type":"String","name":"name","description":"Constraint name"}],"anyField":false},"MacroTypeDefinition":{"type":"MacroTypeDefinition","javaClass":"com.zetapush.common.messages.macro.MacroTypeDefinition","fields":[{"type":"List[MacroScriptParam]","name":"fields","description":"List of field definitions"},{"type":"String","name":"name","description":"Type name"},{"type":"Map[String,Object]","name":"thisObject","description":"Initializer. contains class common fields, copied into each new instance"}],"anyField":false},"SoapFaultDefinition":{"type":"SoapFaultDefinition","javaClass":"com.zetapush.common.messages.httpclient.HttpClientSOAPRequest.SoapFaultDefinition","fields":[{"type":"String","name":"targetNamespace"},{"type":"MacroTypeDefinition","name":"type","required":true}],"anyField":false}}}},"responseInfo":{"type":"HttpClientSOAPResponse","resolved":{"types":{"HttpClientSOAPResponse":{"type":"HttpClientSOAPResponse","javaClass":"com.zetapush.common.messages.httpclient.HttpClientSOAPResponse","fields":[{"type":"Object","name":"content","description":"received content"},{"type":"SoapFault","name":"fault"},{"type":"List[HttpClientHeader]","name":"headers","description":"received headers"},{"type":"int","name":"httpStatus","description":"response http status code"},{"type":"String","name":"requestId","description":"optional client generated call ID to identify responses"}],"anyField":false},"HttpClientHeader":{"type":"HttpClientHeader","javaClass":"com.zetapush.common.messages.httpclient.HttpClientHeader","fields":[{"type":"String","name":"name","description":"Header name","required":true},{"type":"String","name":"value","description":"Header value"}],"anyField":false},"SoapFault":{"type":"SoapFault","javaClass":"com.zetapush.common.messages.httpclient.SoapFault","fields":[{"type":"List[Object]","name":"detail"},{"type":"String","name":"faultcode"},{"type":"String","name":"faultstring"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"The predefined request was not found."},{"code":"BAD_FORMAT","desc":"The given body could not be converted to a stream of bytes."}]},"returnedType":{"typeName":"HttpClientSOAPResponse","imports":["com.zetapush.common.messages.httpclient.HttpClientSOAPResponse"]}}]},{"clazz":"com.zetapush.str.services.cron.CronService","name":"Cron","itemId":"cron","desc":"User API for the Scheduler","notes":["User endpoints for scheduling : users can schedule, list and delete tasks.","Tasks are stored on a per-user basis: a task will run with the priviledges of the user who stored it.","Tasks are run on the server and thus can call api verbs marked as server-only."],"verbs":[{"name":"schedule","type":{"typeName":"CronTaskRequest","imports":["com.zetapush.common.messages.cron.CronTaskRequest"]},"returnType":{"typeName":"CronTaskRequest","imports":["com.zetapush.common.messages.cron.CronTaskRequest"]},"desc":"Schedules a task","notes":["Schedules a task for later execution. Tasks are executed asynchronously with the identity of the calling user.","Tasks will be executed at a fixed moment in time in the future, or repeatedly, with minute precision.","If a task already exists with the same cronName (a cronName is unique for a given user), this new task completely replaces it.","A task can be scheduled with a cron-like syntax for repetitive or one-shot execution.","Wildcards are not allowed for minutes and hours.","When scheduling for one-shot execution, the time must be at least two minutes into the future."],"verbInfo":{"desc":"","deprecation":"","notes":["Schedules a task for later execution. Tasks are executed asynchronously with the identity of the calling user.","Tasks will be executed at a fixed moment in time in the future, or repeatedly, with minute precision.","If a task already exists with the same cronName (a cronName is unique for a given user), this new task completely replaces it.","A task can be scheduled with a cron-like syntax for repetitive or one-shot execution.","Wildcards are not allowed for minutes and hours.","When scheduling for one-shot execution, the time must be at least two minutes into the future."],"relatedClasses":[],"errors":[{"code":"PAST_DATE","desc":"A task can only be set in the future (two minutes from now). The current time (UTC) of the server can be accessed from inside a macro with the function time:now()."},{"code":"FORBIDDEN_CRON","desc":"A schedule must respect some constraints : the 'minutes' and 'hours' fields must be precise. Wilcards are not allowed."},{"code":"BAD_CRON","desc":"The schedule could not be parsed. Please check your syntax."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId14/schedule","description":"Schedules a task","verb":"schedule","notes":["Schedules a task for later execution. Tasks are executed asynchronously with the identity of the calling user.","Tasks will be executed at a fixed moment in time in the future, or repeatedly, with minute precision.","If a task already exists with the same cronName (a cronName is unique for a given user), this new task completely replaces it.","A task can be scheduled with a cron-like syntax for repetitive or one-shot execution.","Wildcards are not allowed for minutes and hours.","When scheduling for one-shot execution, the time must be at least two minutes into the future."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CronTaskRequest","resolved":{"types":{"CronTaskRequest":{"type":"CronTaskRequest","javaClass":"com.zetapush.common.messages.cron.CronTaskRequest","fields":[{"type":"String","name":"cronName","description":"Cron identifier. mandatory for creation or update.","required":true},{"type":"String","name":"deploymentId","description":"DeploymentId of the target service.","required":true},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the target verb when called. The format is the format accepted by the target."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Object","name":"schedule","description":"Cron-like expression (with fixed minutes and hours) or unix timestamp (as milliseconds from the epoch). Times are UTC.","required":true},{"type":"Long","name":"stop","description":"Max number of executions."},{"type":"String","name":"verb","description":"Verb to be called within the target service.","required":true}],"anyField":false}}}},"responseInfo":{"type":"CronTaskRequest","resolved":{"types":{"CronTaskRequest":{"type":"CronTaskRequest","javaClass":"com.zetapush.common.messages.cron.CronTaskRequest","fields":[{"type":"String","name":"cronName","description":"Cron identifier. mandatory for creation or update.","required":true},{"type":"String","name":"deploymentId","description":"DeploymentId of the target service.","required":true},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the target verb when called. The format is the format accepted by the target."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Object","name":"schedule","description":"Cron-like expression (with fixed minutes and hours) or unix timestamp (as milliseconds from the epoch). Times are UTC.","required":true},{"type":"Long","name":"stop","description":"Max number of executions."},{"type":"String","name":"verb","description":"Verb to be called within the target service.","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"PAST_DATE","desc":"A task can only be set in the future (two minutes from now). The current time (UTC) of the server can be accessed from inside a macro with the function time:now()."},{"code":"FORBIDDEN_CRON","desc":"A schedule must respect some constraints : the 'minutes' and 'hours' fields must be precise. Wilcards are not allowed."},{"code":"BAD_CRON","desc":"The schedule could not be parsed. Please check your syntax."}]},"traceable":true},{"name":"setTimeout","type":{"typeName":"TimerRequest","imports":["com.zetapush.common.messages.cron.TimerRequest"]},"returnType":{"typeName":"TimerResult","imports":["com.zetapush.common.messages.cron.TimerResult"]},"desc":"Schedules a task","notes":["Schedules a task for later execution. Tasks are executed asynchronously with the identity of the calling user.","Tasks will be executed with second precision in the near future (120 seconds delay max)."],"verbInfo":{"desc":"","deprecation":"","notes":["Schedules a task for later execution. Tasks are executed asynchronously with the identity of the calling user.","Tasks will be executed with second precision in the near future (120 seconds delay max)."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId14/setTimeout","description":"Schedules a task","verb":"setTimeout","notes":["Schedules a task for later execution. Tasks are executed asynchronously with the identity of the calling user.","Tasks will be executed with second precision in the near future (120 seconds delay max)."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TimerRequest","resolved":{"types":{"TimerRequest":{"type":"TimerRequest","javaClass":"com.zetapush.common.messages.cron.TimerRequest","fields":[{"type":"int","name":"delay","description":"Delay in seconds before calling the given API. Must be a integer between 1 and 120."},{"type":"String","name":"deploymentId","description":"DeploymentId of the target service.","required":true},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the target verb when called. The format is the format accepted by the target."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"verb","description":"Verb to be called within the target service.","required":true}],"anyField":false}}}},"responseInfo":{"type":"TimerResult","resolved":{"types":{"TimerResult":{"type":"TimerResult","javaClass":"com.zetapush.common.messages.cron.TimerResult","fields":[{"type":"String","name":"id","description":"Timer identifier"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"traceable":true},{"name":"unschedule","type":{"typeName":"CronTaskDeletion","imports":["com.zetapush.common.messages.cron.CronTaskDeletion"]},"returnType":{"typeName":"CronTaskDeletion","imports":["com.zetapush.common.messages.cron.CronTaskDeletion"]},"desc":"Removes a scheduled task","notes":["Removes a previously scheduled task.","Does absolutely nothing if asked to remove a non-existent task."],"verbInfo":{"desc":"","deprecation":"","notes":["Removes a previously scheduled task.","Does absolutely nothing if asked to remove a non-existent task."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId14/unschedule","description":"Removes a scheduled task","verb":"unschedule","notes":["Removes a previously scheduled task.","Does absolutely nothing if asked to remove a non-existent task."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CronTaskDeletion","resolved":{"types":{"CronTaskDeletion":{"type":"CronTaskDeletion","javaClass":"com.zetapush.common.messages.cron.CronTaskDeletion","fields":[{"type":"String","name":"cronName","description":"cron name identifying the task to be removed"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CronTaskDeletion","resolved":{"types":{"CronTaskDeletion":{"type":"CronTaskDeletion","javaClass":"com.zetapush.common.messages.cron.CronTaskDeletion","fields":[{"type":"String","name":"cronName","description":"cron name identifying the task to be removed"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"traceable":true},{"name":"list","type":{"typeName":"CronTaskListRequest","imports":["com.zetapush.common.messages.cron.CronTaskListRequest"]},"returnType":{"typeName":"CronPlanning","imports":["com.zetapush.common.messages.cron.CronPlanning"]},"desc":"List the configured tasks","notes":["Returns a paginated list of the asking user's tasks."],"verbInfo":{"desc":"","deprecation":"","notes":["Returns a paginated list of the asking user's tasks."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId14/list","description":"List the configured tasks","verb":"list","notes":["Returns a paginated list of the asking user's tasks."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CronTaskListRequest","resolved":{"types":{"CronTaskListRequest":{"type":"CronTaskListRequest","javaClass":"com.zetapush.common.messages.cron.CronTaskListRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"long","name":"start","description":"Start timestamp for the task list. Not implemented"},{"type":"long","name":"stop","description":"Stop timestamp for the task list. Not implemented"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"CronPlanning","resolved":{"types":{"CronPlanning":{"type":"CronPlanning","javaClass":"com.zetapush.common.messages.cron.CronPlanning","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"CronTaskListRequest","name":"request","description":"Cron planning request"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"PageContent[CronTaskRequest]","name":"tasks","description":"List of all tasks matching the request"}],"anyField":false},"CronTaskListRequest":{"type":"CronTaskListRequest","javaClass":"com.zetapush.common.messages.cron.CronTaskListRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"long","name":"start","description":"Start timestamp for the task list. Not implemented"},{"type":"long","name":"stop","description":"Stop timestamp for the task list. Not implemented"}],"anyField":false},"CronTaskRequest":{"type":"CronTaskRequest","javaClass":"com.zetapush.common.messages.cron.CronTaskRequest","fields":[{"type":"String","name":"cronName","description":"Cron identifier. mandatory for creation or update.","required":true},{"type":"String","name":"deploymentId","description":"DeploymentId of the target service.","required":true},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the target verb when called. The format is the format accepted by the target."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Object","name":"schedule","description":"Cron-like expression (with fixed minutes and hours) or unix timestamp (as milliseconds from the epoch). Times are UTC.","required":true},{"type":"Long","name":"stop","description":"Max number of executions."},{"type":"String","name":"verb","description":"Verb to be called within the target service.","required":true}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId14/schedule","description":"Schedules a task","verb":"schedule","notes":["Schedules a task for later execution. Tasks are executed asynchronously with the identity of the calling user.","Tasks will be executed at a fixed moment in time in the future, or repeatedly, with minute precision.","If a task already exists with the same cronName (a cronName is unique for a given user), this new task completely replaces it.","A task can be scheduled with a cron-like syntax for repetitive or one-shot execution.","Wildcards are not allowed for minutes and hours.","When scheduling for one-shot execution, the time must be at least two minutes into the future."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CronTaskRequest","resolved":{"types":{"CronTaskRequest":{"type":"CronTaskRequest","javaClass":"com.zetapush.common.messages.cron.CronTaskRequest","fields":[{"type":"String","name":"cronName","description":"Cron identifier. mandatory for creation or update.","required":true},{"type":"String","name":"deploymentId","description":"DeploymentId of the target service.","required":true},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the target verb when called. The format is the format accepted by the target."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Object","name":"schedule","description":"Cron-like expression (with fixed minutes and hours) or unix timestamp (as milliseconds from the epoch). Times are UTC.","required":true},{"type":"Long","name":"stop","description":"Max number of executions."},{"type":"String","name":"verb","description":"Verb to be called within the target service.","required":true}],"anyField":false}}}},"responseInfo":{"type":"CronTaskRequest","resolved":{"types":{"CronTaskRequest":{"type":"CronTaskRequest","javaClass":"com.zetapush.common.messages.cron.CronTaskRequest","fields":[{"type":"String","name":"cronName","description":"Cron identifier. mandatory for creation or update.","required":true},{"type":"String","name":"deploymentId","description":"DeploymentId of the target service.","required":true},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the target verb when called. The format is the format accepted by the target."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Object","name":"schedule","description":"Cron-like expression (with fixed minutes and hours) or unix timestamp (as milliseconds from the epoch). Times are UTC.","required":true},{"type":"Long","name":"stop","description":"Max number of executions."},{"type":"String","name":"verb","description":"Verb to be called within the target service.","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"PAST_DATE","desc":"A task can only be set in the future (two minutes from now). The current time (UTC) of the server can be accessed from inside a macro with the function time:now()."},{"code":"FORBIDDEN_CRON","desc":"A schedule must respect some constraints : the 'minutes' and 'hours' fields must be precise. Wilcards are not allowed."},{"code":"BAD_CRON","desc":"The schedule could not be parsed. Please check your syntax."}]},"returnedType":{"typeName":"CronTaskRequest","imports":["com.zetapush.common.messages.cron.CronTaskRequest"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId14/setTimeout","description":"Schedules a task","verb":"setTimeout","notes":["Schedules a task for later execution. Tasks are executed asynchronously with the identity of the calling user.","Tasks will be executed with second precision in the near future (120 seconds delay max)."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TimerRequest","resolved":{"types":{"TimerRequest":{"type":"TimerRequest","javaClass":"com.zetapush.common.messages.cron.TimerRequest","fields":[{"type":"int","name":"delay","description":"Delay in seconds before calling the given API. Must be a integer between 1 and 120."},{"type":"String","name":"deploymentId","description":"DeploymentId of the target service.","required":true},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the target verb when called. The format is the format accepted by the target."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"verb","description":"Verb to be called within the target service.","required":true}],"anyField":false}}}},"responseInfo":{"type":"TimerResult","resolved":{"types":{"TimerResult":{"type":"TimerResult","javaClass":"com.zetapush.common.messages.cron.TimerResult","fields":[{"type":"String","name":"id","description":"Timer identifier"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"TimerResult","imports":["com.zetapush.common.messages.cron.TimerResult"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId14/unschedule","description":"Removes a scheduled task","verb":"unschedule","notes":["Removes a previously scheduled task.","Does absolutely nothing if asked to remove a non-existent task."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CronTaskDeletion","resolved":{"types":{"CronTaskDeletion":{"type":"CronTaskDeletion","javaClass":"com.zetapush.common.messages.cron.CronTaskDeletion","fields":[{"type":"String","name":"cronName","description":"cron name identifying the task to be removed"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CronTaskDeletion","resolved":{"types":{"CronTaskDeletion":{"type":"CronTaskDeletion","javaClass":"com.zetapush.common.messages.cron.CronTaskDeletion","fields":[{"type":"String","name":"cronName","description":"cron name identifying the task to be removed"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"CronTaskDeletion","imports":["com.zetapush.common.messages.cron.CronTaskDeletion"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId14/list","description":"List the configured tasks","verb":"list","notes":["Returns a paginated list of the asking user's tasks."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CronTaskListRequest","resolved":{"types":{"CronTaskListRequest":{"type":"CronTaskListRequest","javaClass":"com.zetapush.common.messages.cron.CronTaskListRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"long","name":"start","description":"Start timestamp for the task list. Not implemented"},{"type":"long","name":"stop","description":"Stop timestamp for the task list. Not implemented"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"CronPlanning","resolved":{"types":{"CronPlanning":{"type":"CronPlanning","javaClass":"com.zetapush.common.messages.cron.CronPlanning","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"CronTaskListRequest","name":"request","description":"Cron planning request"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"PageContent[CronTaskRequest]","name":"tasks","description":"List of all tasks matching the request"}],"anyField":false},"CronTaskListRequest":{"type":"CronTaskListRequest","javaClass":"com.zetapush.common.messages.cron.CronTaskListRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"long","name":"start","description":"Start timestamp for the task list. Not implemented"},{"type":"long","name":"stop","description":"Stop timestamp for the task list. Not implemented"}],"anyField":false},"CronTaskRequest":{"type":"CronTaskRequest","javaClass":"com.zetapush.common.messages.cron.CronTaskRequest","fields":[{"type":"String","name":"cronName","description":"Cron identifier. mandatory for creation or update.","required":true},{"type":"String","name":"deploymentId","description":"DeploymentId of the target service.","required":true},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the target verb when called. The format is the format accepted by the target."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Object","name":"schedule","description":"Cron-like expression (with fixed minutes and hours) or unix timestamp (as milliseconds from the epoch). Times are UTC.","required":true},{"type":"Long","name":"stop","description":"Max number of executions."},{"type":"String","name":"verb","description":"Verb to be called within the target service.","required":true}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"CronPlanning","imports":["com.zetapush.common.messages.cron.CronPlanning"]}}]},{"clazz":"com.zetapush.str.authentication.mem.SimpleAuthenticationService","name":"Simple","itemId":"simple","desc":"End-user API for the simple local authentication","notes":["These API verbs allow end-users to manage their account(s)."],"verbs":[{"name":"createUser","type":{"typeName":"BasicAuthenticatedUser","imports":["com.zetapush.str.authentication.BasicAuthenticatedUser"]},"returnType":{"typeName":"Map<String,Object>","imports":["java.util.Map","java.lang.Object","java.lang.String"]},"desc":"Creates an account","notes":["Creates a new account in this 'simple' authentication realm.","Returns a map of account fields, including a field named <i>zetapushKey</i> containing the global user key of the user (value of the <b>__userKey</b> pseudo-constant when this new account will be used)"],"verbInfo":{"desc":"Creates an account","deprecation":"","notes":["Creates a new account in this 'simple' authentication realm.","Returns a map of account fields, including a field named <i>zetapushKey</i> containing the global user key of the user (value of the <b>__userKey</b> pseudo-constant when this new account will be used)"],"relatedClasses":[],"errors":[{"code":"MISSING_MANDATORY_FIELD","desc":"Happens when the caller does not fill a mandatory field (defined by the developer)."},{"code":"ACCOUNT_EXISTS","desc":"Happens when the user account already exists with the given unique account key (login)."},{"code":"KEY_BADCHAR","desc":"The given unique account key contains the forbidden character ':'."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId0/createUser","description":"Creates an account","verb":"createUser","notes":["Creates a new account in this 'simple' authentication realm.","Returns a map of account fields, including a field named <i>zetapushKey</i> containing the global user key of the user (value of the <b>__userKey</b> pseudo-constant when this new account will be used)"],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"BasicAuthenticatedUser","resolved":{"types":{"BasicAuthenticatedUser":{"type":"BasicAuthenticatedUser","javaClass":"com.zetapush.str.authentication.BasicAuthenticatedUser","fields":[{"type":"Map[String,Object]","name":"additionalProperties","description":"You can pass any number of arbitrary properties in the enclosing object (there is no field actually named additionalProperties). "}],"anyField":true}}}},"responseInfo":{"type":"Map[String,Object]","resolved":{"types":{}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"MISSING_MANDATORY_FIELD","desc":"Happens when the caller does not fill a mandatory field (defined by the developer)."},{"code":"ACCOUNT_EXISTS","desc":"Happens when the user account already exists with the given unique account key (login)."},{"code":"KEY_BADCHAR","desc":"The given unique account key contains the forbidden character ':'."}]},"traceable":false},{"name":"credentials","type":{"typeName":"ImpersonatedTraceableRequest","imports":["com.zetapush.common.messages.ImpersonatedTraceableRequest"]},"returnType":{"typeName":"AllCredentials","imports":["com.zetapush.common.messages.simple.AllCredentials"]},"desc":"Lists an account's credentials","notes":["Returns the list of account credentials in this service for the asking user.","Might return an empty list."],"verbInfo":{"desc":"Lists an account's credentials","deprecation":"","notes":["Returns the list of account credentials in this service for the asking user.","Might return an empty list."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId0/credentials","description":"Lists an account's credentials","verb":"credentials","notes":["Returns the list of account credentials in this service for the asking user.","Might return an empty list."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ImpersonatedTraceableRequest","resolved":{"types":{"ImpersonatedTraceableRequest":{"type":"ImpersonatedTraceableRequest","javaClass":"com.zetapush.common.messages.ImpersonatedTraceableRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"AllCredentials","resolved":{"types":{"AllCredentials":{"type":"AllCredentials","javaClass":"com.zetapush.common.messages.simple.AllCredentials","fields":[{"type":"List[Map[String,Object]]","name":"credentials","description":"List of account information for the asking user. empty if the user does not have credentials in the service. One item in this list is a map of account fields."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true},{"name":"updateKey","type":{"typeName":"UserLoginchange","imports":["com.zetapush.common.messages.simple.UserLoginchange"]},"returnType":{"typeName":"Map<String,Object>","imports":["java.util.Map","java.lang.Object","java.lang.String"]},"desc":"Updates an account key","notes":["Updates an existing account primary key (login, NOT <b>__userKey</b>) in this 'simple' authentication realm.","The updated account MUST belong to the user making the call.","The configured login field MUST be given, as a user (identified by his zetapush userKey) might possess several accounts.","Returns a map of account fields"],"verbInfo":{"desc":"Updates an account key","deprecation":"","notes":["Updates an existing account primary key (login, NOT <b>__userKey</b>) in this 'simple' authentication realm.","The updated account MUST belong to the user making the call.","The configured login field MUST be given, as a user (identified by his zetapush userKey) might possess several accounts.","Returns a map of account fields"],"relatedClasses":[],"errors":[{"code":"ACCOUNT_EXISTS","desc":"Happens when the user account already exists with the given unique account key (login)."},{"code":"NO_ACCOUNT","desc":"The given account key in this realm (login) does not match an existing account."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId0/updateKey","description":"Updates an account key","verb":"updateKey","notes":["Updates an existing account primary key (login, NOT <b>__userKey</b>) in this 'simple' authentication realm.","The updated account MUST belong to the user making the call.","The configured login field MUST be given, as a user (identified by his zetapush userKey) might possess several accounts.","Returns a map of account fields"],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"UserLoginchange","resolved":{"types":{"UserLoginchange":{"type":"UserLoginchange","javaClass":"com.zetapush.common.messages.simple.UserLoginchange","fields":[{"type":"String","name":"newKey","description":"New account key within this realm. Must not be already in use.","required":true},{"type":"String","name":"oldKey","description":"Existing account key within this realm (login). Will be free for use upon successful completion.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"responseInfo":{"type":"Map[String,Object]","resolved":{"types":{}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"ACCOUNT_EXISTS","desc":"Happens when the user account already exists with the given unique account key (login)."},{"code":"NO_ACCOUNT","desc":"The given account key in this realm (login) does not match an existing account."}]},"traceable":false},{"name":"updateUser","type":{"typeName":"BasicAuthenticatedUser","imports":["com.zetapush.str.authentication.BasicAuthenticatedUser"]},"returnType":{"typeName":"Map<String,Object>","imports":["java.util.Map","java.lang.Object","java.lang.String"]},"desc":"Updates an account","notes":["Updates an existing account in this 'simple' authentication realm.","The updated account MUST belong to the user making the call.","The configured login field MUST be given, as a user (identified by his zetapush userKey) might possess several accounts.","Returns a map of account fields"],"verbInfo":{"desc":"Updates an account","deprecation":"","notes":["Updates an existing account in this 'simple' authentication realm.","The updated account MUST belong to the user making the call.","The configured login field MUST be given, as a user (identified by his zetapush userKey) might possess several accounts.","Returns a map of account fields"],"relatedClasses":[],"errors":[{"code":"NO_ACCOUNT","desc":"The given account key in this realm (login) does not match an existing account."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId0/updateUser","description":"Updates an account","verb":"updateUser","notes":["Updates an existing account in this 'simple' authentication realm.","The updated account MUST belong to the user making the call.","The configured login field MUST be given, as a user (identified by his zetapush userKey) might possess several accounts.","Returns a map of account fields"],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"BasicAuthenticatedUser","resolved":{"types":{"BasicAuthenticatedUser":{"type":"BasicAuthenticatedUser","javaClass":"com.zetapush.str.authentication.BasicAuthenticatedUser","fields":[{"type":"Map[String,Object]","name":"additionalProperties","description":"You can pass any number of arbitrary properties in the enclosing object (there is no field actually named additionalProperties). "}],"anyField":true}}}},"responseInfo":{"type":"Map[String,Object]","resolved":{"types":{}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_ACCOUNT","desc":"The given account key in this realm (login) does not match an existing account."}]},"traceable":false},{"name":"deleteUser","type":{"typeName":"ExistenceCheck","imports":["com.zetapush.common.messages.simple.ExistenceCheck"]},"returnType":{"typeName":"ExistenceCheck","imports":["com.zetapush.common.messages.simple.ExistenceCheck"]},"desc":"Deletes an account","notes":["Deletes an existing account in this 'simple' authentication realm."],"verbInfo":{"desc":"Deletes an account","deprecation":"","notes":["Deletes an existing account in this 'simple' authentication realm."],"relatedClasses":[],"errors":[{"code":"NO_ACCOUNT","desc":"The given account key in this realm (login) does not match an existing account."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId0/deleteUser","description":"Deletes an account","verb":"deleteUser","notes":["Deletes an existing account in this 'simple' authentication realm."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ExistenceCheck","resolved":{"types":{"ExistenceCheck":{"type":"ExistenceCheck","javaClass":"com.zetapush.common.messages.simple.ExistenceCheck","fields":[{"type":"String","name":"key","description":"User key within the realm","required":true},{"type":"boolean","name":"softFail","description":"Whether to fail is the user does not exist. When true, fails silently."}],"anyField":false}}}},"responseInfo":{"type":"ExistenceCheck","resolved":{"types":{"ExistenceCheck":{"type":"ExistenceCheck","javaClass":"com.zetapush.common.messages.simple.ExistenceCheck","fields":[{"type":"String","name":"key","description":"User key within the realm","required":true},{"type":"boolean","name":"softFail","description":"Whether to fail is the user does not exist. When true, fails silently."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_ACCOUNT","desc":"The given account key in this realm (login) does not match an existing account."}]},"traceable":false},{"name":"checkUser","type":{"typeName":"ExistenceCheck","imports":["com.zetapush.common.messages.simple.ExistenceCheck"]},"returnType":{"typeName":"Map<String,Object>","imports":["java.util.Map","java.lang.Object","java.lang.String"]},"desc":"Checks some account's existence","notes":["Checks whether the given account already exists in this 'simple' authentication realm.","This verb returns all the information about the user, including non public fields."],"verbInfo":{"desc":"Checks some account's existence","deprecation":"","notes":["Checks whether the given account already exists in this 'simple' authentication realm.","This verb returns all the information about the user, including non public fields."],"relatedClasses":[],"errors":[{"code":"NO_ACCOUNT","desc":"The given account key in this realm (login) does not match an existing account."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId0/checkUser","description":"Checks some account's existence","verb":"checkUser","notes":["Checks whether the given account already exists in this 'simple' authentication realm.","This verb returns all the information about the user, including non public fields."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ExistenceCheck","resolved":{"types":{"ExistenceCheck":{"type":"ExistenceCheck","javaClass":"com.zetapush.common.messages.simple.ExistenceCheck","fields":[{"type":"String","name":"key","description":"User key within the realm","required":true},{"type":"boolean","name":"softFail","description":"Whether to fail is the user does not exist. When true, fails silently."}],"anyField":false}}}},"responseInfo":{"type":"Map[String,Object]","resolved":{"types":{}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_ACCOUNT","desc":"The given account key in this realm (login) does not match an existing account."}]},"traceable":false},{"name":"requestReset","type":{"typeName":"ResetRequest","imports":["com.zetapush.common.messages.simple.ResetRequest"]},"returnType":{"typeName":"ResetInfo","imports":["com.zetapush.common.messages.simple.ResetInfo"]},"desc":"Requests a password reset","notes":["Requests a password reset for the given unique account key.","The account key must exist and must be given, as it cannot obviously be deduced from the currently logged in user.","The returned token needs to be sent to the intended recipient only. The typical use case is to define a macro that requests a reset, generates a email template and emails the user. The macro can then be safely called by a weakly authenticated user.","Requesting a reset does not invalidate the password.","Requesting a reset again invalidates previous reset requests (only the last token is usable)"],"verbInfo":{"desc":"Requests a password reset","deprecation":"","notes":["Requests a password reset for the given unique account key.","The account key must exist and must be given, as it cannot obviously be deduced from the currently logged in user.","The returned token needs to be sent to the intended recipient only. The typical use case is to define a macro that requests a reset, generates a email template and emails the user. The macro can then be safely called by a weakly authenticated user.","Requesting a reset does not invalidate the password.","Requesting a reset again invalidates previous reset requests (only the last token is usable)"],"relatedClasses":[],"errors":[{"code":"NO_ACCOUNT","desc":"The given account key in this realm (login) does not match an existing account."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId0/requestReset","description":"Requests a password reset","verb":"requestReset","notes":["Requests a password reset for the given unique account key.","The account key must exist and must be given, as it cannot obviously be deduced from the currently logged in user.","The returned token needs to be sent to the intended recipient only. The typical use case is to define a macro that requests a reset, generates a email template and emails the user. The macro can then be safely called by a weakly authenticated user.","Requesting a reset does not invalidate the password.","Requesting a reset again invalidates previous reset requests (only the last token is usable)"],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ResetRequest","resolved":{"types":{"ResetRequest":{"type":"ResetRequest","javaClass":"com.zetapush.common.messages.simple.ResetRequest","fields":[{"type":"String","name":"key","description":"account key in the realm. (configured 'unique key' used for authentication). \n","required":true,"serverGenerated":false}],"anyField":false}}}},"responseInfo":{"type":"ResetInfo","resolved":{"types":{"ResetInfo":{"type":"ResetInfo","javaClass":"com.zetapush.common.messages.simple.ResetInfo","fields":[{"type":"String","name":"key","description":"account key in the realm. (configured 'unique key' used for authentication)"},{"type":"String","name":"token","description":"Server-provided temporary token to reset a password"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_ACCOUNT","desc":"The given account key in this realm (login) does not match an existing account."}]},"traceable":false},{"name":"changePassword","type":{"typeName":"ChangePasswordRequest","imports":["com.zetapush.common.messages.simple.ChangePasswordRequest"]},"returnType":{"typeName":"ChangePasswordRequest","imports":["com.zetapush.common.messages.simple.ChangePasswordRequest"]},"desc":"Changes a password","notes":["Changes a user password for this authentication realm.","The user can be either explicit, implicit (one of the current user's accounts) or deduced from the token.","You should provide at least one of 'key' and 'token'. If you do not, the server will try and find any key for the current user.","The change is effective immediately. However, already logged in users might stay connected.","The password and token fields are always null in the output."],"verbInfo":{"desc":"Changes a password","deprecation":"","notes":["Changes a user password for this authentication realm.","The user can be either explicit, implicit (one of the current user's accounts) or deduced from the token.","You should provide at least one of 'key' and 'token'. If you do not, the server will try and find any key for the current user.","The change is effective immediately. However, already logged in users might stay connected.","The password and token fields are always null in the output."],"relatedClasses":[],"errors":[{"code":"NO_ACCOUNT","desc":"The given account key in this realm (login) does not match an existing account."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId0/changePassword","description":"Changes a password","verb":"changePassword","notes":["Changes a user password for this authentication realm.","The user can be either explicit, implicit (one of the current user's accounts) or deduced from the token.","You should provide at least one of 'key' and 'token'. If you do not, the server will try and find any key for the current user.","The change is effective immediately. However, already logged in users might stay connected.","The password and token fields are always null in the output."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ChangePasswordRequest","resolved":{"types":{"ChangePasswordRequest":{"type":"ChangePasswordRequest","javaClass":"com.zetapush.common.messages.simple.ChangePasswordRequest","fields":[{"type":"String","name":"token","description":"Server-provided temporary token to reset a password"},{"type":"String","name":"key","description":"account key in the realm. (configured 'unique key' used for authentication). \n","serverGenerated":false},{"type":"String","name":"password","description":"New password","required":true}],"anyField":false}}}},"responseInfo":{"type":"ChangePasswordRequest","resolved":{"types":{"ChangePasswordRequest":{"type":"ChangePasswordRequest","javaClass":"com.zetapush.common.messages.simple.ChangePasswordRequest","fields":[{"type":"String","name":"key","description":"account key in the realm. (configured 'unique key' used for authentication)"},{"type":"String","name":"password","description":"New password","required":true},{"type":"String","name":"token","description":"Server-provided temporary token to reset a password"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_ACCOUNT","desc":"The given account key in this realm (login) does not match an existing account."}]},"traceable":false},{"name":"checkPassword","type":{"typeName":"CheckPasswordRequest","imports":["com.zetapush.common.messages.simple.CheckPasswordRequest"]},"returnType":{"typeName":"CheckPasswordResult","imports":["com.zetapush.common.messages.simple.CheckPasswordResult"]},"desc":"Checks the password for the given account","notes":[],"verbInfo":{"desc":"Checks the password for the given account","deprecation":"","notes":[],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId0/checkPassword","description":"Checks the password for the given account","verb":"checkPassword","notes":[],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CheckPasswordRequest","resolved":{"types":{"CheckPasswordRequest":{"type":"CheckPasswordRequest","javaClass":"com.zetapush.common.messages.simple.CheckPasswordRequest","fields":[{"type":"String","name":"key","description":"account key in the realm. (configured 'unique key' used for authentication). \n","required":true,"serverGenerated":false},{"type":"String","name":"password","description":"Password to be checked","required":true}],"anyField":false}}}},"responseInfo":{"type":"CheckPasswordResult","resolved":{"types":{"CheckPasswordResult":{"type":"CheckPasswordResult","javaClass":"com.zetapush.common.messages.simple.CheckPasswordResult","fields":[{"type":"String","name":"key","description":"account key in the realm. (configured 'unique key' used for authentication)"},{"type":"boolean","name":"matches","description":"Whether the password matches"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":false}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId0/createUser","description":"Creates an account","verb":"createUser","notes":["Creates a new account in this 'simple' authentication realm.","Returns a map of account fields, including a field named <i>zetapushKey</i> containing the global user key of the user (value of the <b>__userKey</b> pseudo-constant when this new account will be used)"],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"BasicAuthenticatedUser","resolved":{"types":{"BasicAuthenticatedUser":{"type":"BasicAuthenticatedUser","javaClass":"com.zetapush.str.authentication.BasicAuthenticatedUser","fields":[{"type":"Map[String,Object]","name":"additionalProperties","description":"You can pass any number of arbitrary properties in the enclosing object (there is no field actually named additionalProperties). "}],"anyField":true}}}},"responseInfo":{"type":"Map[String,Object]","resolved":{"types":{}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"MISSING_MANDATORY_FIELD","desc":"Happens when the caller does not fill a mandatory field (defined by the developer)."},{"code":"ACCOUNT_EXISTS","desc":"Happens when the user account already exists with the given unique account key (login)."},{"code":"KEY_BADCHAR","desc":"The given unique account key contains the forbidden character ':'."}]},"returnedType":{"typeName":"Map<String,Object>","imports":["java.util.Map","java.lang.Object","java.lang.String"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId0/credentials","description":"Lists an account's credentials","verb":"credentials","notes":["Returns the list of account credentials in this service for the asking user.","Might return an empty list."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ImpersonatedTraceableRequest","resolved":{"types":{"ImpersonatedTraceableRequest":{"type":"ImpersonatedTraceableRequest","javaClass":"com.zetapush.common.messages.ImpersonatedTraceableRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"AllCredentials","resolved":{"types":{"AllCredentials":{"type":"AllCredentials","javaClass":"com.zetapush.common.messages.simple.AllCredentials","fields":[{"type":"List[Map[String,Object]]","name":"credentials","description":"List of account information for the asking user. empty if the user does not have credentials in the service. One item in this list is a map of account fields."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"AllCredentials","imports":["com.zetapush.common.messages.simple.AllCredentials"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId0/updateKey","description":"Updates an account key","verb":"updateKey","notes":["Updates an existing account primary key (login, NOT <b>__userKey</b>) in this 'simple' authentication realm.","The updated account MUST belong to the user making the call.","The configured login field MUST be given, as a user (identified by his zetapush userKey) might possess several accounts.","Returns a map of account fields"],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"UserLoginchange","resolved":{"types":{"UserLoginchange":{"type":"UserLoginchange","javaClass":"com.zetapush.common.messages.simple.UserLoginchange","fields":[{"type":"String","name":"newKey","description":"New account key within this realm. Must not be already in use.","required":true},{"type":"String","name":"oldKey","description":"Existing account key within this realm (login). Will be free for use upon successful completion.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"responseInfo":{"type":"Map[String,Object]","resolved":{"types":{}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"ACCOUNT_EXISTS","desc":"Happens when the user account already exists with the given unique account key (login)."},{"code":"NO_ACCOUNT","desc":"The given account key in this realm (login) does not match an existing account."}]},"returnedType":{"typeName":"Map<String,Object>","imports":["java.util.Map","java.lang.Object","java.lang.String"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId0/updateUser","description":"Updates an account","verb":"updateUser","notes":["Updates an existing account in this 'simple' authentication realm.","The updated account MUST belong to the user making the call.","The configured login field MUST be given, as a user (identified by his zetapush userKey) might possess several accounts.","Returns a map of account fields"],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"BasicAuthenticatedUser","resolved":{"types":{"BasicAuthenticatedUser":{"type":"BasicAuthenticatedUser","javaClass":"com.zetapush.str.authentication.BasicAuthenticatedUser","fields":[{"type":"Map[String,Object]","name":"additionalProperties","description":"You can pass any number of arbitrary properties in the enclosing object (there is no field actually named additionalProperties). "}],"anyField":true}}}},"responseInfo":{"type":"Map[String,Object]","resolved":{"types":{}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_ACCOUNT","desc":"The given account key in this realm (login) does not match an existing account."}]},"returnedType":{"typeName":"Map<String,Object>","imports":["java.util.Map","java.lang.Object","java.lang.String"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId0/deleteUser","description":"Deletes an account","verb":"deleteUser","notes":["Deletes an existing account in this 'simple' authentication realm."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ExistenceCheck","resolved":{"types":{"ExistenceCheck":{"type":"ExistenceCheck","javaClass":"com.zetapush.common.messages.simple.ExistenceCheck","fields":[{"type":"String","name":"key","description":"User key within the realm","required":true},{"type":"boolean","name":"softFail","description":"Whether to fail is the user does not exist. When true, fails silently."}],"anyField":false}}}},"responseInfo":{"type":"ExistenceCheck","resolved":{"types":{"ExistenceCheck":{"type":"ExistenceCheck","javaClass":"com.zetapush.common.messages.simple.ExistenceCheck","fields":[{"type":"String","name":"key","description":"User key within the realm","required":true},{"type":"boolean","name":"softFail","description":"Whether to fail is the user does not exist. When true, fails silently."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_ACCOUNT","desc":"The given account key in this realm (login) does not match an existing account."}]},"returnedType":{"typeName":"ExistenceCheck","imports":["com.zetapush.common.messages.simple.ExistenceCheck"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId0/checkUser","description":"Checks some account's existence","verb":"checkUser","notes":["Checks whether the given account already exists in this 'simple' authentication realm.","This verb returns all the information about the user, including non public fields."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ExistenceCheck","resolved":{"types":{"ExistenceCheck":{"type":"ExistenceCheck","javaClass":"com.zetapush.common.messages.simple.ExistenceCheck","fields":[{"type":"String","name":"key","description":"User key within the realm","required":true},{"type":"boolean","name":"softFail","description":"Whether to fail is the user does not exist. When true, fails silently."}],"anyField":false}}}},"responseInfo":{"type":"Map[String,Object]","resolved":{"types":{}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_ACCOUNT","desc":"The given account key in this realm (login) does not match an existing account."}]},"returnedType":{"typeName":"Map<String,Object>","imports":["java.util.Map","java.lang.Object","java.lang.String"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId0/requestReset","description":"Requests a password reset","verb":"requestReset","notes":["Requests a password reset for the given unique account key.","The account key must exist and must be given, as it cannot obviously be deduced from the currently logged in user.","The returned token needs to be sent to the intended recipient only. The typical use case is to define a macro that requests a reset, generates a email template and emails the user. The macro can then be safely called by a weakly authenticated user.","Requesting a reset does not invalidate the password.","Requesting a reset again invalidates previous reset requests (only the last token is usable)"],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ResetRequest","resolved":{"types":{"ResetRequest":{"type":"ResetRequest","javaClass":"com.zetapush.common.messages.simple.ResetRequest","fields":[{"type":"String","name":"key","description":"account key in the realm. (configured 'unique key' used for authentication). \n","required":true,"serverGenerated":false}],"anyField":false}}}},"responseInfo":{"type":"ResetInfo","resolved":{"types":{"ResetInfo":{"type":"ResetInfo","javaClass":"com.zetapush.common.messages.simple.ResetInfo","fields":[{"type":"String","name":"key","description":"account key in the realm. (configured 'unique key' used for authentication)"},{"type":"String","name":"token","description":"Server-provided temporary token to reset a password"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_ACCOUNT","desc":"The given account key in this realm (login) does not match an existing account."}]},"returnedType":{"typeName":"ResetInfo","imports":["com.zetapush.common.messages.simple.ResetInfo"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId0/changePassword","description":"Changes a password","verb":"changePassword","notes":["Changes a user password for this authentication realm.","The user can be either explicit, implicit (one of the current user's accounts) or deduced from the token.","You should provide at least one of 'key' and 'token'. If you do not, the server will try and find any key for the current user.","The change is effective immediately. However, already logged in users might stay connected.","The password and token fields are always null in the output."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ChangePasswordRequest","resolved":{"types":{"ChangePasswordRequest":{"type":"ChangePasswordRequest","javaClass":"com.zetapush.common.messages.simple.ChangePasswordRequest","fields":[{"type":"String","name":"token","description":"Server-provided temporary token to reset a password"},{"type":"String","name":"key","description":"account key in the realm. (configured 'unique key' used for authentication). \n","serverGenerated":false},{"type":"String","name":"password","description":"New password","required":true}],"anyField":false}}}},"responseInfo":{"type":"ChangePasswordRequest","resolved":{"types":{"ChangePasswordRequest":{"type":"ChangePasswordRequest","javaClass":"com.zetapush.common.messages.simple.ChangePasswordRequest","fields":[{"type":"String","name":"key","description":"account key in the realm. (configured 'unique key' used for authentication)"},{"type":"String","name":"password","description":"New password","required":true},{"type":"String","name":"token","description":"Server-provided temporary token to reset a password"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NO_ACCOUNT","desc":"The given account key in this realm (login) does not match an existing account."}]},"returnedType":{"typeName":"ChangePasswordRequest","imports":["com.zetapush.common.messages.simple.ChangePasswordRequest"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId0/checkPassword","description":"Checks the password for the given account","verb":"checkPassword","notes":[],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CheckPasswordRequest","resolved":{"types":{"CheckPasswordRequest":{"type":"CheckPasswordRequest","javaClass":"com.zetapush.common.messages.simple.CheckPasswordRequest","fields":[{"type":"String","name":"key","description":"account key in the realm. (configured 'unique key' used for authentication). \n","required":true,"serverGenerated":false},{"type":"String","name":"password","description":"Password to be checked","required":true}],"anyField":false}}}},"responseInfo":{"type":"CheckPasswordResult","resolved":{"types":{"CheckPasswordResult":{"type":"CheckPasswordResult","javaClass":"com.zetapush.common.messages.simple.CheckPasswordResult","fields":[{"type":"String","name":"key","description":"account key in the realm. (configured 'unique key' used for authentication)"},{"type":"boolean","name":"matches","description":"Whether the password matches"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"CheckPasswordResult","imports":["com.zetapush.common.messages.simple.CheckPasswordResult"]}}]},{"clazz":"com.zetapush.str.services.template.TemplateService","name":"Template","itemId":"template","desc":"User API for templates","notes":["Users use this API to evaluate pre-configured templates."],"verbs":[{"name":"evaluate","type":{"typeName":"TemplateRequest","imports":["com.zetapush.common.messages.template.TemplateRequest"]},"returnType":{"typeName":"TemplateResult","imports":["com.zetapush.common.messages.template.TemplateResult"]},"desc":"Evaluates a template","notes":["Evaluates the given template and returns the result as a string.","Templates are parsed the first time they are evaluated. Evaluation may fail early due to a parsing error."],"verbInfo":{"desc":"Evaluates a template","deprecation":"","notes":["Evaluates the given template and returns the result as a string.","Templates are parsed the first time they are evaluated. Evaluation may fail early due to a parsing error."],"relatedClasses":[],"errors":[{"code":"PARSE_EXCEPTION","desc":"Parsing error. The template syntax is incorrect. The detailed error message at run-time may help you debug."},{"code":"EVALUATION_EXCEPTION","desc":"Evaluation error. The template syntax is correct, but the template was not fed the data it expects."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId21/evaluate","description":"Evaluates a template","verb":"evaluate","notes":["Evaluates the given template and returns the result as a string.","Templates are parsed the first time they are evaluated. Evaluation may fail early due to a parsing error."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TemplateRequest","resolved":{"types":{"TemplateRequest":{"type":"TemplateRequest","javaClass":"com.zetapush.common.messages.template.TemplateRequest","fields":[{"type":"Map[String,Object]","name":"data","description":"Data model","required":true},{"type":"String","name":"languageTag","description":"Locale, as defined by IETF BCP 47"},{"type":"String","name":"name","description":"Template name, as configured by an admin","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"TemplateResult","resolved":{"types":{"TemplateResult":{"type":"TemplateResult","javaClass":"com.zetapush.common.messages.template.TemplateResult","fields":[{"type":"String","name":"content","description":"Result of template evaluation"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"PARSE_EXCEPTION","desc":"Parsing error. The template syntax is incorrect. The detailed error message at run-time may help you debug."},{"code":"EVALUATION_EXCEPTION","desc":"Evaluation error. The template syntax is correct, but the template was not fed the data it expects."}]},"traceable":true}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId21/evaluate","description":"Evaluates a template","verb":"evaluate","notes":["Evaluates the given template and returns the result as a string.","Templates are parsed the first time they are evaluated. Evaluation may fail early due to a parsing error."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TemplateRequest","resolved":{"types":{"TemplateRequest":{"type":"TemplateRequest","javaClass":"com.zetapush.common.messages.template.TemplateRequest","fields":[{"type":"Map[String,Object]","name":"data","description":"Data model","required":true},{"type":"String","name":"languageTag","description":"Locale, as defined by IETF BCP 47"},{"type":"String","name":"name","description":"Template name, as configured by an admin","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"TemplateResult","resolved":{"types":{"TemplateResult":{"type":"TemplateResult","javaClass":"com.zetapush.common.messages.template.TemplateResult","fields":[{"type":"String","name":"content","description":"Result of template evaluation"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"PARSE_EXCEPTION","desc":"Parsing error. The template syntax is incorrect. The detailed error message at run-time may help you debug."},{"code":"EVALUATION_EXCEPTION","desc":"Evaluation error. The template syntax is correct, but the template was not fed the data it expects."}]},"returnedType":{"typeName":"TemplateResult","imports":["com.zetapush.common.messages.template.TemplateResult"]}}]},{"clazz":"com.zetapush.str.services.zpfs.hdfs.HdfsUploadService","name":"Zpfs_hdfs","itemId":"zpfs_hdfs","desc":"User API for local file management","notes":["User API for file content manipulation","User API for virtual file management and http file upload","This API contains all the verbs needed to browse, upload and remove files.","Files are stored on a per-user basis: each user has his or her own whole virtual filesystem.","Uploading a file is a 3-step process : request an upload URL, upload via HTTP, notify this service of completion."],"verbs":[{"name":"readToken","type":{"typeName":"ZpfsRequest","imports":["com.zetapush.common.messages.filestorage.ZpfsRequest"]},"returnType":{"typeName":"ZpfsToken","imports":["com.zetapush.common.messages.filestorage.ZpfsToken"]},"desc":"Requests an HTTP GET token","notes":["Requests a token. This token can be used to retrieve a compressed folder via HTTP."],"verbInfo":{"desc":"Requests an HTTP GET token","deprecation":"","notes":["Requests a token. This token can be used to retrieve a compressed folder via HTTP."],"relatedClasses":[],"errors":[{"code":"NOT_FOUND","desc":"Source file not found."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId12/readToken","description":"Requests an HTTP GET token","verb":"readToken","action":"readToken","notes":["Requests a token. This token can be used to retrieve a compressed folder via HTTP."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ZpfsRequest","resolved":{"types":{"ZpfsRequest":{"type":"ZpfsRequest","javaClass":"com.zetapush.common.messages.filestorage.ZpfsRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"ZpfsToken","resolved":{"types":{"ZpfsToken":{"type":"ZpfsToken","javaClass":"com.zetapush.common.messages.filestorage.ZpfsToken","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"token","description":"Access token for the folder"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"Source file not found."}]},"traceable":true},{"name":"create","type":{"typeName":"FileCreationRequest","imports":["com.zetapush.common.messages.filestorage.FileCreationRequest"]},"returnType":{"typeName":"ListingEntryInfo","imports":["com.zetapush.common.messages.filestorage.ListingEntryInfo"]},"desc":"Creates a new file","notes":["Creates a file, writes content and closes the file as a single operation.","Calling this verb is functionnally equivalent to successively calling 'newUploadUrl', posting the content and calling 'newFile'"],"verbInfo":{"desc":"Creates a new file","deprecation":"","notes":["Creates a file, writes content and closes the file as a single operation.","Calling this verb is functionnally equivalent to successively calling 'newUploadUrl', posting the content and calling 'newFile'"],"relatedClasses":[],"errors":[{"code":"NOT_FOUND","desc":"Source file not found."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId12/create","description":"Creates a new file","verb":"create","action":"create","notes":["Creates a file, writes content and closes the file as a single operation.","Calling this verb is functionnally equivalent to successively calling 'newUploadUrl', posting the content and calling 'newFile'"],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileCreationRequest","resolved":{"types":{"FileCreationRequest":{"type":"FileCreationRequest","javaClass":"com.zetapush.common.messages.filestorage.FileCreationRequest","fields":[{"type":"String","name":"contentType","description":"Content type (matches the value of the HTTP content type header)"},{"type":"Object","name":"data","description":"Contents. Can be a String (will be stored as UTF-8), a byte array","required":true},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"}],"anyField":false}}}},"responseInfo":{"type":"ListingEntryInfo","resolved":{"types":{"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"Source file not found."}]},"traceable":true},{"name":"open","type":{"typeName":"ZpfsRequest","imports":["com.zetapush.common.messages.filestorage.ZpfsRequest"]},"returnType":{"typeName":"ZpfsFileHandler","imports":["com.zetapush.common.messages.filestorage.ZpfsFileHandler"]},"desc":"Opens a file","notes":["Opens a file for reading."],"verbInfo":{"desc":"Opens a file","deprecation":"","notes":["Opens a file for reading."],"relatedClasses":[],"errors":[{"code":"NOT_FOUND","desc":"Source file not found."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId12/open","description":"Opens a file","verb":"open","action":"open","notes":["Opens a file for reading."],"serverOnly":true,"clientOnly":false,"slaveDisabled":true,"paramInfo":{"type":"ZpfsRequest","resolved":{"types":{"ZpfsRequest":{"type":"ZpfsRequest","javaClass":"com.zetapush.common.messages.filestorage.ZpfsRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"ZpfsFileHandler","resolved":{"types":{"ZpfsFileHandler":{"type":"ZpfsFileHandler","javaClass":"com.zetapush.common.messages.filestorage.ZpfsFileHandler","fields":[{"type":"Object","name":"handle","description":"Opaque file handler, for use by 'read' calls."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"Source file not found."}]},"traceable":false},{"name":"link","type":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]},"returnType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]},"desc":"Links a file","notes":["Links a file or folder to another location.","May fail if the target location is not empty."],"verbInfo":{"desc":"Links a file","deprecation":"","notes":["Links a file or folder to another location.","May fail if the target location is not empty."],"relatedClasses":[],"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId12/link","description":"Links a file","verb":"link","action":"link","notes":["Links a file or folder to another location.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}]},"traceable":true},{"name":"stat","type":{"typeName":"FileStatRequest","imports":["com.zetapush.common.messages.filestorage.FileStatRequest"]},"returnType":{"typeName":"FileStatResult","imports":["com.zetapush.common.messages.filestorage.FileStatResult"]},"desc":"Returns information about a file","notes":["Returns information about a single file.","The entry field will be null if the path does not exist"],"verbInfo":{"desc":"Returns information about a file","deprecation":"","notes":["Returns information about a single file.","The entry field will be null if the path does not exist"],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId12/stat","description":"Returns information about a file","verb":"stat","action":"stat","notes":["Returns information about a single file.","The entry field will be null if the path does not exist"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileStatRequest","resolved":{"types":{"FileStatRequest":{"type":"FileStatRequest","javaClass":"com.zetapush.common.messages.filestorage.FileStatRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileStatResult","resolved":{"types":{"FileStatResult":{"type":"FileStatResult","javaClass":"com.zetapush.common.messages.filestorage.FileStatResult","fields":[{"type":"ListingEntryInfo","name":"entry","description":"File information. Null if file does not exist"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true},{"name":"cp","type":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]},"returnType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]},"desc":"Copies a file","notes":["Copies a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"verbInfo":{"desc":"Copies a file","deprecation":"","notes":["Copies a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"relatedClasses":[],"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId12/cp","description":"Copies a file","verb":"cp","action":"cp","notes":["Copies a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}]},"traceable":true},{"name":"ls","type":{"typeName":"FolderListingRequest","imports":["com.zetapush.common.messages.filestorage.FolderListingRequest"]},"returnType":{"typeName":"FolderListing","imports":["com.zetapush.common.messages.filestorage.FolderListing"]},"desc":"Lists a folder content","notes":["Returns a paginated list of the folder's content."],"verbInfo":{"desc":"Lists a folder content","deprecation":"","notes":["Returns a paginated list of the folder's content."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId12/ls","description":"Lists a folder content","verb":"ls","action":"ls","notes":["Returns a paginated list of the folder's content."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FolderListingRequest","resolved":{"types":{"FolderListingRequest":{"type":"FolderListingRequest","javaClass":"com.zetapush.common.messages.filestorage.FolderListingRequest","fields":[{"type":"String","name":"folder","description":"Folder path","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"FolderListing","resolved":{"types":{"FolderListing":{"type":"FolderListing","javaClass":"com.zetapush.common.messages.filestorage.FolderListing","fields":[{"type":"PageContent[ListingEntryInfo]","name":"entries","description":"Entries in the folder"},{"type":"boolean","name":"exists","description":"Whether the path exists"},{"type":"String","name":"folder","description":"Folder path"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true},{"name":"mv","type":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]},"returnType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]},"desc":"Moves a file","notes":["Moves a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"verbInfo":{"desc":"Moves a file","deprecation":"","notes":["Moves a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"relatedClasses":[],"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId12/mv","description":"Moves a file","verb":"mv","action":"mv","notes":["Moves a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}]},"traceable":true},{"name":"snapshot","type":{"typeName":"SnapshotCreationRequest","imports":["com.zetapush.common.messages.filestorage.SnapshotCreationRequest"]},"returnType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]},"desc":"Creates a snapshot in a new folder","notes":["Creates a new folder and then copies the given files inside"],"verbInfo":{"desc":"Creates a snapshot in a new folder","deprecation":"","notes":["Creates a new folder and then copies the given files inside"],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId12/snapshot","description":"Creates a snapshot in a new folder","verb":"snapshot","action":"snapshot","notes":["Creates a new folder and then copies the given files inside"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"SnapshotCreationRequest","resolved":{"types":{"SnapshotCreationRequest":{"type":"SnapshotCreationRequest","javaClass":"com.zetapush.common.messages.filestorage.SnapshotCreationRequest","fields":[{"type":"boolean","name":"flatten","description":"Whether to flatten source paths. Setting this to true might lead to name conflicts"},{"type":"String","name":"folder","description":"Folder name","required":true},{"type":"List[SnapshotItem]","name":"items","description":"Items to be copied"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"boolean","name":"parents","description":"Whether to create all non-existing parents. Defaults to false."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"SnapshotItem":{"type":"SnapshotItem","javaClass":"com.zetapush.common.messages.filestorage.SnapshotCreationRequest.SnapshotItem","fields":[{"type":"boolean","name":"caseInsensitive","description":"Whether to taken case into account. Defaults to false : case is important"},{"type":"List[String]","name":"excludes","description":"Patterns for files that should be excluded. Used only when path is a folder. Exclusions have precedence over inclusions"},{"type":"List[String]","name":"includes","description":"Patterns for files that should be included. Used only when path is a folder"},{"type":"String","name":"path","description":"Path of the file to be included."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"traceable":true},{"name":"du","type":{"typeName":"ZpfsRequest","imports":["com.zetapush.common.messages.filestorage.ZpfsRequest"]},"returnType":{"typeName":"ZpfsDiskUsage","imports":["com.zetapush.common.messages.filestorage.ZpfsDiskUsage"]},"desc":"Returns disk usage","notes":["Returns an recursively aggregated number of used bytes, starting at the given path."],"verbInfo":{"desc":"Returns disk usage","deprecation":"","notes":["Returns an recursively aggregated number of used bytes, starting at the given path."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId12/du","description":"Returns disk usage","verb":"du","action":"du","notes":["Returns an recursively aggregated number of used bytes, starting at the given path."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ZpfsRequest","resolved":{"types":{"ZpfsRequest":{"type":"ZpfsRequest","javaClass":"com.zetapush.common.messages.filestorage.ZpfsRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"ZpfsDiskUsage","resolved":{"types":{"ZpfsDiskUsage":{"type":"ZpfsDiskUsage","javaClass":"com.zetapush.common.messages.filestorage.ZpfsDiskUsage","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"long","name":"usage","description":"Disk usage in bytes"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true},{"name":"rm","type":{"typeName":"FileRemoval","imports":["com.zetapush.common.messages.filestorage.FileRemoval"]},"returnType":{"typeName":"FileRemoval","imports":["com.zetapush.common.messages.filestorage.FileRemoval"]},"desc":"Removes a file","notes":["Removes a file or folder (recursively)."],"verbInfo":{"desc":"Removes a file","deprecation":"","notes":["Removes a file or folder (recursively)."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId12/rm","description":"Removes a file","verb":"rm","action":"rm","notes":["Removes a file or folder (recursively)."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileRemoval","resolved":{"types":{"FileRemoval":{"type":"FileRemoval","javaClass":"com.zetapush.common.messages.filestorage.FileRemoval","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileRemoval","resolved":{"types":{"FileRemoval":{"type":"FileRemoval","javaClass":"com.zetapush.common.messages.filestorage.FileRemoval","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"traceable":true},{"name":"freeUploadUrl","type":{"typeName":"FileUploadRequest","imports":["com.zetapush.common.messages.filestorage.FileUploadRequest"]},"returnType":{"typeName":"FileUploadLocation","imports":["com.zetapush.common.messages.filestorage.FileUploadLocation"]},"desc":"Requests an upload URL without constraints.","listenerInfo":{"channel":"/service/BU_ID/depId12/freeUploadUrl","description":"Requests an upload URL without constraints.","verb":"freeUploadUrl","action":"free_upload_url","serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileUploadRequest","resolved":{"types":{"FileUploadRequest":{"type":"FileUploadRequest","javaClass":"com.zetapush.common.messages.filestorage.FileUploadRequest","fields":[{"type":"String","name":"contentType","description":"Content type (matches the value of the HTTP content type header)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileUploadLocation","resolved":{"types":{"FileUploadLocation":{"type":"FileUploadLocation","javaClass":"com.zetapush.common.messages.filestorage.FileUploadLocation","fields":[{"type":"String","name":"guid","description":"GUID of the uploaded file"},{"type":"String","name":"httpMethod","description":"HTTP method, typically POST or PUT"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"url","description":"Upload URL for the http client"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true},{"name":"newUploadUrl","type":{"typeName":"FileUploadRequest","imports":["com.zetapush.common.messages.filestorage.FileUploadRequest"]},"returnType":{"typeName":"FileUploadLocation","imports":["com.zetapush.common.messages.filestorage.FileUploadLocation"]},"desc":"Requests an upload URL","notes":["Requests an HTTP upload URL.","The URL contains temporary credentials (typically valid for a few minutes) and is meant for immediate use."],"verbInfo":{"desc":"","deprecation":"","notes":["Requests an HTTP upload URL.","The URL contains temporary credentials (typically valid for a few minutes) and is meant for immediate use."],"relatedClasses":[],"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId12/newUploadUrl","description":"Requests an upload URL","verb":"newUploadUrl","action":"newUploadUrl","notes":["Requests an HTTP upload URL.","The URL contains temporary credentials (typically valid for a few minutes) and is meant for immediate use."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileUploadRequest","resolved":{"types":{"FileUploadRequest":{"type":"FileUploadRequest","javaClass":"com.zetapush.common.messages.filestorage.FileUploadRequest","fields":[{"type":"String","name":"contentType","description":"Content type (matches the value of the HTTP content type header)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileUploadLocation","resolved":{"types":{"FileUploadLocation":{"type":"FileUploadLocation","javaClass":"com.zetapush.common.messages.filestorage.FileUploadLocation","fields":[{"type":"String","name":"guid","description":"GUID of the uploaded file"},{"type":"String","name":"httpMethod","description":"HTTP method, typically POST or PUT"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"url","description":"Upload URL for the http client"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."}]},"traceable":true},{"name":"updateMeta","type":{"typeName":"FileMetaUpdate","imports":["com.zetapush.common.messages.filestorage.FileMetaUpdate"]},"returnType":{"typeName":"ListingEntryInfo","imports":["com.zetapush.common.messages.filestorage.ListingEntryInfo"]},"desc":"Updates a file's metadata","listenerInfo":{"channel":"/service/BU_ID/depId12/updateMeta","description":"Updates a file's metadata","verb":"updateMeta","action":"free_upload_url","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileMetaUpdate","resolved":{"types":{"FileMetaUpdate":{"type":"FileMetaUpdate","javaClass":"com.zetapush.common.messages.filestorage.FileMetaUpdate","fields":[{"type":"Map[String,Object]","name":"metadata","description":"Metadata to be updated"},{"type":"Map[String,String]","name":"metadataFiles","description":"Metadata to be processed and updated. Values are translated from GUIDs to URLs by the underlying storage provider"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"ListingEntryInfo","resolved":{"types":{"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"traceable":true},{"name":"newFile","type":{"typeName":"FileUploadComplete","imports":["com.zetapush.common.messages.filestorage.FileUploadComplete"]},"returnType":{"typeName":"ListingEntryInfo","imports":["com.zetapush.common.messages.filestorage.ListingEntryInfo"]},"desc":"Notifies of upload completion","notes":["The client application calls this verb to notify that it's done uploading to the cloud.","Calling that verb MAY trigger additional events such as thumbnail/metadata creation."],"verbInfo":{"desc":"","deprecation":"","notes":["The client application calls this verb to notify that it's done uploading to the cloud.","Calling that verb MAY trigger additional events such as thumbnail/metadata creation."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId12/newFile","description":"Notifies of upload completion","verb":"newFile","action":"newFile","notes":["The client application calls this verb to notify that it's done uploading to the cloud.","Calling that verb MAY trigger additional events such as thumbnail/metadata creation."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileUploadComplete","resolved":{"types":{"FileUploadComplete":{"type":"FileUploadComplete","javaClass":"com.zetapush.common.messages.filestorage.FileUploadComplete","fields":[{"type":"String","name":"guid","description":"File GUID","required":true},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"}],"anyField":false}}}},"responseInfo":{"type":"ListingEntryInfo","resolved":{"types":{"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"traceable":true},{"name":"mkdir","type":{"typeName":"FolderCreationRequest","imports":["com.zetapush.common.messages.filestorage.FolderCreationRequest"]},"returnType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]},"desc":"Creates a folder","notes":["Creates a new folder.","May fail if the target location is not empty."],"verbInfo":{"desc":"Creates a folder","deprecation":"","notes":["Creates a new folder.","May fail if the target location is not empty."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId12/mkdir","description":"Creates a folder","verb":"mkdir","action":"mkdir","notes":["Creates a new folder.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FolderCreationRequest","resolved":{"types":{"FolderCreationRequest":{"type":"FolderCreationRequest","javaClass":"com.zetapush.common.messages.filestorage.FolderCreationRequest","fields":[{"type":"String","name":"folder","description":"Folder name","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"boolean","name":"parents","description":"Whether to create all non-existing parents. Defaults to false."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"traceable":true}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId12/readToken","description":"Requests an HTTP GET token","verb":"readToken","action":"readToken","notes":["Requests a token. This token can be used to retrieve a compressed folder via HTTP."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ZpfsRequest","resolved":{"types":{"ZpfsRequest":{"type":"ZpfsRequest","javaClass":"com.zetapush.common.messages.filestorage.ZpfsRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"ZpfsToken","resolved":{"types":{"ZpfsToken":{"type":"ZpfsToken","javaClass":"com.zetapush.common.messages.filestorage.ZpfsToken","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"token","description":"Access token for the folder"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"Source file not found."}]},"returnedType":{"typeName":"ZpfsToken","imports":["com.zetapush.common.messages.filestorage.ZpfsToken"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId12/create","description":"Creates a new file","verb":"create","action":"create","notes":["Creates a file, writes content and closes the file as a single operation.","Calling this verb is functionnally equivalent to successively calling 'newUploadUrl', posting the content and calling 'newFile'"],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileCreationRequest","resolved":{"types":{"FileCreationRequest":{"type":"FileCreationRequest","javaClass":"com.zetapush.common.messages.filestorage.FileCreationRequest","fields":[{"type":"String","name":"contentType","description":"Content type (matches the value of the HTTP content type header)"},{"type":"Object","name":"data","description":"Contents. Can be a String (will be stored as UTF-8), a byte array","required":true},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"}],"anyField":false}}}},"responseInfo":{"type":"ListingEntryInfo","resolved":{"types":{"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"Source file not found."}]},"returnedType":{"typeName":"ListingEntryInfo","imports":["com.zetapush.common.messages.filestorage.ListingEntryInfo"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId12/open","description":"Opens a file","verb":"open","action":"open","notes":["Opens a file for reading."],"serverOnly":true,"clientOnly":false,"slaveDisabled":true,"paramInfo":{"type":"ZpfsRequest","resolved":{"types":{"ZpfsRequest":{"type":"ZpfsRequest","javaClass":"com.zetapush.common.messages.filestorage.ZpfsRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"ZpfsFileHandler","resolved":{"types":{"ZpfsFileHandler":{"type":"ZpfsFileHandler","javaClass":"com.zetapush.common.messages.filestorage.ZpfsFileHandler","fields":[{"type":"Object","name":"handle","description":"Opaque file handler, for use by 'read' calls."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"NOT_FOUND","desc":"Source file not found."}]},"returnedType":{"typeName":"ZpfsFileHandler","imports":["com.zetapush.common.messages.filestorage.ZpfsFileHandler"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId12/link","description":"Links a file","verb":"link","action":"link","notes":["Links a file or folder to another location.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}]},"returnedType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId12/stat","description":"Returns information about a file","verb":"stat","action":"stat","notes":["Returns information about a single file.","The entry field will be null if the path does not exist"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileStatRequest","resolved":{"types":{"FileStatRequest":{"type":"FileStatRequest","javaClass":"com.zetapush.common.messages.filestorage.FileStatRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileStatResult","resolved":{"types":{"FileStatResult":{"type":"FileStatResult","javaClass":"com.zetapush.common.messages.filestorage.FileStatResult","fields":[{"type":"ListingEntryInfo","name":"entry","description":"File information. Null if file does not exist"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"FileStatResult","imports":["com.zetapush.common.messages.filestorage.FileStatResult"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId12/cp","description":"Copies a file","verb":"cp","action":"cp","notes":["Copies a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}]},"returnedType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId12/ls","description":"Lists a folder content","verb":"ls","action":"ls","notes":["Returns a paginated list of the folder's content."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FolderListingRequest","resolved":{"types":{"FolderListingRequest":{"type":"FolderListingRequest","javaClass":"com.zetapush.common.messages.filestorage.FolderListingRequest","fields":[{"type":"String","name":"folder","description":"Folder path","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"FolderListing","resolved":{"types":{"FolderListing":{"type":"FolderListing","javaClass":"com.zetapush.common.messages.filestorage.FolderListing","fields":[{"type":"PageContent[ListingEntryInfo]","name":"entries","description":"Entries in the folder"},{"type":"boolean","name":"exists","description":"Whether the path exists"},{"type":"String","name":"folder","description":"Folder path"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"FolderListing","imports":["com.zetapush.common.messages.filestorage.FolderListing"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId12/mv","description":"Moves a file","verb":"mv","action":"mv","notes":["Moves a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}]},"returnedType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId12/snapshot","description":"Creates a snapshot in a new folder","verb":"snapshot","action":"snapshot","notes":["Creates a new folder and then copies the given files inside"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"SnapshotCreationRequest","resolved":{"types":{"SnapshotCreationRequest":{"type":"SnapshotCreationRequest","javaClass":"com.zetapush.common.messages.filestorage.SnapshotCreationRequest","fields":[{"type":"boolean","name":"flatten","description":"Whether to flatten source paths. Setting this to true might lead to name conflicts"},{"type":"String","name":"folder","description":"Folder name","required":true},{"type":"List[SnapshotItem]","name":"items","description":"Items to be copied"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"boolean","name":"parents","description":"Whether to create all non-existing parents. Defaults to false."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"SnapshotItem":{"type":"SnapshotItem","javaClass":"com.zetapush.common.messages.filestorage.SnapshotCreationRequest.SnapshotItem","fields":[{"type":"boolean","name":"caseInsensitive","description":"Whether to taken case into account. Defaults to false : case is important"},{"type":"List[String]","name":"excludes","description":"Patterns for files that should be excluded. Used only when path is a folder. Exclusions have precedence over inclusions"},{"type":"List[String]","name":"includes","description":"Patterns for files that should be included. Used only when path is a folder"},{"type":"String","name":"path","description":"Path of the file to be included."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId12/du","description":"Returns disk usage","verb":"du","action":"du","notes":["Returns an recursively aggregated number of used bytes, starting at the given path."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ZpfsRequest","resolved":{"types":{"ZpfsRequest":{"type":"ZpfsRequest","javaClass":"com.zetapush.common.messages.filestorage.ZpfsRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"ZpfsDiskUsage","resolved":{"types":{"ZpfsDiskUsage":{"type":"ZpfsDiskUsage","javaClass":"com.zetapush.common.messages.filestorage.ZpfsDiskUsage","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"long","name":"usage","description":"Disk usage in bytes"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"ZpfsDiskUsage","imports":["com.zetapush.common.messages.filestorage.ZpfsDiskUsage"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId12/rm","description":"Removes a file","verb":"rm","action":"rm","notes":["Removes a file or folder (recursively)."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileRemoval","resolved":{"types":{"FileRemoval":{"type":"FileRemoval","javaClass":"com.zetapush.common.messages.filestorage.FileRemoval","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileRemoval","resolved":{"types":{"FileRemoval":{"type":"FileRemoval","javaClass":"com.zetapush.common.messages.filestorage.FileRemoval","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"FileRemoval","imports":["com.zetapush.common.messages.filestorage.FileRemoval"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId12/freeUploadUrl","description":"Requests an upload URL without constraints.","verb":"freeUploadUrl","action":"free_upload_url","serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileUploadRequest","resolved":{"types":{"FileUploadRequest":{"type":"FileUploadRequest","javaClass":"com.zetapush.common.messages.filestorage.FileUploadRequest","fields":[{"type":"String","name":"contentType","description":"Content type (matches the value of the HTTP content type header)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileUploadLocation","resolved":{"types":{"FileUploadLocation":{"type":"FileUploadLocation","javaClass":"com.zetapush.common.messages.filestorage.FileUploadLocation","fields":[{"type":"String","name":"guid","description":"GUID of the uploaded file"},{"type":"String","name":"httpMethod","description":"HTTP method, typically POST or PUT"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"url","description":"Upload URL for the http client"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"FileUploadLocation","imports":["com.zetapush.common.messages.filestorage.FileUploadLocation"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId12/newUploadUrl","description":"Requests an upload URL","verb":"newUploadUrl","action":"newUploadUrl","notes":["Requests an HTTP upload URL.","The URL contains temporary credentials (typically valid for a few minutes) and is meant for immediate use."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileUploadRequest","resolved":{"types":{"FileUploadRequest":{"type":"FileUploadRequest","javaClass":"com.zetapush.common.messages.filestorage.FileUploadRequest","fields":[{"type":"String","name":"contentType","description":"Content type (matches the value of the HTTP content type header)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileUploadLocation","resolved":{"types":{"FileUploadLocation":{"type":"FileUploadLocation","javaClass":"com.zetapush.common.messages.filestorage.FileUploadLocation","fields":[{"type":"String","name":"guid","description":"GUID of the uploaded file"},{"type":"String","name":"httpMethod","description":"HTTP method, typically POST or PUT"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"url","description":"Upload URL for the http client"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."}]},"returnedType":{"typeName":"FileUploadLocation","imports":["com.zetapush.common.messages.filestorage.FileUploadLocation"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId12/updateMeta","description":"Updates a file's metadata","verb":"updateMeta","action":"free_upload_url","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileMetaUpdate","resolved":{"types":{"FileMetaUpdate":{"type":"FileMetaUpdate","javaClass":"com.zetapush.common.messages.filestorage.FileMetaUpdate","fields":[{"type":"Map[String,Object]","name":"metadata","description":"Metadata to be updated"},{"type":"Map[String,String]","name":"metadataFiles","description":"Metadata to be processed and updated. Values are translated from GUIDs to URLs by the underlying storage provider"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"ListingEntryInfo","resolved":{"types":{"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"ListingEntryInfo","imports":["com.zetapush.common.messages.filestorage.ListingEntryInfo"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId12/newFile","description":"Notifies of upload completion","verb":"newFile","action":"newFile","notes":["The client application calls this verb to notify that it's done uploading to the cloud.","Calling that verb MAY trigger additional events such as thumbnail/metadata creation."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileUploadComplete","resolved":{"types":{"FileUploadComplete":{"type":"FileUploadComplete","javaClass":"com.zetapush.common.messages.filestorage.FileUploadComplete","fields":[{"type":"String","name":"guid","description":"File GUID","required":true},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"}],"anyField":false}}}},"responseInfo":{"type":"ListingEntryInfo","resolved":{"types":{"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"ListingEntryInfo","imports":["com.zetapush.common.messages.filestorage.ListingEntryInfo"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId12/mkdir","description":"Creates a folder","verb":"mkdir","action":"mkdir","notes":["Creates a new folder.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FolderCreationRequest","resolved":{"types":{"FolderCreationRequest":{"type":"FolderCreationRequest","javaClass":"com.zetapush.common.messages.filestorage.FolderCreationRequest","fields":[{"type":"String","name":"folder","description":"Folder name","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"boolean","name":"parents","description":"Whether to create all non-existing parents. Defaults to false."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]}}]},{"clazz":"com.zetapush.str.services.trigger.TriggerService","name":"Trigger","itemId":"trigger","desc":"Trigger service","notes":["Register listeners and trigger events."],"verbs":[{"name":"trigger","type":{"typeName":"EventTrigger","imports":["com.zetapush.common.messages.trigger.EventTrigger"]},"desc":"Triggers an event","notes":["Triggers an event.","All listeners previously registered for that event will be called, in no particular order."],"verbInfo":{"desc":"","deprecation":"","notes":["Triggers an event.","All listeners previously registered for that event will be called, in no particular order."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId25/trigger","description":"Triggers an event","verb":"trigger","notes":["Triggers an event.","All listeners previously registered for that event will be called, in no particular order."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"EventTrigger","resolved":{"types":{"EventTrigger":{"type":"EventTrigger","javaClass":"com.zetapush.common.messages.trigger.EventTrigger","fields":[{"type":"Object","name":"data","description":"Event data"},{"type":"String","name":"event","description":"Event name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"errors":[]},"traceable":false}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId25/trigger","description":"Triggers an event","verb":"trigger","notes":["Triggers an event.","All listeners previously registered for that event will be called, in no particular order."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"EventTrigger","resolved":{"types":{"EventTrigger":{"type":"EventTrigger","javaClass":"com.zetapush.common.messages.trigger.EventTrigger","fields":[{"type":"Object","name":"data","description":"Event data"},{"type":"String","name":"event","description":"Event name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"errors":[]}}]},{"clazz":"com.zetapush.str.services.aggregation.AggregationService","name":"Aggreg","itemId":"aggreg","desc":"User API for item aggregation","notes":["Users can push data and be notified of aggregated data.","This service does not allow you to read the data. To achieve that kind of behavior, you could configure a callback to store the data."],"verbs":[{"name":"push","type":{"typeName":"AggregationPushes","imports":["com.zetapush.common.messages.aggregation.AggregationPushes"]},"desc":"Pushes some data","notes":["Pushes the given data.","All the items are processed according to the defined rules.","At least one push for a given item is needed during a time period to trigger processing and calling of the corresponding callback verb/macro."],"verbInfo":{"desc":"","deprecation":"","notes":["Pushes the given data.","All the items are processed according to the defined rules.","At least one push for a given item is needed during a time period to trigger processing and calling of the corresponding callback verb/macro."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId24/push","description":"Pushes some data","verb":"push","notes":["Pushes the given data.","All the items are processed according to the defined rules.","At least one push for a given item is needed during a time period to trigger processing and calling of the corresponding callback verb/macro."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"AggregationPushes","resolved":{"types":{"AggregationPushes":{"type":"AggregationPushes","javaClass":"com.zetapush.common.messages.aggregation.AggregationPushes","fields":[{"type":"List[AggregationPush]","name":"items","description":"List of items","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false},"AggregationPush":{"type":"AggregationPush","javaClass":"com.zetapush.common.messages.aggregation.AggregationPush","fields":[{"type":"String","name":"category","description":"Item category. Must match a defined category.","required":true},{"type":"String","name":"name","description":"Item name. Any item name, unique for the user. An item more or less matches an actual device or sensor, but it can also be for example a virtual sensor name if you are averaging temperatures from several physical sensors.","required":true},{"type":"Number","name":"value","description":"Numerical value : long for totals, floating point (double precision IEEE 754) for means","required":true}],"anyField":false}}}},"errors":[]},"traceable":false}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId24/push","description":"Pushes some data","verb":"push","notes":["Pushes the given data.","All the items are processed according to the defined rules.","At least one push for a given item is needed during a time period to trigger processing and calling of the corresponding callback verb/macro."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"AggregationPushes","resolved":{"types":{"AggregationPushes":{"type":"AggregationPushes","javaClass":"com.zetapush.common.messages.aggregation.AggregationPushes","fields":[{"type":"List[AggregationPush]","name":"items","description":"List of items","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false},"AggregationPush":{"type":"AggregationPush","javaClass":"com.zetapush.common.messages.aggregation.AggregationPush","fields":[{"type":"String","name":"category","description":"Item category. Must match a defined category.","required":true},{"type":"String","name":"name","description":"Item name. Any item name, unique for the user. An item more or less matches an actual device or sensor, but it can also be for example a virtual sensor name if you are averaging temperatures from several physical sensors.","required":true},{"type":"Number","name":"value","description":"Numerical value : long for totals, floating point (double precision IEEE 754) for means","required":true}],"anyField":false}}}},"errors":[]}}]},{"clazz":"com.zetapush.str.services.workflow.WorkflowService","name":"WorkflowService","itemId":"workflow","desc":"Simple workflow service : workflow usage API","notes":["Instantiate workflows.","Transition requests trigger the registered code for the target state."],"verbs":[{"name":"transition","type":{"typeName":"WorkflowTransitionRequest","imports":["com.zetapush.common.messages.workflow.WorkflowTransitionRequest"]},"returnType":{"typeName":"WorkflowTransitionRequest","imports":["com.zetapush.common.messages.workflow.WorkflowTransitionRequest"]},"desc":"Transitions this workflow to another state.","notes":["The wanted transition must be one of the allowed transitions of the workflow.","If the call is a macro, it has the possibility to prevent the transition by returning {'transition':'failed', 'message':'optional error message'}.","The transition is synchronous if and only if it triggers a macro (use the @Workflow ZMS annotation).","The data passed to the macro has the type 'WorkflowTransitionInfo'"],"verbInfo":{"desc":"","deprecation":"","notes":["The wanted transition must be one of the allowed transitions of the workflow.","If the call is a macro, it has the possibility to prevent the transition by returning {'transition':'failed', 'message':'optional error message'}.","The transition is synchronous if and only if it triggers a macro (use the @Workflow ZMS annotation).","The data passed to the macro has the type 'WorkflowTransitionInfo'"],"relatedClasses":["com.zetapush.common.messages.workflow.WorkflowTransitionInfo"],"errors":[{"code":"TRANSITION_FAILED","desc":"When the transition fails."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId26/transition","description":"Transitions this workflow to another state.","verb":"transition","action":"transition","notes":["The wanted transition must be one of the allowed transitions of the workflow.","If the call is a macro, it has the possibility to prevent the transition by returning {'transition':'failed', 'message':'optional error message'}.","The transition is synchronous if and only if it triggers a macro (use the @Workflow ZMS annotation).","The data passed to the macro has the type 'WorkflowTransitionInfo'"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"WorkflowTransitionRequest","resolved":{"types":{"WorkflowTransitionRequest":{"type":"WorkflowTransitionRequest","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"to","description":"Destination state","required":true},{"type":"Object","name":"userData","description":"User data. When not null, used to update the user-data field of the workflow instance"},{"type":"String","name":"workflow","description":"Workflow ID, as returned by 'create'","required":true}],"anyField":false}}}},"responseInfo":{"type":"WorkflowTransitionRequest","resolved":{"types":{"WorkflowTransitionRequest":{"type":"WorkflowTransitionRequest","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"to","description":"Destination state","required":true},{"type":"Object","name":"userData","description":"User data. When not null, used to update the user-data field of the workflow instance"},{"type":"String","name":"workflow","description":"Workflow ID, as returned by 'create'","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TRANSITION_FAILED","desc":"When the transition fails."}],"relatedTypes":{"types":{"WorkflowTransitionInfo":{"type":"WorkflowTransitionInfo","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionInfo","fields":[{"type":"long","name":"creation","description":"Creation timestamp of this workflow."},{"type":"String","name":"firstState","description":"First state of this workflow."},{"type":"String","name":"newState","description":"New state ID when the transition is complete."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"state","description":"Current state of this workflow."},{"type":"WorkflowTemplate","name":"template","description":"Template on which this workflow is based."},{"type":"Object","name":"userData","description":"User data for this workflow."},{"type":"String","name":"workflow","description":"Workflow ID, as returned by 'create'","required":true}],"anyField":false}}}},"traceable":true},{"name":"forceTransition","type":{"typeName":"WorkflowTransitionRequest","imports":["com.zetapush.common.messages.workflow.WorkflowTransitionRequest"]},"returnType":{"typeName":"WorkflowTransitionRequest","imports":["com.zetapush.common.messages.workflow.WorkflowTransitionRequest"]},"desc":"Forces a transition","notes":["The state is forcefully changed to the given state","Theoretically forbidden transitions are authorized.","Otherwise, this verb behaves as 'transition'"],"verbInfo":{"desc":"","deprecation":"","notes":["The state is forcefully changed to the given state","Theoretically forbidden transitions are authorized.","Otherwise, this verb behaves as 'transition'"],"relatedClasses":[],"errors":[{"code":"TRANSITION_FAILED","desc":"When the transition fails."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId26/forceTransition","description":"Forces a transition","verb":"forceTransition","action":"forceTransition","notes":["The state is forcefully changed to the given state","Theoretically forbidden transitions are authorized.","Otherwise, this verb behaves as 'transition'"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"WorkflowTransitionRequest","resolved":{"types":{"WorkflowTransitionRequest":{"type":"WorkflowTransitionRequest","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"to","description":"Destination state","required":true},{"type":"Object","name":"userData","description":"User data. When not null, used to update the user-data field of the workflow instance"},{"type":"String","name":"workflow","description":"Workflow ID, as returned by 'create'","required":true}],"anyField":false}}}},"responseInfo":{"type":"WorkflowTransitionRequest","resolved":{"types":{"WorkflowTransitionRequest":{"type":"WorkflowTransitionRequest","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"to","description":"Destination state","required":true},{"type":"Object","name":"userData","description":"User data. When not null, used to update the user-data field of the workflow instance"},{"type":"String","name":"workflow","description":"Workflow ID, as returned by 'create'","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"TRANSITION_FAILED","desc":"When the transition fails."}]},"traceable":true},{"name":"create","type":{"typeName":"WorkflowCreationRequest","imports":["com.zetapush.common.messages.workflow.WorkflowCreationRequest"]},"returnType":{"typeName":"WorkflowInfo","imports":["com.zetapush.common.messages.workflow.WorkflowInfo"]},"desc":"Creates a new workflow.","notes":[],"verbInfo":{"desc":"","deprecation":"","notes":[],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId26/create","description":"Creates a new workflow.","verb":"create","action":"create","notes":[],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"WorkflowCreationRequest","resolved":{"types":{"WorkflowCreationRequest":{"type":"WorkflowCreationRequest","javaClass":"com.zetapush.common.messages.workflow.WorkflowCreationRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"templateName","description":"Template on which this workflow is based.","required":true},{"type":"Object","name":"userData","description":"User data. Put your domain-specific data here. It can be a complex object or a simple reference to something that you store somewhere else."}],"anyField":false}}}},"responseInfo":{"type":"WorkflowInfo","resolved":{"types":{"WorkflowInfo":{"type":"WorkflowInfo","javaClass":"com.zetapush.common.messages.workflow.WorkflowInfo","fields":[{"type":"long","name":"creation","description":"Creation timestamp of this workflow."},{"type":"String","name":"firstState","description":"First state of this workflow."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"state","description":"Current state of this workflow."},{"type":"WorkflowTemplate","name":"template","description":"Template on which this workflow is based."},{"type":"Object","name":"userData","description":"User data for this workflow."},{"type":"String","name":"workflow","description":"Workflow ID, as returned by 'create'","required":true}],"anyField":false},"WorkflowStateDefinition":{"type":"WorkflowStateDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowStateDefinition","fields":[{"type":"String","name":"stateId","description":"ID of the state","required":true},{"type":"String","name":"stateName","description":"State name"}],"anyField":false},"WorkflowTemplate":{"type":"WorkflowTemplate","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplate","fields":[{"type":"List[WorkflowStateDefinition]","name":"states","description":"All the possible states of this workflow","required":true},{"type":"String","name":"templateName","description":"Unique template name","required":true},{"type":"List[WorkflowTransitionDefinition]","name":"transitions","description":"All the transitions of this workflow"}],"anyField":false},"WorkflowTransitionDefinition":{"type":"WorkflowTransitionDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionDefinition","fields":[{"type":"String","name":"from","description":"Starting state","required":true},{"type":"String","name":"to","description":"Destination state","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true},{"name":"list","type":{"typeName":"WorkflowList","imports":["com.zetapush.common.messages.workflow.WorkflowList"]},"returnType":{"typeName":"com.zetapush.common.messages.PageContent<com.zetapush.common.messages.workflow.WorkflowInfo>","imports":[]},"desc":"Lists this user's workflows.","notes":[],"verbInfo":{"desc":"","deprecation":"","notes":[],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId26/list","description":"Lists this user's workflows.","verb":"list","action":"list","notes":[],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"WorkflowList","resolved":{"types":{"WorkflowList":{"type":"WorkflowList","javaClass":"com.zetapush.common.messages.workflow.WorkflowList","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"PageContent[WorkflowInfo]","resolved":{"types":{"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"WorkflowInfo":{"type":"WorkflowInfo","javaClass":"com.zetapush.common.messages.workflow.WorkflowInfo","fields":[{"type":"long","name":"creation","description":"Creation timestamp of this workflow."},{"type":"String","name":"firstState","description":"First state of this workflow."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"state","description":"Current state of this workflow."},{"type":"WorkflowTemplate","name":"template","description":"Template on which this workflow is based."},{"type":"Object","name":"userData","description":"User data for this workflow."},{"type":"String","name":"workflow","description":"Workflow ID, as returned by 'create'","required":true}],"anyField":false},"WorkflowStateDefinition":{"type":"WorkflowStateDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowStateDefinition","fields":[{"type":"String","name":"stateId","description":"ID of the state","required":true},{"type":"String","name":"stateName","description":"State name"}],"anyField":false},"WorkflowTemplate":{"type":"WorkflowTemplate","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplate","fields":[{"type":"List[WorkflowStateDefinition]","name":"states","description":"All the possible states of this workflow","required":true},{"type":"String","name":"templateName","description":"Unique template name","required":true},{"type":"List[WorkflowTransitionDefinition]","name":"transitions","description":"All the transitions of this workflow"}],"anyField":false},"WorkflowTransitionDefinition":{"type":"WorkflowTransitionDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionDefinition","fields":[{"type":"String","name":"from","description":"Starting state","required":true},{"type":"String","name":"to","description":"Destination state","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":false}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId26/transition","description":"Transitions this workflow to another state.","verb":"transition","action":"transition","notes":["The wanted transition must be one of the allowed transitions of the workflow.","If the call is a macro, it has the possibility to prevent the transition by returning {'transition':'failed', 'message':'optional error message'}.","The transition is synchronous if and only if it triggers a macro (use the @Workflow ZMS annotation).","The data passed to the macro has the type 'WorkflowTransitionInfo'"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"WorkflowTransitionRequest","resolved":{"types":{"WorkflowTransitionRequest":{"type":"WorkflowTransitionRequest","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"to","description":"Destination state","required":true},{"type":"Object","name":"userData","description":"User data. When not null, used to update the user-data field of the workflow instance"},{"type":"String","name":"workflow","description":"Workflow ID, as returned by 'create'","required":true}],"anyField":false}}}},"responseInfo":{"type":"WorkflowTransitionRequest","resolved":{"types":{"WorkflowTransitionRequest":{"type":"WorkflowTransitionRequest","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"to","description":"Destination state","required":true},{"type":"Object","name":"userData","description":"User data. When not null, used to update the user-data field of the workflow instance"},{"type":"String","name":"workflow","description":"Workflow ID, as returned by 'create'","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TRANSITION_FAILED","desc":"When the transition fails."}],"relatedTypes":{"types":{"WorkflowTransitionInfo":{"type":"WorkflowTransitionInfo","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionInfo","fields":[{"type":"long","name":"creation","description":"Creation timestamp of this workflow."},{"type":"String","name":"firstState","description":"First state of this workflow."},{"type":"String","name":"newState","description":"New state ID when the transition is complete."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"state","description":"Current state of this workflow."},{"type":"WorkflowTemplate","name":"template","description":"Template on which this workflow is based."},{"type":"Object","name":"userData","description":"User data for this workflow."},{"type":"String","name":"workflow","description":"Workflow ID, as returned by 'create'","required":true}],"anyField":false}}}},"returnedType":{"typeName":"WorkflowTransitionRequest","imports":["com.zetapush.common.messages.workflow.WorkflowTransitionRequest"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId26/forceTransition","description":"Forces a transition","verb":"forceTransition","action":"forceTransition","notes":["The state is forcefully changed to the given state","Theoretically forbidden transitions are authorized.","Otherwise, this verb behaves as 'transition'"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"WorkflowTransitionRequest","resolved":{"types":{"WorkflowTransitionRequest":{"type":"WorkflowTransitionRequest","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"to","description":"Destination state","required":true},{"type":"Object","name":"userData","description":"User data. When not null, used to update the user-data field of the workflow instance"},{"type":"String","name":"workflow","description":"Workflow ID, as returned by 'create'","required":true}],"anyField":false}}}},"responseInfo":{"type":"WorkflowTransitionRequest","resolved":{"types":{"WorkflowTransitionRequest":{"type":"WorkflowTransitionRequest","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"to","description":"Destination state","required":true},{"type":"Object","name":"userData","description":"User data. When not null, used to update the user-data field of the workflow instance"},{"type":"String","name":"workflow","description":"Workflow ID, as returned by 'create'","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"TRANSITION_FAILED","desc":"When the transition fails."}]},"returnedType":{"typeName":"WorkflowTransitionRequest","imports":["com.zetapush.common.messages.workflow.WorkflowTransitionRequest"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId26/create","description":"Creates a new workflow.","verb":"create","action":"create","notes":[],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"WorkflowCreationRequest","resolved":{"types":{"WorkflowCreationRequest":{"type":"WorkflowCreationRequest","javaClass":"com.zetapush.common.messages.workflow.WorkflowCreationRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"templateName","description":"Template on which this workflow is based.","required":true},{"type":"Object","name":"userData","description":"User data. Put your domain-specific data here. It can be a complex object or a simple reference to something that you store somewhere else."}],"anyField":false}}}},"responseInfo":{"type":"WorkflowInfo","resolved":{"types":{"WorkflowInfo":{"type":"WorkflowInfo","javaClass":"com.zetapush.common.messages.workflow.WorkflowInfo","fields":[{"type":"long","name":"creation","description":"Creation timestamp of this workflow."},{"type":"String","name":"firstState","description":"First state of this workflow."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"state","description":"Current state of this workflow."},{"type":"WorkflowTemplate","name":"template","description":"Template on which this workflow is based."},{"type":"Object","name":"userData","description":"User data for this workflow."},{"type":"String","name":"workflow","description":"Workflow ID, as returned by 'create'","required":true}],"anyField":false},"WorkflowStateDefinition":{"type":"WorkflowStateDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowStateDefinition","fields":[{"type":"String","name":"stateId","description":"ID of the state","required":true},{"type":"String","name":"stateName","description":"State name"}],"anyField":false},"WorkflowTemplate":{"type":"WorkflowTemplate","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplate","fields":[{"type":"List[WorkflowStateDefinition]","name":"states","description":"All the possible states of this workflow","required":true},{"type":"String","name":"templateName","description":"Unique template name","required":true},{"type":"List[WorkflowTransitionDefinition]","name":"transitions","description":"All the transitions of this workflow"}],"anyField":false},"WorkflowTransitionDefinition":{"type":"WorkflowTransitionDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionDefinition","fields":[{"type":"String","name":"from","description":"Starting state","required":true},{"type":"String","name":"to","description":"Destination state","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"WorkflowInfo","imports":["com.zetapush.common.messages.workflow.WorkflowInfo"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId26/list","description":"Lists this user's workflows.","verb":"list","action":"list","notes":[],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"WorkflowList","resolved":{"types":{"WorkflowList":{"type":"WorkflowList","javaClass":"com.zetapush.common.messages.workflow.WorkflowList","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"PageContent[WorkflowInfo]","resolved":{"types":{"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"WorkflowInfo":{"type":"WorkflowInfo","javaClass":"com.zetapush.common.messages.workflow.WorkflowInfo","fields":[{"type":"long","name":"creation","description":"Creation timestamp of this workflow."},{"type":"String","name":"firstState","description":"First state of this workflow."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"state","description":"Current state of this workflow."},{"type":"WorkflowTemplate","name":"template","description":"Template on which this workflow is based."},{"type":"Object","name":"userData","description":"User data for this workflow."},{"type":"String","name":"workflow","description":"Workflow ID, as returned by 'create'","required":true}],"anyField":false},"WorkflowStateDefinition":{"type":"WorkflowStateDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowStateDefinition","fields":[{"type":"String","name":"stateId","description":"ID of the state","required":true},{"type":"String","name":"stateName","description":"State name"}],"anyField":false},"WorkflowTemplate":{"type":"WorkflowTemplate","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplate","fields":[{"type":"List[WorkflowStateDefinition]","name":"states","description":"All the possible states of this workflow","required":true},{"type":"String","name":"templateName","description":"Unique template name","required":true},{"type":"List[WorkflowTransitionDefinition]","name":"transitions","description":"All the transitions of this workflow"}],"anyField":false},"WorkflowTransitionDefinition":{"type":"WorkflowTransitionDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionDefinition","fields":[{"type":"String","name":"from","description":"Starting state","required":true},{"type":"String","name":"to","description":"Destination state","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"com.zetapush.common.messages.PageContent<com.zetapush.common.messages.workflow.WorkflowInfo>","imports":[]}}]},{"clazz":"com.zetapush.str.services.search.SearchService","name":"Search","itemId":"search","desc":"ElasticSearch Service","notes":["This API is a very thin wrapper around ElasticSearch's API."],"verbs":[{"name":"index","type":{"typeName":"SearchData","imports":["com.zetapush.common.messages.search.SearchData"]},"desc":"Indexes data","notes":["Inserts or updates a document into the elasticsearch engine."],"verbInfo":{"desc":"","deprecation":"","notes":["Inserts or updates a document into the elasticsearch engine."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId22/index","description":"Indexes data","verb":"index","notes":["Inserts or updates a document into the elasticsearch engine."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"SearchData","resolved":{"types":{"SearchData":{"type":"SearchData","javaClass":"com.zetapush.common.messages.search.SearchData","fields":[{"type":"Map[String,Object]","name":"data","description":"Document data","required":true},{"type":"String","name":"id","description":"Document id","required":true},{"type":"String","name":"index","description":"Index name","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"type","description":"Type name","required":true}],"anyField":false}}}},"errors":[{"code":"SEARCH_ERROR","desc":"General search error."},{"code":"SEARCH_MISSING_INDEX","desc":"Query on a non existing index."}]},"traceable":false},{"name":"get","type":{"typeName":"SearchDocumentId","imports":["com.zetapush.common.messages.search.SearchDocumentId"]},"returnType":{"typeName":"SearchData","imports":["com.zetapush.common.messages.search.SearchData"]},"desc":"Gets data","notes":["Retrieves a document from the elasticsearch engine by id."],"verbInfo":{"desc":"","deprecation":"","notes":["Retrieves a document from the elasticsearch engine by id."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId22/get","description":"Gets data","verb":"get","notes":["Retrieves a document from the elasticsearch engine by id."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"SearchDocumentId","resolved":{"types":{"SearchDocumentId":{"type":"SearchDocumentId","javaClass":"com.zetapush.common.messages.search.SearchDocumentId","fields":[{"type":"String","name":"id","description":"Document id","required":true},{"type":"String","name":"index","description":"Index name","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"type","description":"Type name","required":true}],"anyField":false}}}},"responseInfo":{"type":"SearchData","resolved":{"types":{"SearchData":{"type":"SearchData","javaClass":"com.zetapush.common.messages.search.SearchData","fields":[{"type":"Map[String,Object]","name":"data","description":"Document data","required":true},{"type":"String","name":"id","description":"Document id","required":true},{"type":"String","name":"index","description":"Index name","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"type","description":"Type name","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"SEARCH_ERROR","desc":"General search error."},{"code":"SEARCH_MISSING_INDEX","desc":"Query on a non existing index."}]},"traceable":true},{"name":"delete","type":{"typeName":"SearchDocumentId","imports":["com.zetapush.common.messages.search.SearchDocumentId"]},"desc":"Deletes data","notes":["Deletes a document from the elasticsearch engine by id."],"verbInfo":{"desc":"","deprecation":"","notes":["Deletes a document from the elasticsearch engine by id."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId22/delete","description":"Deletes data","verb":"delete","notes":["Deletes a document from the elasticsearch engine by id."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"SearchDocumentId","resolved":{"types":{"SearchDocumentId":{"type":"SearchDocumentId","javaClass":"com.zetapush.common.messages.search.SearchDocumentId","fields":[{"type":"String","name":"id","description":"Document id","required":true},{"type":"String","name":"index","description":"Index name","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"type","description":"Type name","required":true}],"anyField":false}}}},"errors":[{"code":"SEARCH_ERROR","desc":"General search error."},{"code":"SEARCH_MISSING_INDEX","desc":"Query on a non existing index."}]},"traceable":false},{"name":"search","type":{"typeName":"SearchRequest","imports":["com.zetapush.common.messages.search.SearchRequest"]},"returnType":{"typeName":"SearchResults","imports":["com.zetapush.common.messages.search.SearchResults"]},"desc":"Searches for data","listenerInfo":{"channel":"/service/BU_ID/depId22/search","description":"Searches for data","verb":"search","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"SearchRequest","resolved":{"types":{"SearchRequest":{"type":"SearchRequest","javaClass":"com.zetapush.common.messages.search.SearchRequest","fields":[{"type":"Map[String,Object]","name":"filter","description":"ElasticSearch filter. Follows the syntax defined in the elastic search manual."},{"type":"List[String]","name":"indices","description":"List of indices to be searched.","required":true},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"Map[String,Object]","name":"query","description":"ElasticSearch query. Follows the syntax defined in the elastic search manual.","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[SearchRequestSortField]","name":"sort","description":"Sort information"},{"type":"List[String]","name":"types","description":"The document types to execute the search against. Defaults to be executed against all types."}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"SearchRequestSortField":{"type":"SearchRequestSortField","javaClass":"com.zetapush.common.messages.search.SearchRequestSortField","fields":[{"type":"String","name":"name","description":"Field name"},{"type":"Map[String,Object]","name":"sort","description":"Field sort information. Follows elasticsearch syntax."}],"anyField":false}}}},"responseInfo":{"type":"SearchResults","resolved":{"types":{"SearchResults":{"type":"SearchResults","javaClass":"com.zetapush.common.messages.search.SearchResults","fields":[{"type":"PageContent[SearchResultsItem]","name":"items","description":"List of found items"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"long","name":"totalHits","description":"Total number of documents matching the query"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"SearchResultsItem":{"type":"SearchResultsItem","javaClass":"com.zetapush.common.messages.search.SearchResultsItem","fields":[{"type":"Map[String,Object]","name":"data","description":"Document data","required":true},{"type":"String","name":"id","description":"Document id","required":true},{"type":"String","name":"index","description":"Index name","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"float","name":"score","description":"Item score"},{"type":"String","name":"type","description":"Type name","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"SEARCH_ERROR","desc":"General search error."},{"code":"SEARCH_MISSING_INDEX","desc":"Query on a non existing index."}]},"traceable":true}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId22/index","description":"Indexes data","verb":"index","notes":["Inserts or updates a document into the elasticsearch engine."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"SearchData","resolved":{"types":{"SearchData":{"type":"SearchData","javaClass":"com.zetapush.common.messages.search.SearchData","fields":[{"type":"Map[String,Object]","name":"data","description":"Document data","required":true},{"type":"String","name":"id","description":"Document id","required":true},{"type":"String","name":"index","description":"Index name","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"type","description":"Type name","required":true}],"anyField":false}}}},"errors":[{"code":"SEARCH_ERROR","desc":"General search error."},{"code":"SEARCH_MISSING_INDEX","desc":"Query on a non existing index."}]}},{"listenerInfo":{"channel":"/service/BU_ID/depId22/get","description":"Gets data","verb":"get","notes":["Retrieves a document from the elasticsearch engine by id."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"SearchDocumentId","resolved":{"types":{"SearchDocumentId":{"type":"SearchDocumentId","javaClass":"com.zetapush.common.messages.search.SearchDocumentId","fields":[{"type":"String","name":"id","description":"Document id","required":true},{"type":"String","name":"index","description":"Index name","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"type","description":"Type name","required":true}],"anyField":false}}}},"responseInfo":{"type":"SearchData","resolved":{"types":{"SearchData":{"type":"SearchData","javaClass":"com.zetapush.common.messages.search.SearchData","fields":[{"type":"Map[String,Object]","name":"data","description":"Document data","required":true},{"type":"String","name":"id","description":"Document id","required":true},{"type":"String","name":"index","description":"Index name","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"type","description":"Type name","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"SEARCH_ERROR","desc":"General search error."},{"code":"SEARCH_MISSING_INDEX","desc":"Query on a non existing index."}]},"returnedType":{"typeName":"SearchData","imports":["com.zetapush.common.messages.search.SearchData"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId22/delete","description":"Deletes data","verb":"delete","notes":["Deletes a document from the elasticsearch engine by id."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"SearchDocumentId","resolved":{"types":{"SearchDocumentId":{"type":"SearchDocumentId","javaClass":"com.zetapush.common.messages.search.SearchDocumentId","fields":[{"type":"String","name":"id","description":"Document id","required":true},{"type":"String","name":"index","description":"Index name","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"type","description":"Type name","required":true}],"anyField":false}}}},"errors":[{"code":"SEARCH_ERROR","desc":"General search error."},{"code":"SEARCH_MISSING_INDEX","desc":"Query on a non existing index."}]}},{"listenerInfo":{"channel":"/service/BU_ID/depId22/search","description":"Searches for data","verb":"search","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"SearchRequest","resolved":{"types":{"SearchRequest":{"type":"SearchRequest","javaClass":"com.zetapush.common.messages.search.SearchRequest","fields":[{"type":"Map[String,Object]","name":"filter","description":"ElasticSearch filter. Follows the syntax defined in the elastic search manual."},{"type":"List[String]","name":"indices","description":"List of indices to be searched.","required":true},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"Map[String,Object]","name":"query","description":"ElasticSearch query. Follows the syntax defined in the elastic search manual.","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[SearchRequestSortField]","name":"sort","description":"Sort information"},{"type":"List[String]","name":"types","description":"The document types to execute the search against. Defaults to be executed against all types."}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"SearchRequestSortField":{"type":"SearchRequestSortField","javaClass":"com.zetapush.common.messages.search.SearchRequestSortField","fields":[{"type":"String","name":"name","description":"Field name"},{"type":"Map[String,Object]","name":"sort","description":"Field sort information. Follows elasticsearch syntax."}],"anyField":false}}}},"responseInfo":{"type":"SearchResults","resolved":{"types":{"SearchResults":{"type":"SearchResults","javaClass":"com.zetapush.common.messages.search.SearchResults","fields":[{"type":"PageContent[SearchResultsItem]","name":"items","description":"List of found items"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"long","name":"totalHits","description":"Total number of documents matching the query"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"SearchResultsItem":{"type":"SearchResultsItem","javaClass":"com.zetapush.common.messages.search.SearchResultsItem","fields":[{"type":"Map[String,Object]","name":"data","description":"Document data","required":true},{"type":"String","name":"id","description":"Document id","required":true},{"type":"String","name":"index","description":"Index name","required":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"float","name":"score","description":"Item score"},{"type":"String","name":"type","description":"Type name","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"SEARCH_ERROR","desc":"General search error."},{"code":"SEARCH_MISSING_INDEX","desc":"Query on a non existing index."}]},"returnedType":{"typeName":"SearchResults","imports":["com.zetapush.common.messages.search.SearchResults"]}}]},{"clazz":"com.zetapush.str.services.queue.WorkerAdminService","name":"WorkerAdmin","itemId":"queue","desc":"Admin API when the queue service is used to provide server-side workers","notes":["Task producers submits their tasks.","The server dispatches the tasks."],"verbs":[{"name":"admin","type":{"typeName":"WorkerAdminBulkRequest","imports":["com.zetapush.common.messages.queue.admin.WorkerAdminBulkRequest"]},"returnType":{"typeName":"WorkerAdminBulkResponse","imports":["com.zetapush.common.messages.queue.admin.WorkerAdminBulkResponse"]},"desc":"Makes several admin API calls at once.","notes":["Calls are made sequentially in the given order.","There is no rollback if something goes wrong."],"verbInfo":{"desc":"","deprecation":"","notes":["Calls are made sequentially in the given order.","There is no rollback if something goes wrong."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId13/admin","description":"Makes several admin API calls at once.","verb":"admin","notes":["Calls are made sequentially in the given order.","There is no rollback if something goes wrong."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"WorkerAdminBulkRequest","resolved":{"types":{"WorkerAdminBulkRequest":{"type":"WorkerAdminBulkRequest","javaClass":"com.zetapush.common.messages.queue.admin.WorkerAdminBulkRequest","fields":[{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[WorkerAdminRequest]","name":"requests","description":"List of admin requests"}],"anyField":false},"WorkerAdminRequest":{"type":"WorkerAdminRequest","javaClass":"com.zetapush.common.messages.queue.admin.WorkerAdminRequest","fields":[{"type":"String","name":"deploymentId","description":"Deployment ID of the target service"},{"type":"Object","name":"parameters","description":"Parameter (request body)"},{"type":"String","name":"verb","description":"Verb name inside the service"}],"anyField":false}}}},"responseInfo":{"type":"WorkerAdminBulkResponse","resolved":{"types":{"WorkerAdminBulkResponse":{"type":"WorkerAdminBulkResponse","javaClass":"com.zetapush.common.messages.queue.admin.WorkerAdminBulkResponse","fields":[{"type":"ZetaApiError","name":"error","description":"This field might contain a (fatal) error."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"List[Object]","name":"responses","description":"List of responses, in the same order as in the request"}],"anyField":false},"ZetaApiError":{"type":"ZetaApiError","javaClass":"com.zetapush.common.messages.ZetaApiError","fields":[{"type":"String","name":"code","description":"Symbolic error code"},{"type":"Object","name":"context","description":"Developer-generated context. Each code can have a specific context format."},{"type":"String","name":"location","description":"Error location, if available"},{"type":"String","name":"message","description":"Human readable message. May vary depending on one or more of locale, input, developer code."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true},{"name":"createServices","type":{"typeName":"WorkerAdminBulkServiceCreation","imports":["com.zetapush.common.messages.queue.admin.WorkerAdminBulkServiceCreation"]},"returnType":{"typeName":"WorkerAdminBulkResponse","imports":["com.zetapush.common.messages.queue.admin.WorkerAdminBulkResponse"]},"desc":"Creates several services","notes":["Configures missing services, restarts modified services.","Does not touch existing services with the same exact configuration.","There is no rollback if something goes wrong.","This cannot be used to redeploy the current service."],"verbInfo":{"desc":"","deprecation":"","notes":["Configures missing services, restarts modified services.","Does not touch existing services with the same exact configuration.","There is no rollback if something goes wrong.","This cannot be used to redeploy the current service."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId13/createServices","description":"Creates several services","verb":"createServices","notes":["Configures missing services, restarts modified services.","Does not touch existing services with the same exact configuration.","There is no rollback if something goes wrong.","This cannot be used to redeploy the current service."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"WorkerAdminBulkServiceCreation","resolved":{"types":{"WorkerAdminBulkServiceCreation":{"type":"WorkerAdminBulkServiceCreation","javaClass":"com.zetapush.common.messages.queue.admin.WorkerAdminBulkServiceCreation","fields":[{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[DeployedItem]","name":"services","description":"List of services to be created"}],"anyField":false},"DeployedItem":{"type":"DeployedItem","javaClass":"com.zetapush.common.messages.deployment.DeployedItem","fields":[{"type":"String","name":"businessId","required":true},{"type":"String","name":"deploymentId"},{"type":"String","name":"description"},{"type":"boolean","name":"enabled"},{"type":"Set[String]","name":"forbiddenVerbs"},{"type":"String","name":"itemId","required":true},{"type":"Map[String,String]","name":"options"}],"anyField":false}}}},"responseInfo":{"type":"WorkerAdminBulkResponse","resolved":{"types":{"WorkerAdminBulkResponse":{"type":"WorkerAdminBulkResponse","javaClass":"com.zetapush.common.messages.queue.admin.WorkerAdminBulkResponse","fields":[{"type":"ZetaApiError","name":"error","description":"This field might contain a (fatal) error."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"List[Object]","name":"responses","description":"List of responses, in the same order as in the request"}],"anyField":false},"ZetaApiError":{"type":"ZetaApiError","javaClass":"com.zetapush.common.messages.ZetaApiError","fields":[{"type":"String","name":"code","description":"Symbolic error code"},{"type":"Object","name":"context","description":"Developer-generated context. Each code can have a specific context format."},{"type":"String","name":"location","description":"Error location, if available"},{"type":"String","name":"message","description":"Human readable message. May vary depending on one or more of locale, input, developer code."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId13/admin","description":"Makes several admin API calls at once.","verb":"admin","notes":["Calls are made sequentially in the given order.","There is no rollback if something goes wrong."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"WorkerAdminBulkRequest","resolved":{"types":{"WorkerAdminBulkRequest":{"type":"WorkerAdminBulkRequest","javaClass":"com.zetapush.common.messages.queue.admin.WorkerAdminBulkRequest","fields":[{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[WorkerAdminRequest]","name":"requests","description":"List of admin requests"}],"anyField":false},"WorkerAdminRequest":{"type":"WorkerAdminRequest","javaClass":"com.zetapush.common.messages.queue.admin.WorkerAdminRequest","fields":[{"type":"String","name":"deploymentId","description":"Deployment ID of the target service"},{"type":"Object","name":"parameters","description":"Parameter (request body)"},{"type":"String","name":"verb","description":"Verb name inside the service"}],"anyField":false}}}},"responseInfo":{"type":"WorkerAdminBulkResponse","resolved":{"types":{"WorkerAdminBulkResponse":{"type":"WorkerAdminBulkResponse","javaClass":"com.zetapush.common.messages.queue.admin.WorkerAdminBulkResponse","fields":[{"type":"ZetaApiError","name":"error","description":"This field might contain a (fatal) error."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"List[Object]","name":"responses","description":"List of responses, in the same order as in the request"}],"anyField":false},"ZetaApiError":{"type":"ZetaApiError","javaClass":"com.zetapush.common.messages.ZetaApiError","fields":[{"type":"String","name":"code","description":"Symbolic error code"},{"type":"Object","name":"context","description":"Developer-generated context. Each code can have a specific context format."},{"type":"String","name":"location","description":"Error location, if available"},{"type":"String","name":"message","description":"Human readable message. May vary depending on one or more of locale, input, developer code."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"WorkerAdminBulkResponse","imports":["com.zetapush.common.messages.queue.admin.WorkerAdminBulkResponse"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId13/createServices","description":"Creates several services","verb":"createServices","notes":["Configures missing services, restarts modified services.","Does not touch existing services with the same exact configuration.","There is no rollback if something goes wrong.","This cannot be used to redeploy the current service."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"WorkerAdminBulkServiceCreation","resolved":{"types":{"WorkerAdminBulkServiceCreation":{"type":"WorkerAdminBulkServiceCreation","javaClass":"com.zetapush.common.messages.queue.admin.WorkerAdminBulkServiceCreation","fields":[{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[DeployedItem]","name":"services","description":"List of services to be created"}],"anyField":false},"DeployedItem":{"type":"DeployedItem","javaClass":"com.zetapush.common.messages.deployment.DeployedItem","fields":[{"type":"String","name":"businessId","required":true},{"type":"String","name":"deploymentId"},{"type":"String","name":"description"},{"type":"boolean","name":"enabled"},{"type":"Set[String]","name":"forbiddenVerbs"},{"type":"String","name":"itemId","required":true},{"type":"Map[String,String]","name":"options"}],"anyField":false}}}},"responseInfo":{"type":"WorkerAdminBulkResponse","resolved":{"types":{"WorkerAdminBulkResponse":{"type":"WorkerAdminBulkResponse","javaClass":"com.zetapush.common.messages.queue.admin.WorkerAdminBulkResponse","fields":[{"type":"ZetaApiError","name":"error","description":"This field might contain a (fatal) error."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"List[Object]","name":"responses","description":"List of responses, in the same order as in the request"}],"anyField":false},"ZetaApiError":{"type":"ZetaApiError","javaClass":"com.zetapush.common.messages.ZetaApiError","fields":[{"type":"String","name":"code","description":"Symbolic error code"},{"type":"Object","name":"context","description":"Developer-generated context. Each code can have a specific context format."},{"type":"String","name":"location","description":"Error location, if available"},{"type":"String","name":"message","description":"Human readable message. May vary depending on one or more of locale, input, developer code."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"WorkerAdminBulkResponse","imports":["com.zetapush.common.messages.queue.admin.WorkerAdminBulkResponse"]}}]},{"clazz":"com.zetapush.str.services.queue.QueueService","name":"Queue","itemId":"queue","desc":"Producer / consumer real-time API","notes":["Task producers submits their tasks.","The server dispatches the tasks.","Consumers process them and report completion back to the server.","Tasks are global to the service (i.e. NOT per user)."],"verbs":[{"name":"submit","type":{"typeName":"TaskRequest","imports":["com.zetapush.common.messages.queue.TaskRequest"]},"desc":"Submits a task","notes":["Producer API.","A task producer submits the given task to the server.","The server will find a tasker with processing capacity and dispatch the task.","The task result will be ignored : the producer will not receive any notification of any kind, even in case of errors (including capacity exceeded errors).","This verb will return immediately : you can use this API to asynchronously submit a task."],"verbInfo":{"desc":"","deprecation":"","notes":["Producer API.","A task producer submits the given task to the server.","The server will find a tasker with processing capacity and dispatch the task.","The task result will be ignored : the producer will not receive any notification of any kind, even in case of errors (including capacity exceeded errors).","This verb will return immediately : you can use this API to asynchronously submit a task."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId13/submit","description":"Submits a task","verb":"submit","notes":["Producer API.","A task producer submits the given task to the server.","The server will find a tasker with processing capacity and dispatch the task.","The task result will be ignored : the producer will not receive any notification of any kind, even in case of errors (including capacity exceeded errors).","This verb will return immediately : you can use this API to asynchronously submit a task."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TaskRequest","resolved":{"types":{"TaskRequest":{"type":"TaskRequest","javaClass":"com.zetapush.common.messages.queue.TaskRequest","fields":[{"type":"OwnerResource","name":"originator","description":"Request submitter. \n","serverGenerated":true},{"type":"String","name":"description","description":"Task description"},{"type":"String","name":"contextId","description":"STR-generated context ID. Used for traceability of client requests."},{"type":"String","name":"originBusinessId","description":"BusinessId of the service which the task is from"},{"type":"String","name":"originDeploymentId","description":"DeploymentId of the service which the task is from"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Object","name":"data","description":"Task parameters. Specific for each consumer/producer contract"},{"type":"String","name":"owner","description":"When impersonating someone, use this field to differentiate from originator.owner"}],"anyField":false},"OwnerResource":{"type":"OwnerResource","javaClass":"com.zetapush.common.messages.remoting.OwnerResource","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false}}}},"errors":[]},"traceable":false},{"name":"done","type":{"typeName":"TaskCompletion","imports":["com.zetapush.common.messages.queue.TaskCompletion"]},"desc":"Notifies completion of a task","notes":["Consumer API.","The tasker notifies completion of the given task to the server.","The tasker can optionally include a result or an error code."],"verbInfo":{"desc":"","deprecation":"","notes":["Consumer API.","The tasker notifies completion of the given task to the server.","The tasker can optionally include a result or an error code."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId13/done","description":"Notifies completion of a task","verb":"done","notes":["Consumer API.","The tasker notifies completion of the given task to the server.","The tasker can optionally include a result or an error code."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TaskCompletion","resolved":{"types":{"TaskCompletion":{"type":"TaskCompletion","javaClass":"com.zetapush.common.messages.queue.TaskCompletion","fields":[{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Object","name":"result","description":"Optional result of the processing. When 'success' is false, can contain an error object (with String fields 'code' and 'message')."},{"type":"boolean","name":"success","description":"A task consumer can specify whether computation was a success or not."},{"type":"Object","name":"target","description":"Target for the response (the syntax is the same as in messaging.send). Overrides 'broadcast' when set."},{"type":"String","name":"taskId","description":"Server-assigned task identifier."}],"anyField":false}}}},"errors":[]},"traceable":false},{"name":"unregister","type":{"imports":[]},"desc":"Unregisters a consumer","notes":["Consumer API.","Unregisters the current user resource as an available task consumer.","All non finished tasks are returned to the server.","Consumers that disconnect from the STR will be automatically unregistered from this service."],"verbInfo":{"desc":"","deprecation":"","notes":["Consumer API.","Unregisters the current user resource as an available task consumer.","All non finished tasks are returned to the server.","Consumers that disconnect from the STR will be automatically unregistered from this service."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId13/unregister","description":"Unregisters a consumer","verb":"unregister","notes":["Consumer API.","Unregisters the current user resource as an available task consumer.","All non finished tasks are returned to the server.","Consumers that disconnect from the STR will be automatically unregistered from this service."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"errors":[]},"traceable":false},{"name":"call","type":{"typeName":"TaskRequest","imports":["com.zetapush.common.messages.queue.TaskRequest"]},"returnType":{"typeName":"TaskCompletion","imports":["com.zetapush.common.messages.queue.TaskCompletion"]},"desc":"Submits a task","notes":["Producer API.","A task producer submits the given task to the server.","The server will find a tasker with processing capacity and dispatch the task.","The task result will be returned to the caller.","When called from inside a macro, the consumer generated result is available for further use."],"verbInfo":{"desc":"","deprecation":"","notes":["Producer API.","A task producer submits the given task to the server.","The server will find a tasker with processing capacity and dispatch the task.","The task result will be returned to the caller.","When called from inside a macro, the consumer generated result is available for further use."],"relatedClasses":[],"errors":[{"code":"TASK_ERROR_CAPACITY","desc":"Task queue capacity is limited on the server. Consider adding more consumers or adding more capacity to each consumer."},{"code":"CONSUMER_UNSPECIFIED_ERROR","desc":"The consumer of a task reported a failure, without more precisions."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId13/call","description":"Submits a task","verb":"call","notes":["Producer API.","A task producer submits the given task to the server.","The server will find a tasker with processing capacity and dispatch the task.","The task result will be returned to the caller.","When called from inside a macro, the consumer generated result is available for further use."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TaskRequest","resolved":{"types":{"TaskRequest":{"type":"TaskRequest","javaClass":"com.zetapush.common.messages.queue.TaskRequest","fields":[{"type":"OwnerResource","name":"originator","description":"Request submitter. \n","serverGenerated":true},{"type":"String","name":"description","description":"Task description"},{"type":"String","name":"contextId","description":"STR-generated context ID. Used for traceability of client requests."},{"type":"String","name":"originBusinessId","description":"BusinessId of the service which the task is from"},{"type":"String","name":"originDeploymentId","description":"DeploymentId of the service which the task is from"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Object","name":"data","description":"Task parameters. Specific for each consumer/producer contract"},{"type":"String","name":"owner","description":"When impersonating someone, use this field to differentiate from originator.owner"}],"anyField":false},"OwnerResource":{"type":"OwnerResource","javaClass":"com.zetapush.common.messages.remoting.OwnerResource","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false}}}},"responseInfo":{"type":"TaskCompletion","resolved":{"types":{"TaskCompletion":{"type":"TaskCompletion","javaClass":"com.zetapush.common.messages.queue.TaskCompletion","fields":[{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Object","name":"result","description":"Optional result of the processing. When 'success' is false, can contain an error object (with String fields 'code' and 'message')."},{"type":"boolean","name":"success","description":"A task consumer can specify whether computation was a success or not."},{"type":"Object","name":"target","description":"Target for the response (the syntax is the same as in messaging.send). Overrides 'broadcast' when set."},{"type":"String","name":"taskId","description":"Server-assigned task identifier."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"TASK_ERROR_CAPACITY","desc":"Task queue capacity is limited on the server. Consider adding more consumers or adding more capacity to each consumer."},{"code":"CONSUMER_UNSPECIFIED_ERROR","desc":"The consumer of a task reported a failure, without more precisions."}]},"traceable":true},{"name":"register","type":{"typeName":"TaskConsumerRegistration","imports":["com.zetapush.common.messages.queue.TaskConsumerRegistration"]},"desc":"Registers a consumer","notes":["Consumer API.","Registers the current user resource as an available task consumer.","Tasks will be then dispatched to that consumer.","IMPORTANT : after a disconnect and a new handshake, consumers must register again."],"verbInfo":{"desc":"","deprecation":"","notes":["Consumer API.","Registers the current user resource as an available task consumer.","Tasks will be then dispatched to that consumer.","IMPORTANT : after a disconnect and a new handshake, consumers must register again."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId13/register","description":"Registers a consumer","verb":"register","notes":["Consumer API.","Registers the current user resource as an available task consumer.","Tasks will be then dispatched to that consumer.","IMPORTANT : after a disconnect and a new handshake, consumers must register again."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TaskConsumerRegistration","resolved":{"types":{"TaskConsumerRegistration":{"type":"TaskConsumerRegistration","javaClass":"com.zetapush.common.messages.queue.TaskConsumerRegistration","fields":[{"type":"int","name":"capacity","description":"Task consumer maximum capacity at a given time. The server will not exceed that capacity when dispatching new tasks"}],"anyField":false}}}},"errors":[]},"traceable":false}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId13/submit","description":"Submits a task","verb":"submit","notes":["Producer API.","A task producer submits the given task to the server.","The server will find a tasker with processing capacity and dispatch the task.","The task result will be ignored : the producer will not receive any notification of any kind, even in case of errors (including capacity exceeded errors).","This verb will return immediately : you can use this API to asynchronously submit a task."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TaskRequest","resolved":{"types":{"TaskRequest":{"type":"TaskRequest","javaClass":"com.zetapush.common.messages.queue.TaskRequest","fields":[{"type":"OwnerResource","name":"originator","description":"Request submitter. \n","serverGenerated":true},{"type":"String","name":"description","description":"Task description"},{"type":"String","name":"contextId","description":"STR-generated context ID. Used for traceability of client requests."},{"type":"String","name":"originBusinessId","description":"BusinessId of the service which the task is from"},{"type":"String","name":"originDeploymentId","description":"DeploymentId of the service which the task is from"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Object","name":"data","description":"Task parameters. Specific for each consumer/producer contract"},{"type":"String","name":"owner","description":"When impersonating someone, use this field to differentiate from originator.owner"}],"anyField":false},"OwnerResource":{"type":"OwnerResource","javaClass":"com.zetapush.common.messages.remoting.OwnerResource","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false}}}},"errors":[]}},{"listenerInfo":{"channel":"/service/BU_ID/depId13/done","description":"Notifies completion of a task","verb":"done","notes":["Consumer API.","The tasker notifies completion of the given task to the server.","The tasker can optionally include a result or an error code."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TaskCompletion","resolved":{"types":{"TaskCompletion":{"type":"TaskCompletion","javaClass":"com.zetapush.common.messages.queue.TaskCompletion","fields":[{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Object","name":"result","description":"Optional result of the processing. When 'success' is false, can contain an error object (with String fields 'code' and 'message')."},{"type":"boolean","name":"success","description":"A task consumer can specify whether computation was a success or not."},{"type":"Object","name":"target","description":"Target for the response (the syntax is the same as in messaging.send). Overrides 'broadcast' when set."},{"type":"String","name":"taskId","description":"Server-assigned task identifier."}],"anyField":false}}}},"errors":[]}},{"listenerInfo":{"channel":"/service/BU_ID/depId13/unregister","description":"Unregisters a consumer","verb":"unregister","notes":["Consumer API.","Unregisters the current user resource as an available task consumer.","All non finished tasks are returned to the server.","Consumers that disconnect from the STR will be automatically unregistered from this service."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"errors":[]}},{"listenerInfo":{"channel":"/service/BU_ID/depId13/call","description":"Submits a task","verb":"call","notes":["Producer API.","A task producer submits the given task to the server.","The server will find a tasker with processing capacity and dispatch the task.","The task result will be returned to the caller.","When called from inside a macro, the consumer generated result is available for further use."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TaskRequest","resolved":{"types":{"TaskRequest":{"type":"TaskRequest","javaClass":"com.zetapush.common.messages.queue.TaskRequest","fields":[{"type":"OwnerResource","name":"originator","description":"Request submitter. \n","serverGenerated":true},{"type":"String","name":"description","description":"Task description"},{"type":"String","name":"contextId","description":"STR-generated context ID. Used for traceability of client requests."},{"type":"String","name":"originBusinessId","description":"BusinessId of the service which the task is from"},{"type":"String","name":"originDeploymentId","description":"DeploymentId of the service which the task is from"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Object","name":"data","description":"Task parameters. Specific for each consumer/producer contract"},{"type":"String","name":"owner","description":"When impersonating someone, use this field to differentiate from originator.owner"}],"anyField":false},"OwnerResource":{"type":"OwnerResource","javaClass":"com.zetapush.common.messages.remoting.OwnerResource","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false}}}},"responseInfo":{"type":"TaskCompletion","resolved":{"types":{"TaskCompletion":{"type":"TaskCompletion","javaClass":"com.zetapush.common.messages.queue.TaskCompletion","fields":[{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Object","name":"result","description":"Optional result of the processing. When 'success' is false, can contain an error object (with String fields 'code' and 'message')."},{"type":"boolean","name":"success","description":"A task consumer can specify whether computation was a success or not."},{"type":"Object","name":"target","description":"Target for the response (the syntax is the same as in messaging.send). Overrides 'broadcast' when set."},{"type":"String","name":"taskId","description":"Server-assigned task identifier."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"TASK_ERROR_CAPACITY","desc":"Task queue capacity is limited on the server. Consider adding more consumers or adding more capacity to each consumer."},{"code":"CONSUMER_UNSPECIFIED_ERROR","desc":"The consumer of a task reported a failure, without more precisions."}]},"returnedType":{"typeName":"TaskCompletion","imports":["com.zetapush.common.messages.queue.TaskCompletion"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId13/register","description":"Registers a consumer","verb":"register","notes":["Consumer API.","Registers the current user resource as an available task consumer.","Tasks will be then dispatched to that consumer.","IMPORTANT : after a disconnect and a new handshake, consumers must register again."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TaskConsumerRegistration","resolved":{"types":{"TaskConsumerRegistration":{"type":"TaskConsumerRegistration","javaClass":"com.zetapush.common.messages.queue.TaskConsumerRegistration","fields":[{"type":"int","name":"capacity","description":"Task consumer maximum capacity at a given time. The server will not exceed that capacity when dispatching new tasks"}],"anyField":false}}}},"errors":[]}}]},{"clazz":"com.zetapush.str.services.workflow.WorkflowDefinitionService","name":"WorkflowDefinitionService","itemId":"workflow","desc":"Simple workflow service : workflow definition API","notes":["Manage workflow templates.","Consider using the @Workflow annotation to ease configuration."],"verbs":[{"name":"getTemplate","type":{"typeName":"WorkflowTemplateInfoRequest","imports":["com.zetapush.common.messages.workflow.WorkflowTemplateInfoRequest"]},"returnType":{"typeName":"WorkflowTemplate","imports":["com.zetapush.common.messages.workflow.WorkflowTemplate"]},"desc":"Fetche a template","notes":["Returns a existing template, by identifier."],"verbInfo":{"desc":"","deprecation":"","notes":["Returns a existing template, by identifier."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId26/getTemplate","description":"Fetche a template","verb":"getTemplate","notes":["Returns a existing template, by identifier."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"WorkflowTemplateInfoRequest","resolved":{"types":{"WorkflowTemplateInfoRequest":{"type":"WorkflowTemplateInfoRequest","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplateInfoRequest","fields":[{"type":"String","name":"templateName","description":"Template name, as created with 'createTemplate'"}],"anyField":false}}}},"responseInfo":{"type":"WorkflowTemplate","resolved":{"types":{"WorkflowTemplate":{"type":"WorkflowTemplate","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplate","fields":[{"type":"List[WorkflowStateDefinition]","name":"states","description":"All the possible states of this workflow","required":true},{"type":"String","name":"templateName","description":"Unique template name","required":true},{"type":"List[WorkflowTransitionDefinition]","name":"transitions","description":"All the transitions of this workflow"}],"anyField":false},"WorkflowStateDefinition":{"type":"WorkflowStateDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowStateDefinition","fields":[{"type":"String","name":"stateId","description":"ID of the state","required":true},{"type":"String","name":"stateName","description":"State name"}],"anyField":false},"WorkflowTransitionDefinition":{"type":"WorkflowTransitionDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionDefinition","fields":[{"type":"String","name":"from","description":"Starting state","required":true},{"type":"String","name":"to","description":"Destination state","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":false},{"name":"listTemplates","type":{"typeName":"WorkflowTemplateList","imports":["com.zetapush.common.messages.workflow.WorkflowTemplateList"]},"returnType":{"typeName":"WorkflowTemplateListResult","imports":["com.zetapush.common.messages.workflow.WorkflowTemplateListResult"]},"desc":"Asks for a list of templates","notes":["Returns a paginated list of templates."],"verbInfo":{"desc":"","deprecation":"","notes":["Returns a paginated list of templates."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId26/listTemplates","description":"Asks for a list of templates","verb":"listTemplates","notes":["Returns a paginated list of templates."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"WorkflowTemplateList","resolved":{"types":{"WorkflowTemplateList":{"type":"WorkflowTemplateList","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplateList","fields":[{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"WorkflowTemplateListResult","resolved":{"types":{"WorkflowTemplateListResult":{"type":"WorkflowTemplateListResult","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplateListResult","fields":[{"type":"WorkflowTemplateList","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"PageContent[WorkflowTemplate]","name":"result","description":"Result for the specified request"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"WorkflowStateDefinition":{"type":"WorkflowStateDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowStateDefinition","fields":[{"type":"String","name":"stateId","description":"ID of the state","required":true},{"type":"String","name":"stateName","description":"State name"}],"anyField":false},"WorkflowTemplate":{"type":"WorkflowTemplate","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplate","fields":[{"type":"List[WorkflowStateDefinition]","name":"states","description":"All the possible states of this workflow","required":true},{"type":"String","name":"templateName","description":"Unique template name","required":true},{"type":"List[WorkflowTransitionDefinition]","name":"transitions","description":"All the transitions of this workflow"}],"anyField":false},"WorkflowTemplateList":{"type":"WorkflowTemplateList","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplateList","fields":[{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"WorkflowTransitionDefinition":{"type":"WorkflowTransitionDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionDefinition","fields":[{"type":"String","name":"from","description":"Starting state","required":true},{"type":"String","name":"to","description":"Destination state","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":false},{"name":"createTemplate","type":{"typeName":"WorkflowTemplateCreation","imports":["com.zetapush.common.messages.workflow.WorkflowTemplateCreation"]},"returnType":{"typeName":"WorkflowTemplate","imports":["com.zetapush.common.messages.workflow.WorkflowTemplate"]},"desc":"Creates a template","notes":["Creates a new workflow template.","This new template will be available for instantiation by 'create'."],"verbInfo":{"desc":"","deprecation":"","notes":["Creates a new workflow template.","This new template will be available for instantiation by 'create'."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId26/createTemplate","description":"Creates a template","verb":"createTemplate","notes":["Creates a new workflow template.","This new template will be available for instantiation by 'create'."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"WorkflowTemplateCreation","resolved":{"types":{"WorkflowTemplateCreation":{"type":"WorkflowTemplateCreation","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplateCreation","fields":[{"type":"List[FullWorkflowStateDefinition]","name":"states","description":"All the possible states of this workflow","required":true},{"type":"String","name":"templateName","description":"Unique template name","required":true},{"type":"List[WorkflowTransitionDefinition]","name":"transitions","description":"All the transitions of this workflow"}],"anyField":false},"FullWorkflowStateDefinition":{"type":"FullWorkflowStateDefinition","javaClass":"com.zetapush.common.messages.workflow.FullWorkflowStateDefinition","fields":[{"type":"ServiceVerbCall","name":"call","description":"Called on the workflow when this state is about to be reached. If the call is a macro, it has the possibility to prevent the transition by returning {'transition':'failed', 'message':'optional error message'}."},{"type":"String","name":"stateId","description":"ID of the state","required":true},{"type":"String","name":"stateName","description":"State name"}],"anyField":false},"ServiceVerbCall":{"type":"ServiceVerbCall","javaClass":"com.zetapush.common.messages.ServiceVerbCall","fields":[{"type":"String","name":"deploymentId","description":"DeploymentId of the target service.","required":true},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the target verb when called. The format is the format accepted by the target."},{"type":"String","name":"verb","description":"Verb to be called within the target service.","required":true}],"anyField":false},"WorkflowTransitionDefinition":{"type":"WorkflowTransitionDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionDefinition","fields":[{"type":"String","name":"from","description":"Starting state","required":true},{"type":"String","name":"to","description":"Destination state","required":true}],"anyField":false}}}},"responseInfo":{"type":"WorkflowTemplate","resolved":{"types":{"WorkflowTemplate":{"type":"WorkflowTemplate","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplate","fields":[{"type":"List[WorkflowStateDefinition]","name":"states","description":"All the possible states of this workflow","required":true},{"type":"String","name":"templateName","description":"Unique template name","required":true},{"type":"List[WorkflowTransitionDefinition]","name":"transitions","description":"All the transitions of this workflow"}],"anyField":false},"WorkflowStateDefinition":{"type":"WorkflowStateDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowStateDefinition","fields":[{"type":"String","name":"stateId","description":"ID of the state","required":true},{"type":"String","name":"stateName","description":"State name"}],"anyField":false},"WorkflowTransitionDefinition":{"type":"WorkflowTransitionDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionDefinition","fields":[{"type":"String","name":"from","description":"Starting state","required":true},{"type":"String","name":"to","description":"Destination state","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"traceable":false}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId26/getTemplate","description":"Fetche a template","verb":"getTemplate","notes":["Returns a existing template, by identifier."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"WorkflowTemplateInfoRequest","resolved":{"types":{"WorkflowTemplateInfoRequest":{"type":"WorkflowTemplateInfoRequest","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplateInfoRequest","fields":[{"type":"String","name":"templateName","description":"Template name, as created with 'createTemplate'"}],"anyField":false}}}},"responseInfo":{"type":"WorkflowTemplate","resolved":{"types":{"WorkflowTemplate":{"type":"WorkflowTemplate","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplate","fields":[{"type":"List[WorkflowStateDefinition]","name":"states","description":"All the possible states of this workflow","required":true},{"type":"String","name":"templateName","description":"Unique template name","required":true},{"type":"List[WorkflowTransitionDefinition]","name":"transitions","description":"All the transitions of this workflow"}],"anyField":false},"WorkflowStateDefinition":{"type":"WorkflowStateDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowStateDefinition","fields":[{"type":"String","name":"stateId","description":"ID of the state","required":true},{"type":"String","name":"stateName","description":"State name"}],"anyField":false},"WorkflowTransitionDefinition":{"type":"WorkflowTransitionDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionDefinition","fields":[{"type":"String","name":"from","description":"Starting state","required":true},{"type":"String","name":"to","description":"Destination state","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"WorkflowTemplate","imports":["com.zetapush.common.messages.workflow.WorkflowTemplate"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId26/listTemplates","description":"Asks for a list of templates","verb":"listTemplates","notes":["Returns a paginated list of templates."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"WorkflowTemplateList","resolved":{"types":{"WorkflowTemplateList":{"type":"WorkflowTemplateList","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplateList","fields":[{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"WorkflowTemplateListResult","resolved":{"types":{"WorkflowTemplateListResult":{"type":"WorkflowTemplateListResult","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplateListResult","fields":[{"type":"WorkflowTemplateList","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"PageContent[WorkflowTemplate]","name":"result","description":"Result for the specified request"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"WorkflowStateDefinition":{"type":"WorkflowStateDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowStateDefinition","fields":[{"type":"String","name":"stateId","description":"ID of the state","required":true},{"type":"String","name":"stateName","description":"State name"}],"anyField":false},"WorkflowTemplate":{"type":"WorkflowTemplate","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplate","fields":[{"type":"List[WorkflowStateDefinition]","name":"states","description":"All the possible states of this workflow","required":true},{"type":"String","name":"templateName","description":"Unique template name","required":true},{"type":"List[WorkflowTransitionDefinition]","name":"transitions","description":"All the transitions of this workflow"}],"anyField":false},"WorkflowTemplateList":{"type":"WorkflowTemplateList","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplateList","fields":[{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"WorkflowTransitionDefinition":{"type":"WorkflowTransitionDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionDefinition","fields":[{"type":"String","name":"from","description":"Starting state","required":true},{"type":"String","name":"to","description":"Destination state","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"WorkflowTemplateListResult","imports":["com.zetapush.common.messages.workflow.WorkflowTemplateListResult"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId26/createTemplate","description":"Creates a template","verb":"createTemplate","notes":["Creates a new workflow template.","This new template will be available for instantiation by 'create'."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"WorkflowTemplateCreation","resolved":{"types":{"WorkflowTemplateCreation":{"type":"WorkflowTemplateCreation","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplateCreation","fields":[{"type":"List[FullWorkflowStateDefinition]","name":"states","description":"All the possible states of this workflow","required":true},{"type":"String","name":"templateName","description":"Unique template name","required":true},{"type":"List[WorkflowTransitionDefinition]","name":"transitions","description":"All the transitions of this workflow"}],"anyField":false},"FullWorkflowStateDefinition":{"type":"FullWorkflowStateDefinition","javaClass":"com.zetapush.common.messages.workflow.FullWorkflowStateDefinition","fields":[{"type":"ServiceVerbCall","name":"call","description":"Called on the workflow when this state is about to be reached. If the call is a macro, it has the possibility to prevent the transition by returning {'transition':'failed', 'message':'optional error message'}."},{"type":"String","name":"stateId","description":"ID of the state","required":true},{"type":"String","name":"stateName","description":"State name"}],"anyField":false},"ServiceVerbCall":{"type":"ServiceVerbCall","javaClass":"com.zetapush.common.messages.ServiceVerbCall","fields":[{"type":"String","name":"deploymentId","description":"DeploymentId of the target service.","required":true},{"type":"boolean","name":"loud","description":"Specifies whether this call should generate all expected direct user notifications (primary outputs). Does not affect side-effects (other outputs). Defaults to false"},{"type":"Map[String,Object]","name":"parameter","description":"Parameter that will be passed to the target verb when called. The format is the format accepted by the target."},{"type":"String","name":"verb","description":"Verb to be called within the target service.","required":true}],"anyField":false},"WorkflowTransitionDefinition":{"type":"WorkflowTransitionDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionDefinition","fields":[{"type":"String","name":"from","description":"Starting state","required":true},{"type":"String","name":"to","description":"Destination state","required":true}],"anyField":false}}}},"responseInfo":{"type":"WorkflowTemplate","resolved":{"types":{"WorkflowTemplate":{"type":"WorkflowTemplate","javaClass":"com.zetapush.common.messages.workflow.WorkflowTemplate","fields":[{"type":"List[WorkflowStateDefinition]","name":"states","description":"All the possible states of this workflow","required":true},{"type":"String","name":"templateName","description":"Unique template name","required":true},{"type":"List[WorkflowTransitionDefinition]","name":"transitions","description":"All the transitions of this workflow"}],"anyField":false},"WorkflowStateDefinition":{"type":"WorkflowStateDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowStateDefinition","fields":[{"type":"String","name":"stateId","description":"ID of the state","required":true},{"type":"String","name":"stateName","description":"State name"}],"anyField":false},"WorkflowTransitionDefinition":{"type":"WorkflowTransitionDefinition","javaClass":"com.zetapush.common.messages.workflow.WorkflowTransitionDefinition","fields":[{"type":"String","name":"from","description":"Starting state","required":true},{"type":"String","name":"to","description":"Destination state","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"WorkflowTemplate","imports":["com.zetapush.common.messages.workflow.WorkflowTemplate"]}}]},{"clazz":"com.zetapush.str.services.upload.UploadService","name":"Zpfs_s3","itemId":"zpfs_s3","desc":"User API for file management","notes":["User API for virtual file management and http file upload","This API contains all the verbs needed to browse, upload and remove files.","Files are stored on a per-user basis: each user has his or her own whole virtual filesystem.","Uploading a file is a 3-step process : request an upload URL, upload via HTTP, notify this service of completion."],"verbs":[{"name":"link","type":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]},"returnType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]},"desc":"Links a file","notes":["Links a file or folder to another location.","May fail if the target location is not empty."],"verbInfo":{"desc":"Links a file","deprecation":"","notes":["Links a file or folder to another location.","May fail if the target location is not empty."],"relatedClasses":[],"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId10/link","description":"Links a file","verb":"link","action":"link","notes":["Links a file or folder to another location.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}]},"traceable":true},{"name":"stat","type":{"typeName":"FileStatRequest","imports":["com.zetapush.common.messages.filestorage.FileStatRequest"]},"returnType":{"typeName":"FileStatResult","imports":["com.zetapush.common.messages.filestorage.FileStatResult"]},"desc":"Returns information about a file","notes":["Returns information about a single file.","The entry field will be null if the path does not exist"],"verbInfo":{"desc":"Returns information about a file","deprecation":"","notes":["Returns information about a single file.","The entry field will be null if the path does not exist"],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId10/stat","description":"Returns information about a file","verb":"stat","action":"stat","notes":["Returns information about a single file.","The entry field will be null if the path does not exist"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileStatRequest","resolved":{"types":{"FileStatRequest":{"type":"FileStatRequest","javaClass":"com.zetapush.common.messages.filestorage.FileStatRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileStatResult","resolved":{"types":{"FileStatResult":{"type":"FileStatResult","javaClass":"com.zetapush.common.messages.filestorage.FileStatResult","fields":[{"type":"ListingEntryInfo","name":"entry","description":"File information. Null if file does not exist"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true},{"name":"cp","type":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]},"returnType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]},"desc":"Copies a file","notes":["Copies a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"verbInfo":{"desc":"Copies a file","deprecation":"","notes":["Copies a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"relatedClasses":[],"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId10/cp","description":"Copies a file","verb":"cp","action":"cp","notes":["Copies a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}]},"traceable":true},{"name":"ls","type":{"typeName":"FolderListingRequest","imports":["com.zetapush.common.messages.filestorage.FolderListingRequest"]},"returnType":{"typeName":"FolderListing","imports":["com.zetapush.common.messages.filestorage.FolderListing"]},"desc":"Lists a folder content","notes":["Returns a paginated list of the folder's content."],"verbInfo":{"desc":"Lists a folder content","deprecation":"","notes":["Returns a paginated list of the folder's content."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId10/ls","description":"Lists a folder content","verb":"ls","action":"ls","notes":["Returns a paginated list of the folder's content."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FolderListingRequest","resolved":{"types":{"FolderListingRequest":{"type":"FolderListingRequest","javaClass":"com.zetapush.common.messages.filestorage.FolderListingRequest","fields":[{"type":"String","name":"folder","description":"Folder path","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"FolderListing","resolved":{"types":{"FolderListing":{"type":"FolderListing","javaClass":"com.zetapush.common.messages.filestorage.FolderListing","fields":[{"type":"PageContent[ListingEntryInfo]","name":"entries","description":"Entries in the folder"},{"type":"boolean","name":"exists","description":"Whether the path exists"},{"type":"String","name":"folder","description":"Folder path"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true},{"name":"mv","type":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]},"returnType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]},"desc":"Moves a file","notes":["Moves a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"verbInfo":{"desc":"Moves a file","deprecation":"","notes":["Moves a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"relatedClasses":[],"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId10/mv","description":"Moves a file","verb":"mv","action":"mv","notes":["Moves a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}]},"traceable":true},{"name":"snapshot","type":{"typeName":"SnapshotCreationRequest","imports":["com.zetapush.common.messages.filestorage.SnapshotCreationRequest"]},"returnType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]},"desc":"Creates a snapshot in a new folder","notes":["Creates a new folder and then copies the given files inside"],"verbInfo":{"desc":"Creates a snapshot in a new folder","deprecation":"","notes":["Creates a new folder and then copies the given files inside"],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId10/snapshot","description":"Creates a snapshot in a new folder","verb":"snapshot","action":"snapshot","notes":["Creates a new folder and then copies the given files inside"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"SnapshotCreationRequest","resolved":{"types":{"SnapshotCreationRequest":{"type":"SnapshotCreationRequest","javaClass":"com.zetapush.common.messages.filestorage.SnapshotCreationRequest","fields":[{"type":"boolean","name":"flatten","description":"Whether to flatten source paths. Setting this to true might lead to name conflicts"},{"type":"String","name":"folder","description":"Folder name","required":true},{"type":"List[SnapshotItem]","name":"items","description":"Items to be copied"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"boolean","name":"parents","description":"Whether to create all non-existing parents. Defaults to false."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"SnapshotItem":{"type":"SnapshotItem","javaClass":"com.zetapush.common.messages.filestorage.SnapshotCreationRequest.SnapshotItem","fields":[{"type":"boolean","name":"caseInsensitive","description":"Whether to taken case into account. Defaults to false : case is important"},{"type":"List[String]","name":"excludes","description":"Patterns for files that should be excluded. Used only when path is a folder. Exclusions have precedence over inclusions"},{"type":"List[String]","name":"includes","description":"Patterns for files that should be included. Used only when path is a folder"},{"type":"String","name":"path","description":"Path of the file to be included."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"traceable":true},{"name":"du","type":{"typeName":"ZpfsRequest","imports":["com.zetapush.common.messages.filestorage.ZpfsRequest"]},"returnType":{"typeName":"ZpfsDiskUsage","imports":["com.zetapush.common.messages.filestorage.ZpfsDiskUsage"]},"desc":"Returns disk usage","notes":["Returns an recursively aggregated number of used bytes, starting at the given path."],"verbInfo":{"desc":"Returns disk usage","deprecation":"","notes":["Returns an recursively aggregated number of used bytes, starting at the given path."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId10/du","description":"Returns disk usage","verb":"du","action":"du","notes":["Returns an recursively aggregated number of used bytes, starting at the given path."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ZpfsRequest","resolved":{"types":{"ZpfsRequest":{"type":"ZpfsRequest","javaClass":"com.zetapush.common.messages.filestorage.ZpfsRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"ZpfsDiskUsage","resolved":{"types":{"ZpfsDiskUsage":{"type":"ZpfsDiskUsage","javaClass":"com.zetapush.common.messages.filestorage.ZpfsDiskUsage","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"long","name":"usage","description":"Disk usage in bytes"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true},{"name":"rm","type":{"typeName":"FileRemoval","imports":["com.zetapush.common.messages.filestorage.FileRemoval"]},"returnType":{"typeName":"FileRemoval","imports":["com.zetapush.common.messages.filestorage.FileRemoval"]},"desc":"Removes a file","notes":["Removes a file or folder (recursively)."],"verbInfo":{"desc":"Removes a file","deprecation":"","notes":["Removes a file or folder (recursively)."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId10/rm","description":"Removes a file","verb":"rm","action":"rm","notes":["Removes a file or folder (recursively)."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileRemoval","resolved":{"types":{"FileRemoval":{"type":"FileRemoval","javaClass":"com.zetapush.common.messages.filestorage.FileRemoval","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileRemoval","resolved":{"types":{"FileRemoval":{"type":"FileRemoval","javaClass":"com.zetapush.common.messages.filestorage.FileRemoval","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"traceable":true},{"name":"freeUploadUrl","type":{"typeName":"FileUploadRequest","imports":["com.zetapush.common.messages.filestorage.FileUploadRequest"]},"returnType":{"typeName":"FileUploadLocation","imports":["com.zetapush.common.messages.filestorage.FileUploadLocation"]},"desc":"Requests an upload URL without constraints.","listenerInfo":{"channel":"/service/BU_ID/depId10/freeUploadUrl","description":"Requests an upload URL without constraints.","verb":"freeUploadUrl","action":"free_upload_url","serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileUploadRequest","resolved":{"types":{"FileUploadRequest":{"type":"FileUploadRequest","javaClass":"com.zetapush.common.messages.filestorage.FileUploadRequest","fields":[{"type":"String","name":"contentType","description":"Content type (matches the value of the HTTP content type header)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileUploadLocation","resolved":{"types":{"FileUploadLocation":{"type":"FileUploadLocation","javaClass":"com.zetapush.common.messages.filestorage.FileUploadLocation","fields":[{"type":"String","name":"guid","description":"GUID of the uploaded file"},{"type":"String","name":"httpMethod","description":"HTTP method, typically POST or PUT"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"url","description":"Upload URL for the http client"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true},{"name":"newUploadUrl","type":{"typeName":"FileUploadRequest","imports":["com.zetapush.common.messages.filestorage.FileUploadRequest"]},"returnType":{"typeName":"FileUploadLocation","imports":["com.zetapush.common.messages.filestorage.FileUploadLocation"]},"desc":"Requests an upload URL","notes":["Requests an HTTP upload URL.","The URL contains temporary credentials (typically valid for a few minutes) and is meant for immediate use."],"verbInfo":{"desc":"","deprecation":"","notes":["Requests an HTTP upload URL.","The URL contains temporary credentials (typically valid for a few minutes) and is meant for immediate use."],"relatedClasses":[],"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId10/newUploadUrl","description":"Requests an upload URL","verb":"newUploadUrl","action":"newUploadUrl","notes":["Requests an HTTP upload URL.","The URL contains temporary credentials (typically valid for a few minutes) and is meant for immediate use."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileUploadRequest","resolved":{"types":{"FileUploadRequest":{"type":"FileUploadRequest","javaClass":"com.zetapush.common.messages.filestorage.FileUploadRequest","fields":[{"type":"String","name":"contentType","description":"Content type (matches the value of the HTTP content type header)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileUploadLocation","resolved":{"types":{"FileUploadLocation":{"type":"FileUploadLocation","javaClass":"com.zetapush.common.messages.filestorage.FileUploadLocation","fields":[{"type":"String","name":"guid","description":"GUID of the uploaded file"},{"type":"String","name":"httpMethod","description":"HTTP method, typically POST or PUT"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"url","description":"Upload URL for the http client"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."}]},"traceable":true},{"name":"updateMeta","type":{"typeName":"FileMetaUpdate","imports":["com.zetapush.common.messages.filestorage.FileMetaUpdate"]},"returnType":{"typeName":"ListingEntryInfo","imports":["com.zetapush.common.messages.filestorage.ListingEntryInfo"]},"desc":"Updates a file's metadata","listenerInfo":{"channel":"/service/BU_ID/depId10/updateMeta","description":"Updates a file's metadata","verb":"updateMeta","action":"free_upload_url","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileMetaUpdate","resolved":{"types":{"FileMetaUpdate":{"type":"FileMetaUpdate","javaClass":"com.zetapush.common.messages.filestorage.FileMetaUpdate","fields":[{"type":"Map[String,Object]","name":"metadata","description":"Metadata to be updated"},{"type":"Map[String,String]","name":"metadataFiles","description":"Metadata to be processed and updated. Values are translated from GUIDs to URLs by the underlying storage provider"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"ListingEntryInfo","resolved":{"types":{"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"traceable":true},{"name":"newFile","type":{"typeName":"FileUploadComplete","imports":["com.zetapush.common.messages.filestorage.FileUploadComplete"]},"returnType":{"typeName":"ListingEntryInfo","imports":["com.zetapush.common.messages.filestorage.ListingEntryInfo"]},"desc":"Notifies of upload completion","notes":["The client application calls this verb to notify that it's done uploading to the cloud.","Calling that verb MAY trigger additional events such as thumbnail/metadata creation."],"verbInfo":{"desc":"","deprecation":"","notes":["The client application calls this verb to notify that it's done uploading to the cloud.","Calling that verb MAY trigger additional events such as thumbnail/metadata creation."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId10/newFile","description":"Notifies of upload completion","verb":"newFile","action":"newFile","notes":["The client application calls this verb to notify that it's done uploading to the cloud.","Calling that verb MAY trigger additional events such as thumbnail/metadata creation."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileUploadComplete","resolved":{"types":{"FileUploadComplete":{"type":"FileUploadComplete","javaClass":"com.zetapush.common.messages.filestorage.FileUploadComplete","fields":[{"type":"String","name":"guid","description":"File GUID","required":true},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"}],"anyField":false}}}},"responseInfo":{"type":"ListingEntryInfo","resolved":{"types":{"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"traceable":true},{"name":"mkdir","type":{"typeName":"FolderCreationRequest","imports":["com.zetapush.common.messages.filestorage.FolderCreationRequest"]},"returnType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]},"desc":"Creates a folder","notes":["Creates a new folder.","May fail if the target location is not empty."],"verbInfo":{"desc":"Creates a folder","deprecation":"","notes":["Creates a new folder.","May fail if the target location is not empty."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId10/mkdir","description":"Creates a folder","verb":"mkdir","action":"mkdir","notes":["Creates a new folder.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FolderCreationRequest","resolved":{"types":{"FolderCreationRequest":{"type":"FolderCreationRequest","javaClass":"com.zetapush.common.messages.filestorage.FolderCreationRequest","fields":[{"type":"String","name":"folder","description":"Folder name","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"boolean","name":"parents","description":"Whether to create all non-existing parents. Defaults to false."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"traceable":true}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId10/link","description":"Links a file","verb":"link","action":"link","notes":["Links a file or folder to another location.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}]},"returnedType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId10/stat","description":"Returns information about a file","verb":"stat","action":"stat","notes":["Returns information about a single file.","The entry field will be null if the path does not exist"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileStatRequest","resolved":{"types":{"FileStatRequest":{"type":"FileStatRequest","javaClass":"com.zetapush.common.messages.filestorage.FileStatRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileStatResult","resolved":{"types":{"FileStatResult":{"type":"FileStatResult","javaClass":"com.zetapush.common.messages.filestorage.FileStatResult","fields":[{"type":"ListingEntryInfo","name":"entry","description":"File information. Null if file does not exist"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"FileStatResult","imports":["com.zetapush.common.messages.filestorage.FileStatResult"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId10/cp","description":"Copies a file","verb":"cp","action":"cp","notes":["Copies a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}]},"returnedType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId10/ls","description":"Lists a folder content","verb":"ls","action":"ls","notes":["Returns a paginated list of the folder's content."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FolderListingRequest","resolved":{"types":{"FolderListingRequest":{"type":"FolderListingRequest","javaClass":"com.zetapush.common.messages.filestorage.FolderListingRequest","fields":[{"type":"String","name":"folder","description":"Folder path","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"FolderListing","resolved":{"types":{"FolderListing":{"type":"FolderListing","javaClass":"com.zetapush.common.messages.filestorage.FolderListing","fields":[{"type":"PageContent[ListingEntryInfo]","name":"entries","description":"Entries in the folder"},{"type":"boolean","name":"exists","description":"Whether the path exists"},{"type":"String","name":"folder","description":"Folder path"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"FolderListing","imports":["com.zetapush.common.messages.filestorage.FolderListing"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId10/mv","description":"Moves a file","verb":"mv","action":"mv","notes":["Moves a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}]},"returnedType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId10/snapshot","description":"Creates a snapshot in a new folder","verb":"snapshot","action":"snapshot","notes":["Creates a new folder and then copies the given files inside"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"SnapshotCreationRequest","resolved":{"types":{"SnapshotCreationRequest":{"type":"SnapshotCreationRequest","javaClass":"com.zetapush.common.messages.filestorage.SnapshotCreationRequest","fields":[{"type":"boolean","name":"flatten","description":"Whether to flatten source paths. Setting this to true might lead to name conflicts"},{"type":"String","name":"folder","description":"Folder name","required":true},{"type":"List[SnapshotItem]","name":"items","description":"Items to be copied"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"boolean","name":"parents","description":"Whether to create all non-existing parents. Defaults to false."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"SnapshotItem":{"type":"SnapshotItem","javaClass":"com.zetapush.common.messages.filestorage.SnapshotCreationRequest.SnapshotItem","fields":[{"type":"boolean","name":"caseInsensitive","description":"Whether to taken case into account. Defaults to false : case is important"},{"type":"List[String]","name":"excludes","description":"Patterns for files that should be excluded. Used only when path is a folder. Exclusions have precedence over inclusions"},{"type":"List[String]","name":"includes","description":"Patterns for files that should be included. Used only when path is a folder"},{"type":"String","name":"path","description":"Path of the file to be included."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId10/du","description":"Returns disk usage","verb":"du","action":"du","notes":["Returns an recursively aggregated number of used bytes, starting at the given path."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ZpfsRequest","resolved":{"types":{"ZpfsRequest":{"type":"ZpfsRequest","javaClass":"com.zetapush.common.messages.filestorage.ZpfsRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"ZpfsDiskUsage","resolved":{"types":{"ZpfsDiskUsage":{"type":"ZpfsDiskUsage","javaClass":"com.zetapush.common.messages.filestorage.ZpfsDiskUsage","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"long","name":"usage","description":"Disk usage in bytes"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"ZpfsDiskUsage","imports":["com.zetapush.common.messages.filestorage.ZpfsDiskUsage"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId10/rm","description":"Removes a file","verb":"rm","action":"rm","notes":["Removes a file or folder (recursively)."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileRemoval","resolved":{"types":{"FileRemoval":{"type":"FileRemoval","javaClass":"com.zetapush.common.messages.filestorage.FileRemoval","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileRemoval","resolved":{"types":{"FileRemoval":{"type":"FileRemoval","javaClass":"com.zetapush.common.messages.filestorage.FileRemoval","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"FileRemoval","imports":["com.zetapush.common.messages.filestorage.FileRemoval"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId10/freeUploadUrl","description":"Requests an upload URL without constraints.","verb":"freeUploadUrl","action":"free_upload_url","serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileUploadRequest","resolved":{"types":{"FileUploadRequest":{"type":"FileUploadRequest","javaClass":"com.zetapush.common.messages.filestorage.FileUploadRequest","fields":[{"type":"String","name":"contentType","description":"Content type (matches the value of the HTTP content type header)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileUploadLocation","resolved":{"types":{"FileUploadLocation":{"type":"FileUploadLocation","javaClass":"com.zetapush.common.messages.filestorage.FileUploadLocation","fields":[{"type":"String","name":"guid","description":"GUID of the uploaded file"},{"type":"String","name":"httpMethod","description":"HTTP method, typically POST or PUT"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"url","description":"Upload URL for the http client"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"FileUploadLocation","imports":["com.zetapush.common.messages.filestorage.FileUploadLocation"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId10/newUploadUrl","description":"Requests an upload URL","verb":"newUploadUrl","action":"newUploadUrl","notes":["Requests an HTTP upload URL.","The URL contains temporary credentials (typically valid for a few minutes) and is meant for immediate use."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileUploadRequest","resolved":{"types":{"FileUploadRequest":{"type":"FileUploadRequest","javaClass":"com.zetapush.common.messages.filestorage.FileUploadRequest","fields":[{"type":"String","name":"contentType","description":"Content type (matches the value of the HTTP content type header)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileUploadLocation","resolved":{"types":{"FileUploadLocation":{"type":"FileUploadLocation","javaClass":"com.zetapush.common.messages.filestorage.FileUploadLocation","fields":[{"type":"String","name":"guid","description":"GUID of the uploaded file"},{"type":"String","name":"httpMethod","description":"HTTP method, typically POST or PUT"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"url","description":"Upload URL for the http client"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."}]},"returnedType":{"typeName":"FileUploadLocation","imports":["com.zetapush.common.messages.filestorage.FileUploadLocation"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId10/updateMeta","description":"Updates a file's metadata","verb":"updateMeta","action":"free_upload_url","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileMetaUpdate","resolved":{"types":{"FileMetaUpdate":{"type":"FileMetaUpdate","javaClass":"com.zetapush.common.messages.filestorage.FileMetaUpdate","fields":[{"type":"Map[String,Object]","name":"metadata","description":"Metadata to be updated"},{"type":"Map[String,String]","name":"metadataFiles","description":"Metadata to be processed and updated. Values are translated from GUIDs to URLs by the underlying storage provider"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"ListingEntryInfo","resolved":{"types":{"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"ListingEntryInfo","imports":["com.zetapush.common.messages.filestorage.ListingEntryInfo"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId10/newFile","description":"Notifies of upload completion","verb":"newFile","action":"newFile","notes":["The client application calls this verb to notify that it's done uploading to the cloud.","Calling that verb MAY trigger additional events such as thumbnail/metadata creation."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileUploadComplete","resolved":{"types":{"FileUploadComplete":{"type":"FileUploadComplete","javaClass":"com.zetapush.common.messages.filestorage.FileUploadComplete","fields":[{"type":"String","name":"guid","description":"File GUID","required":true},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"}],"anyField":false}}}},"responseInfo":{"type":"ListingEntryInfo","resolved":{"types":{"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"ListingEntryInfo","imports":["com.zetapush.common.messages.filestorage.ListingEntryInfo"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId10/mkdir","description":"Creates a folder","verb":"mkdir","action":"mkdir","notes":["Creates a new folder.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FolderCreationRequest","resolved":{"types":{"FolderCreationRequest":{"type":"FolderCreationRequest","javaClass":"com.zetapush.common.messages.filestorage.FolderCreationRequest","fields":[{"type":"String","name":"folder","description":"Folder name","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"boolean","name":"parents","description":"Whether to create all non-existing parents. Defaults to false."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]}}]},{"clazz":"com.zetapush.str.services.sendmail.SendmailService","name":"Sendmail","itemId":"sendmail","desc":"Mail service user API","notes":["This service is statically configured with an outgoing SMTP server.","Users call the API here to actually send emails."],"verbs":[{"name":"send","type":{"typeName":"Email","imports":["com.zetapush.common.messages.sendmail.Email"]},"desc":"Sends an email","notes":["Sends an email with the given body to the intended recipients."],"verbInfo":{"desc":"Sends an email","deprecation":"","notes":["Sends an email with the given body to the intended recipients."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId20/send","description":"Sends an email","verb":"send","notes":["Sends an email with the given body to the intended recipients."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"Email","resolved":{"types":{"Email":{"type":"Email","javaClass":"com.zetapush.common.messages.sendmail.Email","fields":[{"type":"List[String]","name":"bcc","description":"Email recipients"},{"type":"List[String]","name":"cc","description":"Email recipients"},{"type":"String","name":"html","description":"Email html body. you can use text and/or html"},{"type":"String","name":"subject","description":"Email subject","required":true},{"type":"String","name":"text","description":"Email plain text body"},{"type":"List[String]","name":"to","description":"Email recipients"}],"anyField":false}}}},"errors":[]},"traceable":false}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId20/send","description":"Sends an email","verb":"send","notes":["Sends an email with the given body to the intended recipients."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"Email","resolved":{"types":{"Email":{"type":"Email","javaClass":"com.zetapush.common.messages.sendmail.Email","fields":[{"type":"List[String]","name":"bcc","description":"Email recipients"},{"type":"List[String]","name":"cc","description":"Email recipients"},{"type":"String","name":"html","description":"Email html body. you can use text and/or html"},{"type":"String","name":"subject","description":"Email subject","required":true},{"type":"String","name":"text","description":"Email plain text body"},{"type":"List[String]","name":"to","description":"Email recipients"}],"anyField":false}}}},"errors":[]}}]},{"clazz":"com.zetapush.str.example.echo.EchoService","name":"Echo","itemId":"echo","desc":"Echo service","notes":["Simple echo service, for development purposes."],"verbs":[{"name":"echo","type":{"typeName":"Map<String,Object>","imports":["java.util.Map","java.lang.Object","java.lang.String"]},"returnType":{"typeName":"Map<String,Object>","imports":["java.util.Map","java.lang.Object","java.lang.String"]},"desc":"Echoes an object","notes":["Echoes an object: the server will echo that object on channel 'echo' for the current user."],"verbInfo":{"desc":"Echoes an object","deprecation":"","notes":["Echoes an object: the server will echo that object on channel 'echo' for the current user."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId5/echo","description":"Echoes an object","verb":"echo","notes":["Echoes an object: the server will echo that object on channel 'echo' for the current user."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"Map[String,Object]","resolved":{"types":{}}},"responseInfo":{"type":"Map[String,Object]","resolved":{"types":{}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":false}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId5/echo","description":"Echoes an object","verb":"echo","notes":["Echoes an object: the server will echo that object on channel 'echo' for the current user."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"Map[String,Object]","resolved":{"types":{}}},"responseInfo":{"type":"Map[String,Object]","resolved":{"types":{}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"Map<String,Object>","imports":["java.util.Map","java.lang.Object","java.lang.String"]}}]},{"clazz":"com.zetapush.str.services.logs.LogService","name":"Logs","itemId":"logs","desc":"Log API","notes":["User API for logging."],"verbs":[{"name":"log","type":{"typeName":"LogRequest","imports":["com.zetapush.common.log.LogRequest"]},"desc":"Creates a log entry","notes":["Adds some server generated data and stores the entry into the sink defined by configuration."],"verbInfo":{"desc":"","deprecation":"","notes":["Adds some server generated data and stores the entry into the sink defined by configuration."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId3/log","description":"Creates a log entry","verb":"log","notes":["Adds some server generated data and stores the entry into the sink defined by configuration."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"LogRequest","resolved":{"types":{"LogRequest":{"type":"LogRequest","javaClass":"com.zetapush.common.log.LogRequest","fields":[{"type":"String","name":"contextId","description":"Context ID. Clients and developers must not pass this explicitly. This value was generated by the server and passed back by the worker SDKs."},{"type":"Map[String,Object]","name":"custom","description":"For developer-defined values, tags, etc... A typical usage is to trace an application-generated transaction ID across several API calls, to be able to retrace a full click-stream afterwards"},{"type":"Object","name":"data","description":"The actual data you are logging. Can be a text message, or more structured data."},{"type":"LogLevel","name":"level","description":"By setting the level you ensure that this request ends up in the logs only when configured to do so."},{"type":"String","name":"logger","description":"Logger name. Hierarchical, dot-separated identifier, such as 'myClass.myVerb' to ease log storage and filtering."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Refines the identification of a connected client. Automtically set by the server."},{"type":"long","name":"timestampOverride","description":"User supplied timestamp. The server will still store its own timestamp."}],"anyField":false},"LogLevel":{"type":"LogLevel","javaClass":"com.zetapush.common.log.LogLevel","enumValues":[{"name":"DEBUG","description":"All information usually needed by developers or administrators to help diagnose problems."},{"name":"ERROR","description":"Something is wrong enough to compromise the correct processing of a request (for example a mandatory external resource, e.g. another HTTP server, is not responding)"},{"name":"TRACE","description":"Lowest level of traces. All service verbs at the TRACE level will dump all input and output. DO NOT enable TRACE unless you are prepared to go through a very high volume of logs. Enabling TRACE may degrade application performance."},{"name":"WARN","description":"Anything that can cause application misbehaviour, but that does not need human intervention."},{"name":"INFO","description":"Events meaningful for your application should go there : the creation of a user, a purchase, etc ..."}],"anyField":false}}}},"errors":[]},"traceable":false}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId3/log","description":"Creates a log entry","verb":"log","notes":["Adds some server generated data and stores the entry into the sink defined by configuration."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"LogRequest","resolved":{"types":{"LogRequest":{"type":"LogRequest","javaClass":"com.zetapush.common.log.LogRequest","fields":[{"type":"String","name":"contextId","description":"Context ID. Clients and developers must not pass this explicitly. This value was generated by the server and passed back by the worker SDKs."},{"type":"Map[String,Object]","name":"custom","description":"For developer-defined values, tags, etc... A typical usage is to trace an application-generated transaction ID across several API calls, to be able to retrace a full click-stream afterwards"},{"type":"Object","name":"data","description":"The actual data you are logging. Can be a text message, or more structured data."},{"type":"LogLevel","name":"level","description":"By setting the level you ensure that this request ends up in the logs only when configured to do so."},{"type":"String","name":"logger","description":"Logger name. Hierarchical, dot-separated identifier, such as 'myClass.myVerb' to ease log storage and filtering."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Refines the identification of a connected client. Automtically set by the server."},{"type":"long","name":"timestampOverride","description":"User supplied timestamp. The server will still store its own timestamp."}],"anyField":false},"LogLevel":{"type":"LogLevel","javaClass":"com.zetapush.common.log.LogLevel","enumValues":[{"name":"DEBUG","description":"All information usually needed by developers or administrators to help diagnose problems."},{"name":"ERROR","description":"Something is wrong enough to compromise the correct processing of a request (for example a mandatory external resource, e.g. another HTTP server, is not responding)"},{"name":"TRACE","description":"Lowest level of traces. All service verbs at the TRACE level will dump all input and output. DO NOT enable TRACE unless you are prepared to go through a very high volume of logs. Enabling TRACE may degrade application performance."},{"name":"WARN","description":"Anything that can cause application misbehaviour, but that does not need human intervention."},{"name":"INFO","description":"Events meaningful for your application should go there : the creation of a user, a purchase, etc ..."}],"anyField":false}}}},"errors":[]}}]},{"clazz":"com.zetapush.str.services.groups.services.RemotingService","name":"Remoting","itemId":"groups","desc":"User API for remote control","notes":[],"verbs":[{"name":"capabilities","type":{"typeName":"DeviceCapabilities","imports":["com.zetapush.common.messages.remoting.DeviceCapabilities"]},"desc":"Response to 'getCapabilities'","listenerInfo":{"channel":"/service/BU_ID/depId9/capabilities","description":"Response to 'getCapabilities'","verb":"capabilities","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"DeviceCapabilities","resolved":{"types":{"DeviceCapabilities":{"type":"DeviceCapabilities","javaClass":"com.zetapush.common.messages.remoting.DeviceCapabilities","fields":[{"type":"String","name":"answeringResource","description":"Resource name of the answering device"},{"type":"String","name":"askingResource","description":"Resource name of the asking device"},{"type":"List[String]","name":"capabilities","description":"List of capabilities. Capabilities are developer-defined strings"}],"anyField":false}}}},"otherOutputs":[{"type":"DeviceCapabilities","resolved":{"types":{"DeviceCapabilities":{"type":"DeviceCapabilities","javaClass":"com.zetapush.common.messages.remoting.DeviceCapabilities","fields":[{"type":"String","name":"answeringResource","description":"Resource name of the answering device"},{"type":"String","name":"askingResource","description":"Resource name of the asking device"},{"type":"List[String]","name":"capabilities","description":"List of capabilities. Capabilities are developer-defined strings"}],"anyField":false}}},"channel":"/service/BU_ID/depId9/capabilities","target":"","description":"Response to 'getCapabilities'","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"DeviceCapabilities","imports":["com.zetapush.common.messages.remoting.DeviceCapabilities"]}}],"errors":[]},"traceable":false},{"name":"ping","type":{"typeName":"PingRequest","imports":["com.zetapush.common.messages.remoting.PingRequest"]},"desc":"Pings devices","notes":["A user requests all devices (of all owners) on which he has authorizations to respond on channel 'pong'"],"verbInfo":{"desc":"","deprecation":"","notes":["A user requests all devices (of all owners) on which he has authorizations to respond on channel 'pong'"],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId9/ping","description":"Pings devices","verb":"ping","notes":["A user requests all devices (of all owners) on which he has authorizations to respond on channel 'pong'"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"PingRequest","resolved":{"types":{"PingRequest":{"type":"PingRequest","javaClass":"com.zetapush.common.messages.remoting.PingRequest","fields":[{"type":"String","name":"action","description":"The action to probe","required":true}],"anyField":false}}}},"otherOutputs":[{"type":"DeviceAvailability","resolved":{"types":{"DeviceAvailability":{"type":"DeviceAvailability","javaClass":"com.zetapush.common.messages.remoting.DeviceAvailability","fields":[{"type":"String","name":"action","description":"Action for which the device's availability is tested"},{"type":"boolean","name":"available","description":"Whether the device is available or not"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"},{"type":"String","name":"uid","description":"Session id of the answering device"},{"type":"String","name":"user","description":"User inquiring about availability"}],"anyField":false}}},"channel":"/service/BU_ID/depId9/ping","target":"","description":"Notifies of ping","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"DeviceAvailability","imports":["com.zetapush.common.messages.remoting.DeviceAvailability"]}}],"errors":[]},"traceable":false},{"name":"addListener","type":{"typeName":"RemoteCommand","imports":["com.zetapush.common.messages.remoting.RemoteCommand"]},"desc":"Adds a listener","notes":["A user requests notifications from a device owned by anyone who granted him the right authorizations.","Whenever the device calls 'notify', notifications will be sent to the caller of this verb."],"verbInfo":{"desc":"","deprecation":"","notes":["A user requests notifications from a device owned by anyone who granted him the right authorizations.","Whenever the device calls 'notify', notifications will be sent to the caller of this verb."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId9/addListener","description":"Adds a listener","verb":"addListener","notes":["A user requests notifications from a device owned by anyone who granted him the right authorizations.","Whenever the device calls 'notify', notifications will be sent to the caller of this verb."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"RemoteCommand","resolved":{"types":{"RemoteCommand":{"type":"RemoteCommand","javaClass":"com.zetapush.common.messages.remoting.RemoteCommand","fields":[{"type":"String","name":"cmd","description":"Command to be executed. This is an arbitrary identifier string whose semantics are left to the developer.","required":true},{"type":"Map[String,Object]","name":"data","description":"Optional data payload for the command. This is an arbitrary object whose semantics are left to the developer."},{"type":"String","name":"from","description":"User issuing the command"},{"type":"String","name":"fromResource","description":"Resource of the user issuing the command"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false}}}},"errors":[]},"traceable":false},{"name":"removeListener","type":{"typeName":"RemoteCommand","imports":["com.zetapush.common.messages.remoting.RemoteCommand"]},"desc":"Removes a listener","notes":["A user stops requesting notifications from a device owned by anyone who granted him the right authorizations"],"verbInfo":{"desc":"","deprecation":"","notes":["A user stops requesting notifications from a device owned by anyone who granted him the right authorizations"],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId9/removeListener","description":"Removes a listener","verb":"removeListener","notes":["A user stops requesting notifications from a device owned by anyone who granted him the right authorizations"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"RemoteCommand","resolved":{"types":{"RemoteCommand":{"type":"RemoteCommand","javaClass":"com.zetapush.common.messages.remoting.RemoteCommand","fields":[{"type":"String","name":"cmd","description":"Command to be executed. This is an arbitrary identifier string whose semantics are left to the developer.","required":true},{"type":"Map[String,Object]","name":"data","description":"Optional data payload for the command. This is an arbitrary object whose semantics are left to the developer."},{"type":"String","name":"from","description":"User issuing the command"},{"type":"String","name":"fromResource","description":"Resource of the user issuing the command"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false}}}},"errors":[]},"traceable":false},{"name":"getCapabilities","type":{"imports":[]},"desc":"Requests capabilities","notes":["A user requests all his devices for the whole list of their capabilities.","Devices are expected to answer on channel 'capabilities'"],"verbInfo":{"desc":"","deprecation":"","notes":["A user requests all his devices for the whole list of their capabilities.","Devices are expected to answer on channel 'capabilities'"],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId9/getCapabilities","description":"Requests capabilities","verb":"getCapabilities","notes":["A user requests all his devices for the whole list of their capabilities.","Devices are expected to answer on channel 'capabilities'"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"otherOutputs":[{"type":"DeviceCapabilities","resolved":{"types":{"DeviceCapabilities":{"type":"DeviceCapabilities","javaClass":"com.zetapush.common.messages.remoting.DeviceCapabilities","fields":[{"type":"String","name":"answeringResource","description":"Resource name of the answering device"},{"type":"String","name":"askingResource","description":"Resource name of the asking device"},{"type":"List[String]","name":"capabilities","description":"List of capabilities. Capabilities are developer-defined strings"}],"anyField":false}}},"channel":"/service/BU_ID/depId9/getCapabilities","target":"","description":"Notifies with all device capabilities for the user","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"DeviceCapabilities","imports":["com.zetapush.common.messages.remoting.DeviceCapabilities"]}}],"errors":[]},"traceable":false},{"name":"pong","type":{"typeName":"DeviceAvailability","imports":["com.zetapush.common.messages.remoting.DeviceAvailability"]},"desc":"Response to ping","listenerInfo":{"channel":"/service/BU_ID/depId9/pong","description":"Response to ping","verb":"pong","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"DeviceAvailability","resolved":{"types":{"DeviceAvailability":{"type":"DeviceAvailability","javaClass":"com.zetapush.common.messages.remoting.DeviceAvailability","fields":[{"type":"String","name":"action","description":"Action for which the device's availability is tested"},{"type":"boolean","name":"available","description":"Whether the device is available or not"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"},{"type":"String","name":"uid","description":"Session id of the answering device"},{"type":"String","name":"user","description":"User inquiring about availability"}],"anyField":false}}}},"otherOutputs":[{"type":"DeviceAvailability","resolved":{"types":{"DeviceAvailability":{"type":"DeviceAvailability","javaClass":"com.zetapush.common.messages.remoting.DeviceAvailability","fields":[{"type":"String","name":"action","description":"Action for which the device's availability is tested"},{"type":"boolean","name":"available","description":"Whether the device is available or not"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"},{"type":"String","name":"uid","description":"Session id of the answering device"},{"type":"String","name":"user","description":"User inquiring about availability"}],"anyField":false}}},"channel":"/service/BU_ID/depId9/pong","target":"","description":"Response to ping","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"DeviceAvailability","imports":["com.zetapush.common.messages.remoting.DeviceAvailability"]}}],"errors":[]},"traceable":false},{"name":"notify","type":{"typeName":"RemoteCommand","imports":["com.zetapush.common.messages.remoting.RemoteCommand"]},"desc":"Notifies of some event","notes":["A device notifies the registered users/devices on this channel.","The server forwards the notification to said users."],"verbInfo":{"desc":"","deprecation":"","notes":["A device notifies the registered users/devices on this channel.","The server forwards the notification to said users."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId9/notify","description":"Notifies of some event","verb":"notify","notes":["A device notifies the registered users/devices on this channel.","The server forwards the notification to said users."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"RemoteCommand","resolved":{"types":{"RemoteCommand":{"type":"RemoteCommand","javaClass":"com.zetapush.common.messages.remoting.RemoteCommand","fields":[{"type":"String","name":"cmd","description":"Command to be executed. This is an arbitrary identifier string whose semantics are left to the developer.","required":true},{"type":"Map[String,Object]","name":"data","description":"Optional data payload for the command. This is an arbitrary object whose semantics are left to the developer."},{"type":"String","name":"from","description":"User issuing the command"},{"type":"String","name":"fromResource","description":"Resource of the user issuing the command"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false}}}},"otherOutputs":[{"type":"RemoteCommand","resolved":{"types":{"RemoteCommand":{"type":"RemoteCommand","javaClass":"com.zetapush.common.messages.remoting.RemoteCommand","fields":[{"type":"String","name":"cmd","description":"Command to be executed. This is an arbitrary identifier string whose semantics are left to the developer.","required":true},{"type":"Map[String,Object]","name":"data","description":"Optional data payload for the command. This is an arbitrary object whose semantics are left to the developer."},{"type":"String","name":"from","description":"User issuing the command"},{"type":"String","name":"fromResource","description":"Resource of the user issuing the command"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false}}},"channel":"/service/BU_ID/depId9/notify","target":"","description":"Notifies of some event","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"RemoteCommand","imports":["com.zetapush.common.messages.remoting.RemoteCommand"]}}],"errors":[]},"traceable":false},{"name":"execute","type":{"typeName":"RemoteCommand","imports":["com.zetapush.common.messages.remoting.RemoteCommand"]},"desc":"Executes a command","notes":["A user executes a command on a device owned by anyone who granted him the right authorizations.","The command is issued on channel 'command'"],"verbInfo":{"desc":"","deprecation":"","notes":["A user executes a command on a device owned by anyone who granted him the right authorizations.","The command is issued on channel 'command'"],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId9/execute","description":"Executes a command","verb":"execute","notes":["A user executes a command on a device owned by anyone who granted him the right authorizations.","The command is issued on channel 'command'"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"RemoteCommand","resolved":{"types":{"RemoteCommand":{"type":"RemoteCommand","javaClass":"com.zetapush.common.messages.remoting.RemoteCommand","fields":[{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"},{"type":"String","name":"fromResource","description":"Resource of the user issuing the command. \nCommanding user's resource","serverGenerated":true},{"type":"String","name":"cmd","description":"Command to be executed. This is an arbitrary identifier string whose semantics are left to the developer.","required":true},{"type":"String","name":"from","description":"User issuing the command. \nCommanding user's key","serverGenerated":true},{"type":"Map[String,Object]","name":"data","description":"Optional data payload for the command. This is an arbitrary object whose semantics are left to the developer."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user. \nTarget device's user key","serverGenerated":false}],"anyField":false}}}},"otherOutputs":[{"type":"RemoteCommand","resolved":{"types":{"RemoteCommand":{"type":"RemoteCommand","javaClass":"com.zetapush.common.messages.remoting.RemoteCommand","fields":[{"type":"String","name":"cmd","description":"Command to be executed. This is an arbitrary identifier string whose semantics are left to the developer.","required":true},{"type":"Map[String,Object]","name":"data","description":"Optional data payload for the command. This is an arbitrary object whose semantics are left to the developer."},{"type":"String","name":"from","description":"User issuing the command"},{"type":"String","name":"fromResource","description":"Resource of the user issuing the command"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false}}},"channel":"/service/BU_ID/depId9/execute","target":"","description":"Notifies when a command has been executed","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"RemoteCommand","imports":["com.zetapush.common.messages.remoting.RemoteCommand"]}}],"errors":[]},"traceable":false}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId9/capabilities","description":"Response to 'getCapabilities'","verb":"capabilities","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"DeviceCapabilities","resolved":{"types":{"DeviceCapabilities":{"type":"DeviceCapabilities","javaClass":"com.zetapush.common.messages.remoting.DeviceCapabilities","fields":[{"type":"String","name":"answeringResource","description":"Resource name of the answering device"},{"type":"String","name":"askingResource","description":"Resource name of the asking device"},{"type":"List[String]","name":"capabilities","description":"List of capabilities. Capabilities are developer-defined strings"}],"anyField":false}}}},"otherOutputs":[{"type":"DeviceCapabilities","resolved":{"types":{"DeviceCapabilities":{"type":"DeviceCapabilities","javaClass":"com.zetapush.common.messages.remoting.DeviceCapabilities","fields":[{"type":"String","name":"answeringResource","description":"Resource name of the answering device"},{"type":"String","name":"askingResource","description":"Resource name of the asking device"},{"type":"List[String]","name":"capabilities","description":"List of capabilities. Capabilities are developer-defined strings"}],"anyField":false}}},"channel":"/service/BU_ID/depId9/capabilities","target":"","description":"Response to 'getCapabilities'","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"DeviceCapabilities","imports":["com.zetapush.common.messages.remoting.DeviceCapabilities"]}}],"errors":[]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/ping","description":"Pings devices","verb":"ping","notes":["A user requests all devices (of all owners) on which he has authorizations to respond on channel 'pong'"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"PingRequest","resolved":{"types":{"PingRequest":{"type":"PingRequest","javaClass":"com.zetapush.common.messages.remoting.PingRequest","fields":[{"type":"String","name":"action","description":"The action to probe","required":true}],"anyField":false}}}},"otherOutputs":[{"type":"DeviceAvailability","resolved":{"types":{"DeviceAvailability":{"type":"DeviceAvailability","javaClass":"com.zetapush.common.messages.remoting.DeviceAvailability","fields":[{"type":"String","name":"action","description":"Action for which the device's availability is tested"},{"type":"boolean","name":"available","description":"Whether the device is available or not"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"},{"type":"String","name":"uid","description":"Session id of the answering device"},{"type":"String","name":"user","description":"User inquiring about availability"}],"anyField":false}}},"channel":"/service/BU_ID/depId9/ping","target":"","description":"Notifies of ping","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"DeviceAvailability","imports":["com.zetapush.common.messages.remoting.DeviceAvailability"]}}],"errors":[]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/addListener","description":"Adds a listener","verb":"addListener","notes":["A user requests notifications from a device owned by anyone who granted him the right authorizations.","Whenever the device calls 'notify', notifications will be sent to the caller of this verb."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"RemoteCommand","resolved":{"types":{"RemoteCommand":{"type":"RemoteCommand","javaClass":"com.zetapush.common.messages.remoting.RemoteCommand","fields":[{"type":"String","name":"cmd","description":"Command to be executed. This is an arbitrary identifier string whose semantics are left to the developer.","required":true},{"type":"Map[String,Object]","name":"data","description":"Optional data payload for the command. This is an arbitrary object whose semantics are left to the developer."},{"type":"String","name":"from","description":"User issuing the command"},{"type":"String","name":"fromResource","description":"Resource of the user issuing the command"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false}}}},"errors":[]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/removeListener","description":"Removes a listener","verb":"removeListener","notes":["A user stops requesting notifications from a device owned by anyone who granted him the right authorizations"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"RemoteCommand","resolved":{"types":{"RemoteCommand":{"type":"RemoteCommand","javaClass":"com.zetapush.common.messages.remoting.RemoteCommand","fields":[{"type":"String","name":"cmd","description":"Command to be executed. This is an arbitrary identifier string whose semantics are left to the developer.","required":true},{"type":"Map[String,Object]","name":"data","description":"Optional data payload for the command. This is an arbitrary object whose semantics are left to the developer."},{"type":"String","name":"from","description":"User issuing the command"},{"type":"String","name":"fromResource","description":"Resource of the user issuing the command"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false}}}},"errors":[]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/getCapabilities","description":"Requests capabilities","verb":"getCapabilities","notes":["A user requests all his devices for the whole list of their capabilities.","Devices are expected to answer on channel 'capabilities'"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"otherOutputs":[{"type":"DeviceCapabilities","resolved":{"types":{"DeviceCapabilities":{"type":"DeviceCapabilities","javaClass":"com.zetapush.common.messages.remoting.DeviceCapabilities","fields":[{"type":"String","name":"answeringResource","description":"Resource name of the answering device"},{"type":"String","name":"askingResource","description":"Resource name of the asking device"},{"type":"List[String]","name":"capabilities","description":"List of capabilities. Capabilities are developer-defined strings"}],"anyField":false}}},"channel":"/service/BU_ID/depId9/getCapabilities","target":"","description":"Notifies with all device capabilities for the user","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"DeviceCapabilities","imports":["com.zetapush.common.messages.remoting.DeviceCapabilities"]}}],"errors":[]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/pong","description":"Response to ping","verb":"pong","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"DeviceAvailability","resolved":{"types":{"DeviceAvailability":{"type":"DeviceAvailability","javaClass":"com.zetapush.common.messages.remoting.DeviceAvailability","fields":[{"type":"String","name":"action","description":"Action for which the device's availability is tested"},{"type":"boolean","name":"available","description":"Whether the device is available or not"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"},{"type":"String","name":"uid","description":"Session id of the answering device"},{"type":"String","name":"user","description":"User inquiring about availability"}],"anyField":false}}}},"otherOutputs":[{"type":"DeviceAvailability","resolved":{"types":{"DeviceAvailability":{"type":"DeviceAvailability","javaClass":"com.zetapush.common.messages.remoting.DeviceAvailability","fields":[{"type":"String","name":"action","description":"Action for which the device's availability is tested"},{"type":"boolean","name":"available","description":"Whether the device is available or not"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"},{"type":"String","name":"uid","description":"Session id of the answering device"},{"type":"String","name":"user","description":"User inquiring about availability"}],"anyField":false}}},"channel":"/service/BU_ID/depId9/pong","target":"","description":"Response to ping","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"DeviceAvailability","imports":["com.zetapush.common.messages.remoting.DeviceAvailability"]}}],"errors":[]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/notify","description":"Notifies of some event","verb":"notify","notes":["A device notifies the registered users/devices on this channel.","The server forwards the notification to said users."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"RemoteCommand","resolved":{"types":{"RemoteCommand":{"type":"RemoteCommand","javaClass":"com.zetapush.common.messages.remoting.RemoteCommand","fields":[{"type":"String","name":"cmd","description":"Command to be executed. This is an arbitrary identifier string whose semantics are left to the developer.","required":true},{"type":"Map[String,Object]","name":"data","description":"Optional data payload for the command. This is an arbitrary object whose semantics are left to the developer."},{"type":"String","name":"from","description":"User issuing the command"},{"type":"String","name":"fromResource","description":"Resource of the user issuing the command"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false}}}},"otherOutputs":[{"type":"RemoteCommand","resolved":{"types":{"RemoteCommand":{"type":"RemoteCommand","javaClass":"com.zetapush.common.messages.remoting.RemoteCommand","fields":[{"type":"String","name":"cmd","description":"Command to be executed. This is an arbitrary identifier string whose semantics are left to the developer.","required":true},{"type":"Map[String,Object]","name":"data","description":"Optional data payload for the command. This is an arbitrary object whose semantics are left to the developer."},{"type":"String","name":"from","description":"User issuing the command"},{"type":"String","name":"fromResource","description":"Resource of the user issuing the command"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false}}},"channel":"/service/BU_ID/depId9/notify","target":"","description":"Notifies of some event","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"RemoteCommand","imports":["com.zetapush.common.messages.remoting.RemoteCommand"]}}],"errors":[]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/execute","description":"Executes a command","verb":"execute","notes":["A user executes a command on a device owned by anyone who granted him the right authorizations.","The command is issued on channel 'command'"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"RemoteCommand","resolved":{"types":{"RemoteCommand":{"type":"RemoteCommand","javaClass":"com.zetapush.common.messages.remoting.RemoteCommand","fields":[{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"},{"type":"String","name":"fromResource","description":"Resource of the user issuing the command. \nCommanding user's resource","serverGenerated":true},{"type":"String","name":"cmd","description":"Command to be executed. This is an arbitrary identifier string whose semantics are left to the developer.","required":true},{"type":"String","name":"from","description":"User issuing the command. \nCommanding user's key","serverGenerated":true},{"type":"Map[String,Object]","name":"data","description":"Optional data payload for the command. This is an arbitrary object whose semantics are left to the developer."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user. \nTarget device's user key","serverGenerated":false}],"anyField":false}}}},"otherOutputs":[{"type":"RemoteCommand","resolved":{"types":{"RemoteCommand":{"type":"RemoteCommand","javaClass":"com.zetapush.common.messages.remoting.RemoteCommand","fields":[{"type":"String","name":"cmd","description":"Command to be executed. This is an arbitrary identifier string whose semantics are left to the developer.","required":true},{"type":"Map[String,Object]","name":"data","description":"Optional data payload for the command. This is an arbitrary object whose semantics are left to the developer."},{"type":"String","name":"from","description":"User issuing the command"},{"type":"String","name":"fromResource","description":"Resource of the user issuing the command"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false}}},"channel":"/service/BU_ID/depId9/execute","target":"","description":"Notifies when a command has been executed","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"RemoteCommand","imports":["com.zetapush.common.messages.remoting.RemoteCommand"]}}],"errors":[]}}]},{"clazz":"com.zetapush.str.services.notifications.NotificationService","name":"Notif","itemId":"notif","desc":"Notification User API","notes":["User API for notifications.","For notifications to work properly, it is imperative that the resource name of a device remain constant over time."],"verbs":[{"name":"send","type":{"typeName":"NotificationMessage","imports":["com.zetapush.common.messages.notifications.NotificationMessage"]},"returnType":{"typeName":"NotificationSendStatus","imports":["com.zetapush.common.messages.notifications.NotificationSendStatus"]},"desc":"Sends a notification to the target","notes":["Sends a native push notification to the target."],"verbInfo":{"desc":"","deprecation":"","notes":["Sends a native push notification to the target."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId8/send","description":"Sends a notification to the target","verb":"send","notes":["Sends a native push notification to the target."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"NotificationMessage","resolved":{"types":{"NotificationMessage":{"type":"NotificationMessage","javaClass":"com.zetapush.common.messages.notifications.NotificationMessage","fields":[{"type":"Object","name":"data","description":"Data to be sent (map or string). Top-level fields to be included in the message. If data is a string, data will be put in the right, vendor-specific, location in the data structure sent to the device."},{"type":"String","name":"resource","description":"Resource of the target device (optional. if not given, will notify all devices of the user)"},{"type":"String","name":"target","description":"Target user key (as in __userKey)","required":true}],"anyField":false}}}},"responseInfo":{"type":"NotificationSendStatus","resolved":{"types":{"NotificationSendStatus":{"type":"NotificationSendStatus","javaClass":"com.zetapush.common.messages.notifications.NotificationSendStatus","fields":[{"type":"NotificationMessage","name":"message","description":"Source message"},{"type":"List[DeviceNotificationSendStatus]","name":"report","description":"List of statuses for each target device"}],"anyField":false},"DeviceNotificationSendStatus":{"type":"DeviceNotificationSendStatus","javaClass":"com.zetapush.common.messages.notifications.NotificationSendStatus.DeviceNotificationSendStatus","fields":[{"type":"String","name":"deviceToken","description":"Token for target device"},{"type":"String","name":"endpoint","description":"Endpoint for target device"},{"type":"boolean","name":"success","description":"Whether the message was sent"}],"anyField":false},"NotificationMessage":{"type":"NotificationMessage","javaClass":"com.zetapush.common.messages.notifications.NotificationMessage","fields":[{"type":"Object","name":"data","description":"Data to be sent (map or string). Top-level fields to be included in the message. If data is a string, data will be put in the right, vendor-specific, location in the data structure sent to the device."},{"type":"String","name":"resource","description":"Resource of the target device (optional. if not given, will notify all devices of the user)"},{"type":"String","name":"target","description":"Target user key (as in __userKey)","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":false},{"name":"unregister","type":{"imports":[]},"desc":"Unregisters a device","notes":["Unregisters the device for the current user and resource.","This verb does not need any parameters."],"verbInfo":{"desc":"","deprecation":"","notes":["Unregisters the device for the current user and resource.","This verb does not need any parameters."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId8/unregister","description":"Unregisters a device","verb":"unregister","notes":["Unregisters the device for the current user and resource.","This verb does not need any parameters."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"errors":[]},"traceable":false},{"name":"register","type":{"typeName":"NotifiableDeviceRegistration","imports":["com.zetapush.common.messages.notifications.NotifiableDeviceRegistration"]},"desc":"Registers a device","notes":["Registers the device for the current user and resource.","This service maintains a mapping of __userkey/__resource to device registration IDs.","You MUST NOT re-use the same resource name from one device to another if you want to target specific devices with 'send'.","Only one registration can be active for a given __userKey/__resource pair in a notification service.","Device registration can be <b>neither impersonated nor called indirectly</b> (from a scheduled job)."],"verbInfo":{"desc":"","deprecation":"","notes":["Registers the device for the current user and resource.","This service maintains a mapping of __userkey/__resource to device registration IDs.","You MUST NOT re-use the same resource name from one device to another if you want to target specific devices with 'send'.","Only one registration can be active for a given __userKey/__resource pair in a notification service.","Device registration can be <b>neither impersonated nor called indirectly</b> (from a scheduled job)."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId8/register","description":"Registers a device","verb":"register","notes":["Registers the device for the current user and resource.","This service maintains a mapping of __userkey/__resource to device registration IDs.","You MUST NOT re-use the same resource name from one device to another if you want to target specific devices with 'send'.","Only one registration can be active for a given __userKey/__resource pair in a notification service.","Device registration can be <b>neither impersonated nor called indirectly</b> (from a scheduled job)."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"NotifiableDeviceRegistration","resolved":{"types":{"NotifiableDeviceRegistration":{"type":"NotifiableDeviceRegistration","javaClass":"com.zetapush.common.messages.notifications.NotifiableDeviceRegistration","fields":[{"type":"String","name":"appId","description":"Application primary key (as defined in 'createApp')","required":true},{"type":"String","name":"deviceToken","description":"Device-specific and app-specific opaque token. The format and meaning is vendor (Apple, Android...) specific. The value is generated by some vendor API on the device for a particular app and will be used by zetapush for notifications.","required":true}],"anyField":false}}}},"errors":[]},"traceable":false}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId8/send","description":"Sends a notification to the target","verb":"send","notes":["Sends a native push notification to the target."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"NotificationMessage","resolved":{"types":{"NotificationMessage":{"type":"NotificationMessage","javaClass":"com.zetapush.common.messages.notifications.NotificationMessage","fields":[{"type":"Object","name":"data","description":"Data to be sent (map or string). Top-level fields to be included in the message. If data is a string, data will be put in the right, vendor-specific, location in the data structure sent to the device."},{"type":"String","name":"resource","description":"Resource of the target device (optional. if not given, will notify all devices of the user)"},{"type":"String","name":"target","description":"Target user key (as in __userKey)","required":true}],"anyField":false}}}},"responseInfo":{"type":"NotificationSendStatus","resolved":{"types":{"NotificationSendStatus":{"type":"NotificationSendStatus","javaClass":"com.zetapush.common.messages.notifications.NotificationSendStatus","fields":[{"type":"NotificationMessage","name":"message","description":"Source message"},{"type":"List[DeviceNotificationSendStatus]","name":"report","description":"List of statuses for each target device"}],"anyField":false},"DeviceNotificationSendStatus":{"type":"DeviceNotificationSendStatus","javaClass":"com.zetapush.common.messages.notifications.NotificationSendStatus.DeviceNotificationSendStatus","fields":[{"type":"String","name":"deviceToken","description":"Token for target device"},{"type":"String","name":"endpoint","description":"Endpoint for target device"},{"type":"boolean","name":"success","description":"Whether the message was sent"}],"anyField":false},"NotificationMessage":{"type":"NotificationMessage","javaClass":"com.zetapush.common.messages.notifications.NotificationMessage","fields":[{"type":"Object","name":"data","description":"Data to be sent (map or string). Top-level fields to be included in the message. If data is a string, data will be put in the right, vendor-specific, location in the data structure sent to the device."},{"type":"String","name":"resource","description":"Resource of the target device (optional. if not given, will notify all devices of the user)"},{"type":"String","name":"target","description":"Target user key (as in __userKey)","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"NotificationSendStatus","imports":["com.zetapush.common.messages.notifications.NotificationSendStatus"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId8/unregister","description":"Unregisters a device","verb":"unregister","notes":["Unregisters the device for the current user and resource.","This verb does not need any parameters."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"errors":[]}},{"listenerInfo":{"channel":"/service/BU_ID/depId8/register","description":"Registers a device","verb":"register","notes":["Registers the device for the current user and resource.","This service maintains a mapping of __userkey/__resource to device registration IDs.","You MUST NOT re-use the same resource name from one device to another if you want to target specific devices with 'send'.","Only one registration can be active for a given __userKey/__resource pair in a notification service.","Device registration can be <b>neither impersonated nor called indirectly</b> (from a scheduled job)."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"NotifiableDeviceRegistration","resolved":{"types":{"NotifiableDeviceRegistration":{"type":"NotifiableDeviceRegistration","javaClass":"com.zetapush.common.messages.notifications.NotifiableDeviceRegistration","fields":[{"type":"String","name":"appId","description":"Application primary key (as defined in 'createApp')","required":true},{"type":"String","name":"deviceToken","description":"Device-specific and app-specific opaque token. The format and meaning is vendor (Apple, Android...) specific. The value is generated by some vendor API on the device for a particular app and will be used by zetapush for notifications.","required":true}],"anyField":false}}}},"errors":[]}}]},{"clazz":"com.zetapush.str.services.stack.StackService","name":"Stack","itemId":"stack","desc":"Data stack user API","notes":["Data is stored on a per user basis. However, notifications can be sent to a configurable set of listeners.","Stack names are arbitrary and do not need to be explicitly initialized."],"verbs":[{"name":"purge","type":{"typeName":"StackRequest","imports":["com.zetapush.common.messages.stack.StackRequest"]},"returnType":{"typeName":"StackRequest","imports":["com.zetapush.common.messages.stack.StackRequest"]},"desc":"Empties a stack","notes":["Removes all items from the given stack."],"verbInfo":{"desc":"Empties a stack","deprecation":"","notes":["Removes all items from the given stack."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId17/purge","description":"Empties a stack","verb":"purge","action":"purge","notes":["Removes all items from the given stack."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"StackRequest","resolved":{"types":{"StackRequest":{"type":"StackRequest","javaClass":"com.zetapush.common.messages.stack.StackRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false}}}},"responseInfo":{"type":"StackRequest","resolved":{"types":{"StackRequest":{"type":"StackRequest","javaClass":"com.zetapush.common.messages.stack.StackRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false}}},"scope":"GROUP","scopeDetail":"the defined listeners, or the owner of the stack if no listeners are defined"},"errors":[]},"traceable":true},{"name":"getListeners","type":{"typeName":"StackRequest","imports":["com.zetapush.common.messages.stack.StackRequest"]},"returnType":{"typeName":"StackListeners","imports":["com.zetapush.common.messages.stack.StackListeners"]},"desc":"Lists the listeners","notes":["Returns the whole list of listeners for the given stack."],"verbInfo":{"desc":"Lists the listeners","deprecation":"","notes":["Returns the whole list of listeners for the given stack."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId17/getListeners","description":"Lists the listeners","verb":"getListeners","action":"getListeners","notes":["Returns the whole list of listeners for the given stack."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"StackRequest","resolved":{"types":{"StackRequest":{"type":"StackRequest","javaClass":"com.zetapush.common.messages.stack.StackRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false}}}},"responseInfo":{"type":"StackListeners","resolved":{"types":{"StackListeners":{"type":"StackListeners","javaClass":"com.zetapush.common.messages.stack.StackListeners","fields":[{"type":"Set[String]","name":"listeners","description":"List of userKeys (as in the value of __userKey) or fully qualified group names (the syntax is groupServiceDeploymentId:userKey:group) that will be notified of modifying stack operations"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true},{"name":"setListeners","type":{"typeName":"StackListeners","imports":["com.zetapush.common.messages.stack.StackListeners"]},"returnType":{"typeName":"StackListeners","imports":["com.zetapush.common.messages.stack.StackListeners"]},"desc":"Sets the listeners","notes":["Sets the listeners for the given stack."],"verbInfo":{"desc":"Sets the listeners","deprecation":"","notes":["Sets the listeners for the given stack."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId17/setListeners","description":"Sets the listeners","verb":"setListeners","action":"setListeners","notes":["Sets the listeners for the given stack."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"StackListeners","resolved":{"types":{"StackListeners":{"type":"StackListeners","javaClass":"com.zetapush.common.messages.stack.StackListeners","fields":[{"type":"Set[String]","name":"listeners","description":"List of userKeys (as in the value of __userKey) or fully qualified group names (the syntax is groupServiceDeploymentId:userKey:group) that will be notified of modifying stack operations"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false}}}},"responseInfo":{"type":"StackListeners","resolved":{"types":{"StackListeners":{"type":"StackListeners","javaClass":"com.zetapush.common.messages.stack.StackListeners","fields":[{"type":"Set[String]","name":"listeners","description":"List of userKeys (as in the value of __userKey) or fully qualified group names (the syntax is groupServiceDeploymentId:userKey:group) that will be notified of modifying stack operations"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true},{"name":"remove","type":{"typeName":"StackItemRemove","imports":["com.zetapush.common.messages.stack.StackItemRemove"]},"returnType":{"typeName":"StackItemRemove","imports":["com.zetapush.common.messages.stack.StackItemRemove"]},"desc":"Removes items","notes":["Removes the item with the given guid from the given stack."],"verbInfo":{"desc":"Removes items","deprecation":"","notes":["Removes the item with the given guid from the given stack."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId17/remove","description":"Removes items","verb":"remove","action":"remove","notes":["Removes the item with the given guid from the given stack."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"StackItemRemove","resolved":{"types":{"StackItemRemove":{"type":"StackItemRemove","javaClass":"com.zetapush.common.messages.stack.StackItemRemove","fields":[{"type":"List[byte[]]","name":"guids","description":"List of keys of the items to be removed","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false}}}},"responseInfo":{"type":"StackItemRemove","resolved":{"types":{"StackItemRemove":{"type":"StackItemRemove","javaClass":"com.zetapush.common.messages.stack.StackItemRemove","fields":[{"type":"List[byte[]]","name":"guids","description":"List of keys of the items to be removed","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false}}},"scope":"GROUP","scopeDetail":"the defined listeners, or the owner of the stack if no listeners are defined"},"errors":[]},"traceable":true},{"name":"update","type":{"typeName":"StackItemAdd","imports":["com.zetapush.common.messages.stack.StackItemAdd"]},"returnType":{"typeName":"StackItemAdd","imports":["com.zetapush.common.messages.stack.StackItemAdd"]},"desc":"Updates an item","notes":["Updates an existing item of the given stack.","The item MUST exist prior to the call."],"verbInfo":{"desc":"Updates an item","deprecation":"","notes":["Updates an existing item of the given stack.","The item MUST exist prior to the call."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId17/update","description":"Updates an item","verb":"update","action":"update","notes":["Updates an existing item of the given stack.","The item MUST exist prior to the call."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"StackItemAdd","resolved":{"types":{"StackItemAdd":{"type":"StackItemAdd","javaClass":"com.zetapush.common.messages.stack.StackItemAdd","fields":[{"type":"byte[]","name":"guid","description":"Key of this stack item. \n","required":true,"serverGenerated":false},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true},{"type":"long","name":"ts","description":"Insertion timestamp"},{"type":"Map[String,Object]","name":"data","description":"Stored data","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"responseInfo":{"type":"StackItemAdd","resolved":{"types":{"StackItemAdd":{"type":"StackItemAdd","javaClass":"com.zetapush.common.messages.stack.StackItemAdd","fields":[{"type":"Map[String,Object]","name":"data","description":"Stored data","required":true},{"type":"byte[]","name":"guid","description":"Key of this stack item"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true},{"type":"long","name":"ts","description":"Insertion timestamp"}],"anyField":false}}},"scope":"GROUP","scopeDetail":"the defined listeners, or the owner of the stack if no listeners are defined"},"errors":[]},"traceable":true},{"name":"push","type":{"typeName":"StackItemAdd","imports":["com.zetapush.common.messages.stack.StackItemAdd"]},"returnType":{"typeName":"StackItemAdd","imports":["com.zetapush.common.messages.stack.StackItemAdd"]},"desc":"Pushes an item","notes":["Pushes an item onto the given stack.","The stack does not need to be created."],"verbInfo":{"desc":"Pushes an item","deprecation":"","notes":["Pushes an item onto the given stack.","The stack does not need to be created."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId17/push","description":"Pushes an item","verb":"push","action":"push","notes":["Pushes an item onto the given stack.","The stack does not need to be created."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"StackItemAdd","resolved":{"types":{"StackItemAdd":{"type":"StackItemAdd","javaClass":"com.zetapush.common.messages.stack.StackItemAdd","fields":[{"type":"byte[]","name":"guid","description":"Key of this stack item. \nunique ID for the item","serverGenerated":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true},{"type":"long","name":"ts","description":"Insertion timestamp. \n","serverGenerated":true},{"type":"Map[String,Object]","name":"data","description":"Stored data","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"responseInfo":{"type":"StackItemAdd","resolved":{"types":{"StackItemAdd":{"type":"StackItemAdd","javaClass":"com.zetapush.common.messages.stack.StackItemAdd","fields":[{"type":"Map[String,Object]","name":"data","description":"Stored data","required":true},{"type":"byte[]","name":"guid","description":"Key of this stack item"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true},{"type":"long","name":"ts","description":"Insertion timestamp"}],"anyField":false}}},"scope":"GROUP","scopeDetail":"the defined listeners, or the owner of the stack if no listeners are defined"},"errors":[]},"traceable":true},{"name":"list","type":{"typeName":"StackListRequest","imports":["com.zetapush.common.messages.stack.StackListRequest"]},"returnType":{"typeName":"StackListResponse","imports":["com.zetapush.common.messages.stack.StackListResponse"]},"desc":"Lists content","notes":["Returns a paginated list of contents for the given stack.","Content is sorted according to the statically configured order."],"verbInfo":{"desc":"Lists content","deprecation":"","notes":["Returns a paginated list of contents for the given stack.","Content is sorted according to the statically configured order."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId17/list","description":"Lists content","verb":"list","action":"list","notes":["Returns a paginated list of contents for the given stack.","Content is sorted according to the statically configured order."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"StackListRequest","resolved":{"types":{"StackListRequest":{"type":"StackListRequest","javaClass":"com.zetapush.common.messages.stack.StackListRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"StackListResponse","resolved":{"types":{"StackListResponse":{"type":"StackListResponse","javaClass":"com.zetapush.common.messages.stack.StackListResponse","fields":[{"type":"StackListRequest","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"PageContent[StackItem]","name":"result","description":"Result for the specified request"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"StackItem":{"type":"StackItem","javaClass":"com.zetapush.common.messages.stack.StackItem","fields":[{"type":"Map[String,Object]","name":"data","description":"Stored data"},{"type":"byte[]","name":"guid","description":"Server-generated GUID"},{"type":"long","name":"ts","description":"Insertion timestamp"}],"anyField":false},"StackListRequest":{"type":"StackListRequest","javaClass":"com.zetapush.common.messages.stack.StackListRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId17/purge","description":"Empties a stack","verb":"purge","action":"purge","notes":["Removes all items from the given stack."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"StackRequest","resolved":{"types":{"StackRequest":{"type":"StackRequest","javaClass":"com.zetapush.common.messages.stack.StackRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false}}}},"responseInfo":{"type":"StackRequest","resolved":{"types":{"StackRequest":{"type":"StackRequest","javaClass":"com.zetapush.common.messages.stack.StackRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false}}},"scope":"GROUP","scopeDetail":"the defined listeners, or the owner of the stack if no listeners are defined"},"errors":[]},"returnedType":{"typeName":"StackRequest","imports":["com.zetapush.common.messages.stack.StackRequest"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId17/getListeners","description":"Lists the listeners","verb":"getListeners","action":"getListeners","notes":["Returns the whole list of listeners for the given stack."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"StackRequest","resolved":{"types":{"StackRequest":{"type":"StackRequest","javaClass":"com.zetapush.common.messages.stack.StackRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false}}}},"responseInfo":{"type":"StackListeners","resolved":{"types":{"StackListeners":{"type":"StackListeners","javaClass":"com.zetapush.common.messages.stack.StackListeners","fields":[{"type":"Set[String]","name":"listeners","description":"List of userKeys (as in the value of __userKey) or fully qualified group names (the syntax is groupServiceDeploymentId:userKey:group) that will be notified of modifying stack operations"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"StackListeners","imports":["com.zetapush.common.messages.stack.StackListeners"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId17/setListeners","description":"Sets the listeners","verb":"setListeners","action":"setListeners","notes":["Sets the listeners for the given stack."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"StackListeners","resolved":{"types":{"StackListeners":{"type":"StackListeners","javaClass":"com.zetapush.common.messages.stack.StackListeners","fields":[{"type":"Set[String]","name":"listeners","description":"List of userKeys (as in the value of __userKey) or fully qualified group names (the syntax is groupServiceDeploymentId:userKey:group) that will be notified of modifying stack operations"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false}}}},"responseInfo":{"type":"StackListeners","resolved":{"types":{"StackListeners":{"type":"StackListeners","javaClass":"com.zetapush.common.messages.stack.StackListeners","fields":[{"type":"Set[String]","name":"listeners","description":"List of userKeys (as in the value of __userKey) or fully qualified group names (the syntax is groupServiceDeploymentId:userKey:group) that will be notified of modifying stack operations"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"StackListeners","imports":["com.zetapush.common.messages.stack.StackListeners"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId17/remove","description":"Removes items","verb":"remove","action":"remove","notes":["Removes the item with the given guid from the given stack."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"StackItemRemove","resolved":{"types":{"StackItemRemove":{"type":"StackItemRemove","javaClass":"com.zetapush.common.messages.stack.StackItemRemove","fields":[{"type":"List[byte[]]","name":"guids","description":"List of keys of the items to be removed","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false}}}},"responseInfo":{"type":"StackItemRemove","resolved":{"types":{"StackItemRemove":{"type":"StackItemRemove","javaClass":"com.zetapush.common.messages.stack.StackItemRemove","fields":[{"type":"List[byte[]]","name":"guids","description":"List of keys of the items to be removed","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false}}},"scope":"GROUP","scopeDetail":"the defined listeners, or the owner of the stack if no listeners are defined"},"errors":[]},"returnedType":{"typeName":"StackItemRemove","imports":["com.zetapush.common.messages.stack.StackItemRemove"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId17/update","description":"Updates an item","verb":"update","action":"update","notes":["Updates an existing item of the given stack.","The item MUST exist prior to the call."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"StackItemAdd","resolved":{"types":{"StackItemAdd":{"type":"StackItemAdd","javaClass":"com.zetapush.common.messages.stack.StackItemAdd","fields":[{"type":"byte[]","name":"guid","description":"Key of this stack item. \n","required":true,"serverGenerated":false},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true},{"type":"long","name":"ts","description":"Insertion timestamp"},{"type":"Map[String,Object]","name":"data","description":"Stored data","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"responseInfo":{"type":"StackItemAdd","resolved":{"types":{"StackItemAdd":{"type":"StackItemAdd","javaClass":"com.zetapush.common.messages.stack.StackItemAdd","fields":[{"type":"Map[String,Object]","name":"data","description":"Stored data","required":true},{"type":"byte[]","name":"guid","description":"Key of this stack item"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true},{"type":"long","name":"ts","description":"Insertion timestamp"}],"anyField":false}}},"scope":"GROUP","scopeDetail":"the defined listeners, or the owner of the stack if no listeners are defined"},"errors":[]},"returnedType":{"typeName":"StackItemAdd","imports":["com.zetapush.common.messages.stack.StackItemAdd"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId17/push","description":"Pushes an item","verb":"push","action":"push","notes":["Pushes an item onto the given stack.","The stack does not need to be created."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"StackItemAdd","resolved":{"types":{"StackItemAdd":{"type":"StackItemAdd","javaClass":"com.zetapush.common.messages.stack.StackItemAdd","fields":[{"type":"byte[]","name":"guid","description":"Key of this stack item. \nunique ID for the item","serverGenerated":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true},{"type":"long","name":"ts","description":"Insertion timestamp. \n","serverGenerated":true},{"type":"Map[String,Object]","name":"data","description":"Stored data","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"responseInfo":{"type":"StackItemAdd","resolved":{"types":{"StackItemAdd":{"type":"StackItemAdd","javaClass":"com.zetapush.common.messages.stack.StackItemAdd","fields":[{"type":"Map[String,Object]","name":"data","description":"Stored data","required":true},{"type":"byte[]","name":"guid","description":"Key of this stack item"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true},{"type":"long","name":"ts","description":"Insertion timestamp"}],"anyField":false}}},"scope":"GROUP","scopeDetail":"the defined listeners, or the owner of the stack if no listeners are defined"},"errors":[]},"returnedType":{"typeName":"StackItemAdd","imports":["com.zetapush.common.messages.stack.StackItemAdd"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId17/list","description":"Lists content","verb":"list","action":"list","notes":["Returns a paginated list of contents for the given stack.","Content is sorted according to the statically configured order."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"StackListRequest","resolved":{"types":{"StackListRequest":{"type":"StackListRequest","javaClass":"com.zetapush.common.messages.stack.StackListRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"StackListResponse","resolved":{"types":{"StackListResponse":{"type":"StackListResponse","javaClass":"com.zetapush.common.messages.stack.StackListResponse","fields":[{"type":"StackListRequest","name":"request","description":"Request leading to the result"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"PageContent[StackItem]","name":"result","description":"Result for the specified request"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"StackItem":{"type":"StackItem","javaClass":"com.zetapush.common.messages.stack.StackItem","fields":[{"type":"Map[String,Object]","name":"data","description":"Stored data"},{"type":"byte[]","name":"guid","description":"Server-generated GUID"},{"type":"long","name":"ts","description":"Insertion timestamp"}],"anyField":false},"StackListRequest":{"type":"StackListRequest","javaClass":"com.zetapush.common.messages.stack.StackListRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"stack","description":"Stack name.","required":true}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"StackListResponse","imports":["com.zetapush.common.messages.stack.StackListResponse"]}}]},{"clazz":"com.zetapush.str.services.macro.MacroDebugService","name":"MacroDebug","itemId":"macro","desc":"User API for macro debugging","notes":["Debugger API for macro.","These API verbs are not intended for use by most developers."],"verbs":[{"name":"info","type":{"typeName":"MacroDebugInfoRequest","imports":["com.zetapush.common.messages.macro.MacroDebugInfoRequest"]},"desc":"Requests some information","listenerInfo":{"channel":"/service/BU_ID/depId15/info","description":"Requests some information","verb":"info","serverOnly":false,"clientOnly":true,"slaveDisabled":false,"paramInfo":{"type":"MacroDebugInfoRequest","resolved":{"types":{"MacroDebugInfoRequest":{"type":"MacroDebugInfoRequest","javaClass":"com.zetapush.common.messages.macro.MacroDebugInfoRequest","fields":[{"type":"String","name":"exp","description":"expression to evaluate"},{"type":"int","name":"frame","description":"Frame index, as sent by the server by 'resume'"},{"type":"String","name":"path","description":"optional path to apply on the result of the evaluation of exp"},{"type":"String","name":"requestId","description":"request ID"},{"type":"String","name":"token","description":"Debug token, previously generated by a call to the admin verb 'livedebugToken'"}],"anyField":false}}}},"errors":[{"code":"DEBUG_FORBIDDEN","desc":"Invalid or missing debug token."}]},"traceable":false},{"name":"variable","type":{"typeName":"MacroDebugVariableChange","imports":["com.zetapush.common.messages.macro.MacroDebugVariableChange"]},"desc":"Sets a variable value","listenerInfo":{"channel":"/service/BU_ID/depId15/variable","description":"Sets a variable value","verb":"variable","serverOnly":false,"clientOnly":true,"slaveDisabled":false,"paramInfo":{"type":"MacroDebugVariableChange","resolved":{"types":{"MacroDebugVariableChange":{"type":"MacroDebugVariableChange","javaClass":"com.zetapush.common.messages.macro.MacroDebugVariableChange","fields":[{"type":"Object","name":"data","description":"Variable value"},{"type":"int","name":"frame","description":"Frame index, as sent by the server by 'resume'"},{"type":"String","name":"name","description":"Variable name","required":true},{"type":"String","name":"token","description":"Debug token, previously generated by a call to the admin verb 'livedebugToken'"}],"anyField":false}}}},"errors":[{"code":"DEBUG_FORBIDDEN","desc":"Invalid or missing debug token."}]},"traceable":false},{"name":"breakpoint","type":{"typeName":"MacroDebugBreakpointSet","imports":["com.zetapush.common.messages.macro.MacroDebugBreakpointSet"]},"desc":"Enables or disables a breakpoint","listenerInfo":{"channel":"/service/BU_ID/depId15/breakpoint","description":"Enables or disables a breakpoint","verb":"breakpoint","serverOnly":false,"clientOnly":true,"slaveDisabled":false,"paramInfo":{"type":"MacroDebugBreakpointSet","resolved":{"types":{"MacroDebugBreakpointSet":{"type":"MacroDebugBreakpointSet","javaClass":"com.zetapush.common.messages.macro.MacroDebugBreakpointSet","fields":[{"type":"MacroDebugBreakpoint","name":"breakpoint","description":"Breakpoint information","required":true},{"type":"boolean","name":"enabled","description":"Whether the breakpoint is enabled or not"},{"type":"String","name":"token","description":"Debug token, previously generated by a call to the admin verb 'livedebugToken'"}],"anyField":false},"MacroDebugBreakpoint":{"type":"MacroDebugBreakpoint","javaClass":"com.zetapush.common.messages.macro.MacroDebugBreakpoint","fields":[{"type":"int","name":"line","description":"Line number inside the source file"},{"type":"String","name":"location","description":"Source file information"}],"anyField":false}}}},"errors":[{"code":"DEBUG_FORBIDDEN","desc":"Invalid or missing debug token."}]},"traceable":false},{"name":"livedebug","type":{"typeName":"MacroDebugSession","imports":["com.zetapush.common.messages.macro.MacroDebugSession"]},"desc":"Debugs a previously recorded macro","notes":["The given breakpoints will be honored, causing a suspension of the execution, resumable via 'resume'.","Only one debug session can be active at any given time."],"verbInfo":{"desc":"","deprecation":"","notes":["The given breakpoints will be honored, causing a suspension of the execution, resumable via 'resume'.","Only one debug session can be active at any given time."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId15/livedebug","description":"Debugs a previously recorded macro","verb":"livedebug","notes":["The given breakpoints will be honored, causing a suspension of the execution, resumable via 'resume'.","Only one debug session can be active at any given time."],"serverOnly":false,"clientOnly":true,"slaveDisabled":false,"paramInfo":{"type":"MacroDebugSession","resolved":{"types":{"MacroDebugSession":{"type":"MacroDebugSession","javaClass":"com.zetapush.common.messages.macro.MacroDebugSession","fields":[{"type":"List[MacroDebugBreakpoint]","name":"breakpoints","description":"List of breakpoints for the session"},{"type":"int","name":"debug","description":"Deprecated. Use the 'livedebug' API."},{"type":"boolean","name":"hardFail","description":"True if an error should trigger a response on an error channel, or false (the default) if the error should be simply reported in an error field"},{"type":"String","name":"name","description":"Macro name","required":true},{"type":"Map[String,Object]","name":"parameters","description":"Macro named parameters"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"token","description":"Debug token, previously generated by a call to the admin verb 'livedebugToken'"}],"anyField":false},"MacroDebugBreakpoint":{"type":"MacroDebugBreakpoint","javaClass":"com.zetapush.common.messages.macro.MacroDebugBreakpoint","fields":[{"type":"int","name":"line","description":"Line number inside the source file"},{"type":"String","name":"location","description":"Source file information"}],"anyField":false}}}},"otherOutputs":[{"type":"MacroCompletion","resolved":{"types":{"MacroCompletion":{"type":"MacroCompletion","javaClass":"com.zetapush.common.messages.macro.MacroCompletion","fields":[{"type":"List[ZetaApiError]","name":"errors","description":"Encountered errors. Error reporting behavior can be changed with the hardFail parameter."},{"type":"List[String]","name":"log","description":"Generated debug output, if applicable"},{"type":"String","name":"name","description":"Macro name"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Object","name":"result","description":"Generated result, if applicable"},{"type":"MacroCompletionStats","name":"stats","description":"Execution statistics, when debug is enabled"}],"anyField":false},"MacroCompletionStats":{"type":"MacroCompletionStats","javaClass":"com.zetapush.common.messages.macro.MacroCompletion.MacroCompletionStats","fields":[{"type":"long","name":"cycles","description":"Total number of VM cycles"},{"type":"long","name":"elapsedMillis","description":"Elapsed server time for the execution of the macro"},{"type":"long","name":"nbCalls","description":"Total number of called verbs"},{"type":"long","name":"ram","description":"Total number of RAM bytes"}],"anyField":false},"ZetaApiError":{"type":"ZetaApiError","javaClass":"com.zetapush.common.messages.ZetaApiError","fields":[{"type":"String","name":"code","description":"Symbolic error code"},{"type":"Object","name":"context","description":"Developer-generated context. Each code can have a specific context format."},{"type":"String","name":"location","description":"Error location, if available"},{"type":"String","name":"message","description":"Human readable message. May vary depending on one or more of locale, input, developer code."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false}}},"channel":"completed","target":"","description":"The macro is debugged. Upon completion the caller is asynchronously notified.","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"MacroCompletion","imports":["com.zetapush.common.messages.macro.MacroCompletion"]}}],"errors":[{"code":"DEBUG_FORBIDDEN","desc":"Invalid or missing debug token."}]},"traceable":false},{"name":"resume","type":{"typeName":"MacroDebugStep","imports":["com.zetapush.common.messages.macro.MacroDebugStep"]},"desc":"Resumes a paused macro","listenerInfo":{"channel":"/service/BU_ID/depId15/resume","description":"Resumes a paused macro","verb":"resume","serverOnly":false,"clientOnly":true,"slaveDisabled":false,"paramInfo":{"type":"MacroDebugStep","resolved":{"types":{"MacroDebugStep":{"type":"MacroDebugStep","javaClass":"com.zetapush.common.messages.macro.MacroDebugStep","fields":[{"type":"String","name":"token","description":"Debug token, previously generated by a call to the admin verb 'livedebugToken'"},{"type":"MacroDebugStepType","name":"type","description":"Step type"}],"anyField":false},"MacroDebugStepType":{"type":"MacroDebugStepType","javaClass":"com.zetapush.common.messages.macro.MacroDebugStep.MacroDebugStepType","enumValues":[{"name":"STEP_OVER","description":"Step over the next instruction"},{"name":"RESUME","description":"Resume execution"},{"name":"TERMINATE","description":"Terminate execution"},{"name":"STEP_INTO","description":"Step into the next macrvo call"}],"anyField":false}}}},"errors":[{"code":"DEBUG_FORBIDDEN","desc":"Invalid or missing debug token."}]},"traceable":false}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId15/info","description":"Requests some information","verb":"info","serverOnly":false,"clientOnly":true,"slaveDisabled":false,"paramInfo":{"type":"MacroDebugInfoRequest","resolved":{"types":{"MacroDebugInfoRequest":{"type":"MacroDebugInfoRequest","javaClass":"com.zetapush.common.messages.macro.MacroDebugInfoRequest","fields":[{"type":"String","name":"exp","description":"expression to evaluate"},{"type":"int","name":"frame","description":"Frame index, as sent by the server by 'resume'"},{"type":"String","name":"path","description":"optional path to apply on the result of the evaluation of exp"},{"type":"String","name":"requestId","description":"request ID"},{"type":"String","name":"token","description":"Debug token, previously generated by a call to the admin verb 'livedebugToken'"}],"anyField":false}}}},"errors":[{"code":"DEBUG_FORBIDDEN","desc":"Invalid or missing debug token."}]}},{"listenerInfo":{"channel":"/service/BU_ID/depId15/variable","description":"Sets a variable value","verb":"variable","serverOnly":false,"clientOnly":true,"slaveDisabled":false,"paramInfo":{"type":"MacroDebugVariableChange","resolved":{"types":{"MacroDebugVariableChange":{"type":"MacroDebugVariableChange","javaClass":"com.zetapush.common.messages.macro.MacroDebugVariableChange","fields":[{"type":"Object","name":"data","description":"Variable value"},{"type":"int","name":"frame","description":"Frame index, as sent by the server by 'resume'"},{"type":"String","name":"name","description":"Variable name","required":true},{"type":"String","name":"token","description":"Debug token, previously generated by a call to the admin verb 'livedebugToken'"}],"anyField":false}}}},"errors":[{"code":"DEBUG_FORBIDDEN","desc":"Invalid or missing debug token."}]}},{"listenerInfo":{"channel":"/service/BU_ID/depId15/breakpoint","description":"Enables or disables a breakpoint","verb":"breakpoint","serverOnly":false,"clientOnly":true,"slaveDisabled":false,"paramInfo":{"type":"MacroDebugBreakpointSet","resolved":{"types":{"MacroDebugBreakpointSet":{"type":"MacroDebugBreakpointSet","javaClass":"com.zetapush.common.messages.macro.MacroDebugBreakpointSet","fields":[{"type":"MacroDebugBreakpoint","name":"breakpoint","description":"Breakpoint information","required":true},{"type":"boolean","name":"enabled","description":"Whether the breakpoint is enabled or not"},{"type":"String","name":"token","description":"Debug token, previously generated by a call to the admin verb 'livedebugToken'"}],"anyField":false},"MacroDebugBreakpoint":{"type":"MacroDebugBreakpoint","javaClass":"com.zetapush.common.messages.macro.MacroDebugBreakpoint","fields":[{"type":"int","name":"line","description":"Line number inside the source file"},{"type":"String","name":"location","description":"Source file information"}],"anyField":false}}}},"errors":[{"code":"DEBUG_FORBIDDEN","desc":"Invalid or missing debug token."}]}},{"listenerInfo":{"channel":"/service/BU_ID/depId15/livedebug","description":"Debugs a previously recorded macro","verb":"livedebug","notes":["The given breakpoints will be honored, causing a suspension of the execution, resumable via 'resume'.","Only one debug session can be active at any given time."],"serverOnly":false,"clientOnly":true,"slaveDisabled":false,"paramInfo":{"type":"MacroDebugSession","resolved":{"types":{"MacroDebugSession":{"type":"MacroDebugSession","javaClass":"com.zetapush.common.messages.macro.MacroDebugSession","fields":[{"type":"List[MacroDebugBreakpoint]","name":"breakpoints","description":"List of breakpoints for the session"},{"type":"int","name":"debug","description":"Deprecated. Use the 'livedebug' API."},{"type":"boolean","name":"hardFail","description":"True if an error should trigger a response on an error channel, or false (the default) if the error should be simply reported in an error field"},{"type":"String","name":"name","description":"Macro name","required":true},{"type":"Map[String,Object]","name":"parameters","description":"Macro named parameters"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"token","description":"Debug token, previously generated by a call to the admin verb 'livedebugToken'"}],"anyField":false},"MacroDebugBreakpoint":{"type":"MacroDebugBreakpoint","javaClass":"com.zetapush.common.messages.macro.MacroDebugBreakpoint","fields":[{"type":"int","name":"line","description":"Line number inside the source file"},{"type":"String","name":"location","description":"Source file information"}],"anyField":false}}}},"otherOutputs":[{"type":"MacroCompletion","resolved":{"types":{"MacroCompletion":{"type":"MacroCompletion","javaClass":"com.zetapush.common.messages.macro.MacroCompletion","fields":[{"type":"List[ZetaApiError]","name":"errors","description":"Encountered errors. Error reporting behavior can be changed with the hardFail parameter."},{"type":"List[String]","name":"log","description":"Generated debug output, if applicable"},{"type":"String","name":"name","description":"Macro name"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Object","name":"result","description":"Generated result, if applicable"},{"type":"MacroCompletionStats","name":"stats","description":"Execution statistics, when debug is enabled"}],"anyField":false},"MacroCompletionStats":{"type":"MacroCompletionStats","javaClass":"com.zetapush.common.messages.macro.MacroCompletion.MacroCompletionStats","fields":[{"type":"long","name":"cycles","description":"Total number of VM cycles"},{"type":"long","name":"elapsedMillis","description":"Elapsed server time for the execution of the macro"},{"type":"long","name":"nbCalls","description":"Total number of called verbs"},{"type":"long","name":"ram","description":"Total number of RAM bytes"}],"anyField":false},"ZetaApiError":{"type":"ZetaApiError","javaClass":"com.zetapush.common.messages.ZetaApiError","fields":[{"type":"String","name":"code","description":"Symbolic error code"},{"type":"Object","name":"context","description":"Developer-generated context. Each code can have a specific context format."},{"type":"String","name":"location","description":"Error location, if available"},{"type":"String","name":"message","description":"Human readable message. May vary depending on one or more of locale, input, developer code."},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false}}},"channel":"completed","target":"","description":"The macro is debugged. Upon completion the caller is asynchronously notified.","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"MacroCompletion","imports":["com.zetapush.common.messages.macro.MacroCompletion"]}}],"errors":[{"code":"DEBUG_FORBIDDEN","desc":"Invalid or missing debug token."}]}},{"listenerInfo":{"channel":"/service/BU_ID/depId15/resume","description":"Resumes a paused macro","verb":"resume","serverOnly":false,"clientOnly":true,"slaveDisabled":false,"paramInfo":{"type":"MacroDebugStep","resolved":{"types":{"MacroDebugStep":{"type":"MacroDebugStep","javaClass":"com.zetapush.common.messages.macro.MacroDebugStep","fields":[{"type":"String","name":"token","description":"Debug token, previously generated by a call to the admin verb 'livedebugToken'"},{"type":"MacroDebugStepType","name":"type","description":"Step type"}],"anyField":false},"MacroDebugStepType":{"type":"MacroDebugStepType","javaClass":"com.zetapush.common.messages.macro.MacroDebugStep.MacroDebugStepType","enumValues":[{"name":"STEP_OVER","description":"Step over the next instruction"},{"name":"RESUME","description":"Resume execution"},{"name":"TERMINATE","description":"Terminate execution"},{"name":"STEP_INTO","description":"Step into the next macrvo call"}],"anyField":false}}}},"errors":[{"code":"DEBUG_FORBIDDEN","desc":"Invalid or missing debug token."}]}}]},{"clazz":"com.zetapush.str.authentication.weak.WeakUserService","name":"Weak","itemId":"weak","desc":"User API for weak devices control","notes":["User API for control and release of weakly authenticated user sessions."],"verbs":[{"name":"control","type":{"typeName":"UserControlRequest","imports":["com.zetapush.common.messages.weak.UserControlRequest"]},"returnType":{"typeName":"UserControlStatus","imports":["com.zetapush.common.messages.weak.UserControlStatus"]},"desc":"Controls a session","notes":["Takes control of a weak user session, identified by the given public token.","The public token has been previously made available by the controlled device, for example by displaying a QRCode.","Upon control notification, the client SDK of the controlled session is expected to re-handshake."],"verbInfo":{"desc":"Controls a session","deprecation":"","notes":["Takes control of a weak user session, identified by the given public token.","The public token has been previously made available by the controlled device, for example by displaying a QRCode.","Upon control notification, the client SDK of the controlled session is expected to re-handshake."],"relatedClasses":[],"errors":[{"code":"TOKEN_ALREADY_CONTROLLED","desc":"When trying to control a device already controlled."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId2/control","description":"Controls a session","verb":"control","notes":["Takes control of a weak user session, identified by the given public token.","The public token has been previously made available by the controlled device, for example by displaying a QRCode.","Upon control notification, the client SDK of the controlled session is expected to re-handshake."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"UserControlRequest","resolved":{"types":{"UserControlRequest":{"type":"UserControlRequest","javaClass":"com.zetapush.common.messages.weak.UserControlRequest","fields":[{"type":"boolean","name":"fullRights","description":"Whether the controlled user/device fully impersonates its controller"},{"type":"String","name":"publicToken","description":"Public token of the weak you want to control"}],"anyField":false}}}},"responseInfo":{"type":"UserControlStatus","resolved":{"types":{"UserControlStatus":{"type":"UserControlStatus","javaClass":"com.zetapush.common.messages.weak.UserControlStatus","fields":[{"type":"String","name":"controller","description":"User key of the controlling user"},{"type":"boolean","name":"fullRights","description":"Whether the controlled user/device fully impersonates its controller"},{"type":"String","name":"publicToken","description":"Public token of the weak you want to control"}],"anyField":false}}},"scope":"GROUP","scopeDetail":"the controlled user and the controlling user"},"errors":[{"code":"TOKEN_ALREADY_CONTROLLED","desc":"When trying to control a device already controlled."}]},"traceable":false},{"name":"release","type":{"typeName":"UserControlRequest","imports":["com.zetapush.common.messages.weak.UserControlRequest"]},"returnType":{"typeName":"UserControlStatus","imports":["com.zetapush.common.messages.weak.UserControlStatus"]},"desc":"Releases a session","notes":["Releases control of a weak user session, identified by the given public token.","The weak user session must have been previously controlled by a call to 'control'."],"verbInfo":{"desc":"Releases a session","deprecation":"","notes":["Releases control of a weak user session, identified by the given public token.","The weak user session must have been previously controlled by a call to 'control'."],"relatedClasses":[],"errors":[{"code":"TOKEN_NOT_MINE","desc":"When trying to release a session you do not control."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId2/release","description":"Releases a session","verb":"release","notes":["Releases control of a weak user session, identified by the given public token.","The weak user session must have been previously controlled by a call to 'control'."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"UserControlRequest","resolved":{"types":{"UserControlRequest":{"type":"UserControlRequest","javaClass":"com.zetapush.common.messages.weak.UserControlRequest","fields":[{"type":"boolean","name":"fullRights","description":"Whether the controlled user/device fully impersonates its controller"},{"type":"String","name":"publicToken","description":"Public token of the weak you want to control"}],"anyField":false}}}},"responseInfo":{"type":"UserControlStatus","resolved":{"types":{"UserControlStatus":{"type":"UserControlStatus","javaClass":"com.zetapush.common.messages.weak.UserControlStatus","fields":[{"type":"String","name":"controller","description":"User key of the controlling user"},{"type":"boolean","name":"fullRights","description":"Whether the controlled user/device fully impersonates its controller"},{"type":"String","name":"publicToken","description":"Public token of the weak you want to control"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"TOKEN_NOT_MINE","desc":"When trying to release a session you do not control."}]},"traceable":false},{"name":"provision","type":{"typeName":"ProvisioningRequest","imports":["com.zetapush.common.messages.weak.ProvisioningRequest"]},"returnType":{"typeName":"ProvisioningResult","imports":["com.zetapush.common.messages.weak.ProvisioningResult"]},"desc":"Provisions accounts","notes":["Provisions an arbitrary number of accounts.","The maximum number of accounts that you can create in one single call is configured per server."],"verbInfo":{"desc":"Provisions accounts","deprecation":"","notes":["Provisions an arbitrary number of accounts.","The maximum number of accounts that you can create in one single call is configured per server."],"relatedClasses":[],"errors":[{"code":"CAPACITY_EXCEEDED","desc":"When trying to allocate more accounts than the server maximum."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId2/provision","description":"Provisions accounts","verb":"provision","notes":["Provisions an arbitrary number of accounts.","The maximum number of accounts that you can create in one single call is configured per server."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ProvisioningRequest","resolved":{"types":{"ProvisioningRequest":{"type":"ProvisioningRequest","javaClass":"com.zetapush.common.messages.weak.ProvisioningRequest","fields":[{"type":"int","name":"n","description":"Number of accounts to create"}],"anyField":false}}}},"responseInfo":{"type":"ProvisioningResult","resolved":{"types":{"ProvisioningResult":{"type":"ProvisioningResult","javaClass":"com.zetapush.common.messages.weak.ProvisioningResult","fields":[{"type":"List[UserToken]","name":"users","description":"List of provisioned tokens"}],"anyField":false},"UserToken":{"type":"UserToken","javaClass":"com.zetapush.common.messages.weak.UserToken","fields":[{"type":"String","name":"publicToken","description":"public token"},{"type":"String","name":"token","description":"private token"},{"type":"String","name":"userKey","description":"userKey for this user"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"CAPACITY_EXCEEDED","desc":"When trying to allocate more accounts than the server maximum."}]},"traceable":false},{"name":"getToken","type":{"imports":[]},"returnType":{"typeName":"UserToken","imports":["com.zetapush.common.messages.weak.UserToken"]},"desc":"Returns the current token","notes":["Returns your current session's private token. The token field may be null, if you did not log in with this authentication.","The token can be used to log in as the same weak user another time."],"verbInfo":{"desc":"Returns the current token","deprecation":"","notes":["Returns your current session's private token. The token field may be null, if you did not log in with this authentication.","The token can be used to log in as the same weak user another time."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId2/getToken","description":"Returns the current token","verb":"getToken","notes":["Returns your current session's private token. The token field may be null, if you did not log in with this authentication.","The token can be used to log in as the same weak user another time."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"responseInfo":{"type":"UserToken","resolved":{"types":{"UserToken":{"type":"UserToken","javaClass":"com.zetapush.common.messages.weak.UserToken","fields":[{"type":"String","name":"publicToken","description":"public token"},{"type":"String","name":"token","description":"private token"},{"type":"String","name":"userKey","description":"userKey for this user"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":false}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId2/control","description":"Controls a session","verb":"control","notes":["Takes control of a weak user session, identified by the given public token.","The public token has been previously made available by the controlled device, for example by displaying a QRCode.","Upon control notification, the client SDK of the controlled session is expected to re-handshake."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"UserControlRequest","resolved":{"types":{"UserControlRequest":{"type":"UserControlRequest","javaClass":"com.zetapush.common.messages.weak.UserControlRequest","fields":[{"type":"boolean","name":"fullRights","description":"Whether the controlled user/device fully impersonates its controller"},{"type":"String","name":"publicToken","description":"Public token of the weak you want to control"}],"anyField":false}}}},"responseInfo":{"type":"UserControlStatus","resolved":{"types":{"UserControlStatus":{"type":"UserControlStatus","javaClass":"com.zetapush.common.messages.weak.UserControlStatus","fields":[{"type":"String","name":"controller","description":"User key of the controlling user"},{"type":"boolean","name":"fullRights","description":"Whether the controlled user/device fully impersonates its controller"},{"type":"String","name":"publicToken","description":"Public token of the weak you want to control"}],"anyField":false}}},"scope":"GROUP","scopeDetail":"the controlled user and the controlling user"},"errors":[{"code":"TOKEN_ALREADY_CONTROLLED","desc":"When trying to control a device already controlled."}]},"returnedType":{"typeName":"UserControlStatus","imports":["com.zetapush.common.messages.weak.UserControlStatus"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId2/release","description":"Releases a session","verb":"release","notes":["Releases control of a weak user session, identified by the given public token.","The weak user session must have been previously controlled by a call to 'control'."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"UserControlRequest","resolved":{"types":{"UserControlRequest":{"type":"UserControlRequest","javaClass":"com.zetapush.common.messages.weak.UserControlRequest","fields":[{"type":"boolean","name":"fullRights","description":"Whether the controlled user/device fully impersonates its controller"},{"type":"String","name":"publicToken","description":"Public token of the weak you want to control"}],"anyField":false}}}},"responseInfo":{"type":"UserControlStatus","resolved":{"types":{"UserControlStatus":{"type":"UserControlStatus","javaClass":"com.zetapush.common.messages.weak.UserControlStatus","fields":[{"type":"String","name":"controller","description":"User key of the controlling user"},{"type":"boolean","name":"fullRights","description":"Whether the controlled user/device fully impersonates its controller"},{"type":"String","name":"publicToken","description":"Public token of the weak you want to control"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"TOKEN_NOT_MINE","desc":"When trying to release a session you do not control."}]},"returnedType":{"typeName":"UserControlStatus","imports":["com.zetapush.common.messages.weak.UserControlStatus"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId2/provision","description":"Provisions accounts","verb":"provision","notes":["Provisions an arbitrary number of accounts.","The maximum number of accounts that you can create in one single call is configured per server."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ProvisioningRequest","resolved":{"types":{"ProvisioningRequest":{"type":"ProvisioningRequest","javaClass":"com.zetapush.common.messages.weak.ProvisioningRequest","fields":[{"type":"int","name":"n","description":"Number of accounts to create"}],"anyField":false}}}},"responseInfo":{"type":"ProvisioningResult","resolved":{"types":{"ProvisioningResult":{"type":"ProvisioningResult","javaClass":"com.zetapush.common.messages.weak.ProvisioningResult","fields":[{"type":"List[UserToken]","name":"users","description":"List of provisioned tokens"}],"anyField":false},"UserToken":{"type":"UserToken","javaClass":"com.zetapush.common.messages.weak.UserToken","fields":[{"type":"String","name":"publicToken","description":"public token"},{"type":"String","name":"token","description":"private token"},{"type":"String","name":"userKey","description":"userKey for this user"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"CAPACITY_EXCEEDED","desc":"When trying to allocate more accounts than the server maximum."}]},"returnedType":{"typeName":"ProvisioningResult","imports":["com.zetapush.common.messages.weak.ProvisioningResult"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId2/getToken","description":"Returns the current token","verb":"getToken","notes":["Returns your current session's private token. The token field may be null, if you did not log in with this authentication.","The token can be used to log in as the same weak user another time."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"responseInfo":{"type":"UserToken","resolved":{"types":{"UserToken":{"type":"UserToken","javaClass":"com.zetapush.common.messages.weak.UserToken","fields":[{"type":"String","name":"publicToken","description":"public token"},{"type":"String","name":"token","description":"private token"},{"type":"String","name":"userKey","description":"userKey for this user"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"UserToken","imports":["com.zetapush.common.messages.weak.UserToken"]}}]},{"clazz":"com.zetapush.str.services.upload.UploadService","name":"Zpfs_s3compat","itemId":"zpfs_s3compat","desc":"User API for file management","notes":["User API for virtual file management and http file upload","This API contains all the verbs needed to browse, upload and remove files.","Files are stored on a per-user basis: each user has his or her own whole virtual filesystem.","Uploading a file is a 3-step process : request an upload URL, upload via HTTP, notify this service of completion."],"verbs":[{"name":"link","type":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]},"returnType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]},"desc":"Links a file","notes":["Links a file or folder to another location.","May fail if the target location is not empty."],"verbInfo":{"desc":"Links a file","deprecation":"","notes":["Links a file or folder to another location.","May fail if the target location is not empty."],"relatedClasses":[],"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId11/link","description":"Links a file","verb":"link","action":"link","notes":["Links a file or folder to another location.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}]},"traceable":true},{"name":"stat","type":{"typeName":"FileStatRequest","imports":["com.zetapush.common.messages.filestorage.FileStatRequest"]},"returnType":{"typeName":"FileStatResult","imports":["com.zetapush.common.messages.filestorage.FileStatResult"]},"desc":"Returns information about a file","notes":["Returns information about a single file.","The entry field will be null if the path does not exist"],"verbInfo":{"desc":"Returns information about a file","deprecation":"","notes":["Returns information about a single file.","The entry field will be null if the path does not exist"],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId11/stat","description":"Returns information about a file","verb":"stat","action":"stat","notes":["Returns information about a single file.","The entry field will be null if the path does not exist"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileStatRequest","resolved":{"types":{"FileStatRequest":{"type":"FileStatRequest","javaClass":"com.zetapush.common.messages.filestorage.FileStatRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileStatResult","resolved":{"types":{"FileStatResult":{"type":"FileStatResult","javaClass":"com.zetapush.common.messages.filestorage.FileStatResult","fields":[{"type":"ListingEntryInfo","name":"entry","description":"File information. Null if file does not exist"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true},{"name":"cp","type":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]},"returnType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]},"desc":"Copies a file","notes":["Copies a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"verbInfo":{"desc":"Copies a file","deprecation":"","notes":["Copies a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"relatedClasses":[],"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId11/cp","description":"Copies a file","verb":"cp","action":"cp","notes":["Copies a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}]},"traceable":true},{"name":"ls","type":{"typeName":"FolderListingRequest","imports":["com.zetapush.common.messages.filestorage.FolderListingRequest"]},"returnType":{"typeName":"FolderListing","imports":["com.zetapush.common.messages.filestorage.FolderListing"]},"desc":"Lists a folder content","notes":["Returns a paginated list of the folder's content."],"verbInfo":{"desc":"Lists a folder content","deprecation":"","notes":["Returns a paginated list of the folder's content."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId11/ls","description":"Lists a folder content","verb":"ls","action":"ls","notes":["Returns a paginated list of the folder's content."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FolderListingRequest","resolved":{"types":{"FolderListingRequest":{"type":"FolderListingRequest","javaClass":"com.zetapush.common.messages.filestorage.FolderListingRequest","fields":[{"type":"String","name":"folder","description":"Folder path","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"FolderListing","resolved":{"types":{"FolderListing":{"type":"FolderListing","javaClass":"com.zetapush.common.messages.filestorage.FolderListing","fields":[{"type":"PageContent[ListingEntryInfo]","name":"entries","description":"Entries in the folder"},{"type":"boolean","name":"exists","description":"Whether the path exists"},{"type":"String","name":"folder","description":"Folder path"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true},{"name":"mv","type":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]},"returnType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]},"desc":"Moves a file","notes":["Moves a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"verbInfo":{"desc":"Moves a file","deprecation":"","notes":["Moves a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"relatedClasses":[],"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId11/mv","description":"Moves a file","verb":"mv","action":"mv","notes":["Moves a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}]},"traceable":true},{"name":"snapshot","type":{"typeName":"SnapshotCreationRequest","imports":["com.zetapush.common.messages.filestorage.SnapshotCreationRequest"]},"returnType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]},"desc":"Creates a snapshot in a new folder","notes":["Creates a new folder and then copies the given files inside"],"verbInfo":{"desc":"Creates a snapshot in a new folder","deprecation":"","notes":["Creates a new folder and then copies the given files inside"],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId11/snapshot","description":"Creates a snapshot in a new folder","verb":"snapshot","action":"snapshot","notes":["Creates a new folder and then copies the given files inside"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"SnapshotCreationRequest","resolved":{"types":{"SnapshotCreationRequest":{"type":"SnapshotCreationRequest","javaClass":"com.zetapush.common.messages.filestorage.SnapshotCreationRequest","fields":[{"type":"boolean","name":"flatten","description":"Whether to flatten source paths. Setting this to true might lead to name conflicts"},{"type":"String","name":"folder","description":"Folder name","required":true},{"type":"List[SnapshotItem]","name":"items","description":"Items to be copied"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"boolean","name":"parents","description":"Whether to create all non-existing parents. Defaults to false."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"SnapshotItem":{"type":"SnapshotItem","javaClass":"com.zetapush.common.messages.filestorage.SnapshotCreationRequest.SnapshotItem","fields":[{"type":"boolean","name":"caseInsensitive","description":"Whether to taken case into account. Defaults to false : case is important"},{"type":"List[String]","name":"excludes","description":"Patterns for files that should be excluded. Used only when path is a folder. Exclusions have precedence over inclusions"},{"type":"List[String]","name":"includes","description":"Patterns for files that should be included. Used only when path is a folder"},{"type":"String","name":"path","description":"Path of the file to be included."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"traceable":true},{"name":"du","type":{"typeName":"ZpfsRequest","imports":["com.zetapush.common.messages.filestorage.ZpfsRequest"]},"returnType":{"typeName":"ZpfsDiskUsage","imports":["com.zetapush.common.messages.filestorage.ZpfsDiskUsage"]},"desc":"Returns disk usage","notes":["Returns an recursively aggregated number of used bytes, starting at the given path."],"verbInfo":{"desc":"Returns disk usage","deprecation":"","notes":["Returns an recursively aggregated number of used bytes, starting at the given path."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId11/du","description":"Returns disk usage","verb":"du","action":"du","notes":["Returns an recursively aggregated number of used bytes, starting at the given path."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ZpfsRequest","resolved":{"types":{"ZpfsRequest":{"type":"ZpfsRequest","javaClass":"com.zetapush.common.messages.filestorage.ZpfsRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"ZpfsDiskUsage","resolved":{"types":{"ZpfsDiskUsage":{"type":"ZpfsDiskUsage","javaClass":"com.zetapush.common.messages.filestorage.ZpfsDiskUsage","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"long","name":"usage","description":"Disk usage in bytes"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true},{"name":"rm","type":{"typeName":"FileRemoval","imports":["com.zetapush.common.messages.filestorage.FileRemoval"]},"returnType":{"typeName":"FileRemoval","imports":["com.zetapush.common.messages.filestorage.FileRemoval"]},"desc":"Removes a file","notes":["Removes a file or folder (recursively)."],"verbInfo":{"desc":"Removes a file","deprecation":"","notes":["Removes a file or folder (recursively)."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId11/rm","description":"Removes a file","verb":"rm","action":"rm","notes":["Removes a file or folder (recursively)."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileRemoval","resolved":{"types":{"FileRemoval":{"type":"FileRemoval","javaClass":"com.zetapush.common.messages.filestorage.FileRemoval","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileRemoval","resolved":{"types":{"FileRemoval":{"type":"FileRemoval","javaClass":"com.zetapush.common.messages.filestorage.FileRemoval","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"traceable":true},{"name":"freeUploadUrl","type":{"typeName":"FileUploadRequest","imports":["com.zetapush.common.messages.filestorage.FileUploadRequest"]},"returnType":{"typeName":"FileUploadLocation","imports":["com.zetapush.common.messages.filestorage.FileUploadLocation"]},"desc":"Requests an upload URL without constraints.","listenerInfo":{"channel":"/service/BU_ID/depId11/freeUploadUrl","description":"Requests an upload URL without constraints.","verb":"freeUploadUrl","action":"free_upload_url","serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileUploadRequest","resolved":{"types":{"FileUploadRequest":{"type":"FileUploadRequest","javaClass":"com.zetapush.common.messages.filestorage.FileUploadRequest","fields":[{"type":"String","name":"contentType","description":"Content type (matches the value of the HTTP content type header)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileUploadLocation","resolved":{"types":{"FileUploadLocation":{"type":"FileUploadLocation","javaClass":"com.zetapush.common.messages.filestorage.FileUploadLocation","fields":[{"type":"String","name":"guid","description":"GUID of the uploaded file"},{"type":"String","name":"httpMethod","description":"HTTP method, typically POST or PUT"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"url","description":"Upload URL for the http client"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true},{"name":"newUploadUrl","type":{"typeName":"FileUploadRequest","imports":["com.zetapush.common.messages.filestorage.FileUploadRequest"]},"returnType":{"typeName":"FileUploadLocation","imports":["com.zetapush.common.messages.filestorage.FileUploadLocation"]},"desc":"Requests an upload URL","notes":["Requests an HTTP upload URL.","The URL contains temporary credentials (typically valid for a few minutes) and is meant for immediate use."],"verbInfo":{"desc":"","deprecation":"","notes":["Requests an HTTP upload URL.","The URL contains temporary credentials (typically valid for a few minutes) and is meant for immediate use."],"relatedClasses":[],"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId11/newUploadUrl","description":"Requests an upload URL","verb":"newUploadUrl","action":"newUploadUrl","notes":["Requests an HTTP upload URL.","The URL contains temporary credentials (typically valid for a few minutes) and is meant for immediate use."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileUploadRequest","resolved":{"types":{"FileUploadRequest":{"type":"FileUploadRequest","javaClass":"com.zetapush.common.messages.filestorage.FileUploadRequest","fields":[{"type":"String","name":"contentType","description":"Content type (matches the value of the HTTP content type header)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileUploadLocation","resolved":{"types":{"FileUploadLocation":{"type":"FileUploadLocation","javaClass":"com.zetapush.common.messages.filestorage.FileUploadLocation","fields":[{"type":"String","name":"guid","description":"GUID of the uploaded file"},{"type":"String","name":"httpMethod","description":"HTTP method, typically POST or PUT"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"url","description":"Upload URL for the http client"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."}]},"traceable":true},{"name":"updateMeta","type":{"typeName":"FileMetaUpdate","imports":["com.zetapush.common.messages.filestorage.FileMetaUpdate"]},"returnType":{"typeName":"ListingEntryInfo","imports":["com.zetapush.common.messages.filestorage.ListingEntryInfo"]},"desc":"Updates a file's metadata","listenerInfo":{"channel":"/service/BU_ID/depId11/updateMeta","description":"Updates a file's metadata","verb":"updateMeta","action":"free_upload_url","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileMetaUpdate","resolved":{"types":{"FileMetaUpdate":{"type":"FileMetaUpdate","javaClass":"com.zetapush.common.messages.filestorage.FileMetaUpdate","fields":[{"type":"Map[String,Object]","name":"metadata","description":"Metadata to be updated"},{"type":"Map[String,String]","name":"metadataFiles","description":"Metadata to be processed and updated. Values are translated from GUIDs to URLs by the underlying storage provider"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"ListingEntryInfo","resolved":{"types":{"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"traceable":true},{"name":"newFile","type":{"typeName":"FileUploadComplete","imports":["com.zetapush.common.messages.filestorage.FileUploadComplete"]},"returnType":{"typeName":"ListingEntryInfo","imports":["com.zetapush.common.messages.filestorage.ListingEntryInfo"]},"desc":"Notifies of upload completion","notes":["The client application calls this verb to notify that it's done uploading to the cloud.","Calling that verb MAY trigger additional events such as thumbnail/metadata creation."],"verbInfo":{"desc":"","deprecation":"","notes":["The client application calls this verb to notify that it's done uploading to the cloud.","Calling that verb MAY trigger additional events such as thumbnail/metadata creation."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId11/newFile","description":"Notifies of upload completion","verb":"newFile","action":"newFile","notes":["The client application calls this verb to notify that it's done uploading to the cloud.","Calling that verb MAY trigger additional events such as thumbnail/metadata creation."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileUploadComplete","resolved":{"types":{"FileUploadComplete":{"type":"FileUploadComplete","javaClass":"com.zetapush.common.messages.filestorage.FileUploadComplete","fields":[{"type":"String","name":"guid","description":"File GUID","required":true},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"}],"anyField":false}}}},"responseInfo":{"type":"ListingEntryInfo","resolved":{"types":{"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"traceable":true},{"name":"mkdir","type":{"typeName":"FolderCreationRequest","imports":["com.zetapush.common.messages.filestorage.FolderCreationRequest"]},"returnType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]},"desc":"Creates a folder","notes":["Creates a new folder.","May fail if the target location is not empty."],"verbInfo":{"desc":"Creates a folder","deprecation":"","notes":["Creates a new folder.","May fail if the target location is not empty."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId11/mkdir","description":"Creates a folder","verb":"mkdir","action":"mkdir","notes":["Creates a new folder.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FolderCreationRequest","resolved":{"types":{"FolderCreationRequest":{"type":"FolderCreationRequest","javaClass":"com.zetapush.common.messages.filestorage.FolderCreationRequest","fields":[{"type":"String","name":"folder","description":"Folder name","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"boolean","name":"parents","description":"Whether to create all non-existing parents. Defaults to false."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"traceable":true}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId11/link","description":"Links a file","verb":"link","action":"link","notes":["Links a file or folder to another location.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}]},"returnedType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId11/stat","description":"Returns information about a file","verb":"stat","action":"stat","notes":["Returns information about a single file.","The entry field will be null if the path does not exist"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileStatRequest","resolved":{"types":{"FileStatRequest":{"type":"FileStatRequest","javaClass":"com.zetapush.common.messages.filestorage.FileStatRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileStatResult","resolved":{"types":{"FileStatResult":{"type":"FileStatResult","javaClass":"com.zetapush.common.messages.filestorage.FileStatResult","fields":[{"type":"ListingEntryInfo","name":"entry","description":"File information. Null if file does not exist"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"FileStatResult","imports":["com.zetapush.common.messages.filestorage.FileStatResult"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId11/cp","description":"Copies a file","verb":"cp","action":"cp","notes":["Copies a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}]},"returnedType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId11/ls","description":"Lists a folder content","verb":"ls","action":"ls","notes":["Returns a paginated list of the folder's content."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FolderListingRequest","resolved":{"types":{"FolderListingRequest":{"type":"FolderListingRequest","javaClass":"com.zetapush.common.messages.filestorage.FolderListingRequest","fields":[{"type":"String","name":"folder","description":"Folder path","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"FolderListing","resolved":{"types":{"FolderListing":{"type":"FolderListing","javaClass":"com.zetapush.common.messages.filestorage.FolderListing","fields":[{"type":"PageContent[ListingEntryInfo]","name":"entries","description":"Entries in the folder"},{"type":"boolean","name":"exists","description":"Whether the path exists"},{"type":"String","name":"folder","description":"Folder path"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"FolderListing","imports":["com.zetapush.common.messages.filestorage.FolderListing"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId11/mv","description":"Moves a file","verb":"mv","action":"mv","notes":["Moves a file or folder (recursively) to a new location.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."},{"code":"NOT_FOUND","desc":"Source file not found."}]},"returnedType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId11/snapshot","description":"Creates a snapshot in a new folder","verb":"snapshot","action":"snapshot","notes":["Creates a new folder and then copies the given files inside"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"SnapshotCreationRequest","resolved":{"types":{"SnapshotCreationRequest":{"type":"SnapshotCreationRequest","javaClass":"com.zetapush.common.messages.filestorage.SnapshotCreationRequest","fields":[{"type":"boolean","name":"flatten","description":"Whether to flatten source paths. Setting this to true might lead to name conflicts"},{"type":"String","name":"folder","description":"Folder name","required":true},{"type":"List[SnapshotItem]","name":"items","description":"Items to be copied"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"boolean","name":"parents","description":"Whether to create all non-existing parents. Defaults to false."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"SnapshotItem":{"type":"SnapshotItem","javaClass":"com.zetapush.common.messages.filestorage.SnapshotCreationRequest.SnapshotItem","fields":[{"type":"boolean","name":"caseInsensitive","description":"Whether to taken case into account. Defaults to false : case is important"},{"type":"List[String]","name":"excludes","description":"Patterns for files that should be excluded. Used only when path is a folder. Exclusions have precedence over inclusions"},{"type":"List[String]","name":"includes","description":"Patterns for files that should be included. Used only when path is a folder"},{"type":"String","name":"path","description":"Path of the file to be included."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId11/du","description":"Returns disk usage","verb":"du","action":"du","notes":["Returns an recursively aggregated number of used bytes, starting at the given path."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ZpfsRequest","resolved":{"types":{"ZpfsRequest":{"type":"ZpfsRequest","javaClass":"com.zetapush.common.messages.filestorage.ZpfsRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"ZpfsDiskUsage","resolved":{"types":{"ZpfsDiskUsage":{"type":"ZpfsDiskUsage","javaClass":"com.zetapush.common.messages.filestorage.ZpfsDiskUsage","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"long","name":"usage","description":"Disk usage in bytes"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"ZpfsDiskUsage","imports":["com.zetapush.common.messages.filestorage.ZpfsDiskUsage"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId11/rm","description":"Removes a file","verb":"rm","action":"rm","notes":["Removes a file or folder (recursively)."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileRemoval","resolved":{"types":{"FileRemoval":{"type":"FileRemoval","javaClass":"com.zetapush.common.messages.filestorage.FileRemoval","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileRemoval","resolved":{"types":{"FileRemoval":{"type":"FileRemoval","javaClass":"com.zetapush.common.messages.filestorage.FileRemoval","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"FileRemoval","imports":["com.zetapush.common.messages.filestorage.FileRemoval"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId11/freeUploadUrl","description":"Requests an upload URL without constraints.","verb":"freeUploadUrl","action":"free_upload_url","serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileUploadRequest","resolved":{"types":{"FileUploadRequest":{"type":"FileUploadRequest","javaClass":"com.zetapush.common.messages.filestorage.FileUploadRequest","fields":[{"type":"String","name":"contentType","description":"Content type (matches the value of the HTTP content type header)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileUploadLocation","resolved":{"types":{"FileUploadLocation":{"type":"FileUploadLocation","javaClass":"com.zetapush.common.messages.filestorage.FileUploadLocation","fields":[{"type":"String","name":"guid","description":"GUID of the uploaded file"},{"type":"String","name":"httpMethod","description":"HTTP method, typically POST or PUT"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"url","description":"Upload URL for the http client"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"FileUploadLocation","imports":["com.zetapush.common.messages.filestorage.FileUploadLocation"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId11/newUploadUrl","description":"Requests an upload URL","verb":"newUploadUrl","action":"newUploadUrl","notes":["Requests an HTTP upload URL.","The URL contains temporary credentials (typically valid for a few minutes) and is meant for immediate use."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileUploadRequest","resolved":{"types":{"FileUploadRequest":{"type":"FileUploadRequest","javaClass":"com.zetapush.common.messages.filestorage.FileUploadRequest","fields":[{"type":"String","name":"contentType","description":"Content type (matches the value of the HTTP content type header)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"FileUploadLocation","resolved":{"types":{"FileUploadLocation":{"type":"FileUploadLocation","javaClass":"com.zetapush.common.messages.filestorage.FileUploadLocation","fields":[{"type":"String","name":"guid","description":"GUID of the uploaded file"},{"type":"String","name":"httpMethod","description":"HTTP method, typically POST or PUT"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"url","description":"Upload URL for the http client"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[{"code":"TARGET_NOT_WRITEABLE","desc":"Target cannot be written to. Maybe the file already exists. You have to explicitly remove a file to be able to create a file with the same path."}]},"returnedType":{"typeName":"FileUploadLocation","imports":["com.zetapush.common.messages.filestorage.FileUploadLocation"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId11/updateMeta","description":"Updates a file's metadata","verb":"updateMeta","action":"free_upload_url","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileMetaUpdate","resolved":{"types":{"FileMetaUpdate":{"type":"FileMetaUpdate","javaClass":"com.zetapush.common.messages.filestorage.FileMetaUpdate","fields":[{"type":"Map[String,Object]","name":"metadata","description":"Metadata to be updated"},{"type":"Map[String,String]","name":"metadataFiles","description":"Metadata to be processed and updated. Values are translated from GUIDs to URLs by the underlying storage provider"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"ListingEntryInfo","resolved":{"types":{"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"ListingEntryInfo","imports":["com.zetapush.common.messages.filestorage.ListingEntryInfo"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId11/newFile","description":"Notifies of upload completion","verb":"newFile","action":"newFile","notes":["The client application calls this verb to notify that it's done uploading to the cloud.","Calling that verb MAY trigger additional events such as thumbnail/metadata creation."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FileUploadComplete","resolved":{"types":{"FileUploadComplete":{"type":"FileUploadComplete","javaClass":"com.zetapush.common.messages.filestorage.FileUploadComplete","fields":[{"type":"String","name":"guid","description":"File GUID","required":true},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"}],"anyField":false}}}},"responseInfo":{"type":"ListingEntryInfo","resolved":{"types":{"ListingEntryInfo":{"type":"ListingEntryInfo","javaClass":"com.zetapush.common.messages.filestorage.ListingEntryInfo","fields":[{"type":"long","name":"creation","description":"File creation timestamp"},{"type":"Map[String,Object]","name":"metadata","description":"File metadata"},{"type":"String","name":"name","description":"File name"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"tags","description":"File tags"},{"type":"FileType","name":"type","description":"File type"},{"type":"UploadedFile","name":"url","description":"Original upload information"}],"anyField":false},"FileType":{"type":"FileType","javaClass":"com.zetapush.common.messages.filestorage.FileType","enumValues":[{"name":"FILE","description":"Normal file"},{"name":"DIR","description":"Directory. May contain other files."}],"anyField":false},"UploadedFile":{"type":"UploadedFile","javaClass":"com.zetapush.common.messages.filestorage.UploadedFile","fields":[{"type":"String","name":"contentType","description":"File mime type"},{"type":"String","name":"guid","description":"File GUID"},{"type":"String","name":"hash","description":"File hash"},{"type":"Map[String,Object]","name":"meta","description":"Metadata, as originally uploaded"},{"type":"String","name":"path","description":"File path"},{"type":"long","name":"size","description":"File size"},{"type":"String","name":"url","description":"HTTP url"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"ListingEntryInfo","imports":["com.zetapush.common.messages.filestorage.ListingEntryInfo"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId11/mkdir","description":"Creates a folder","verb":"mkdir","action":"mkdir","notes":["Creates a new folder.","May fail if the target location is not empty."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"FolderCreationRequest","resolved":{"types":{"FolderCreationRequest":{"type":"FolderCreationRequest","javaClass":"com.zetapush.common.messages.filestorage.FolderCreationRequest","fields":[{"type":"String","name":"folder","description":"Folder name","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"boolean","name":"parents","description":"Whether to create all non-existing parents. Defaults to false."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"CreatedFile","resolved":{"types":{"CreatedFile":{"type":"CreatedFile","javaClass":"com.zetapush.common.messages.filestorage.CreatedFile","fields":[{"type":"String","name":"oldPath","description":"Old name (if applicable)"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"path","description":"File path"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"CreatedFile","imports":["com.zetapush.common.messages.filestorage.CreatedFile"]}}]},{"clazz":"com.zetapush.str.services.directory.DirectoryService","name":"Userdir","itemId":"userdir","desc":"User API for user information","notes":[],"verbs":[{"name":"userInfo","type":{"typeName":"UserInfoRequest","imports":["com.zetapush.common.messages.directory.UserInfoRequest"]},"returnType":{"typeName":"UserInfoResponse","imports":["com.zetapush.common.messages.directory.UserInfoResponse"]},"desc":"Requests public data for the specified users","listenerInfo":{"channel":"/service/BU_ID/depId16/userInfo","description":"Requests public data for the specified users","verb":"userInfo","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"UserInfoRequest","resolved":{"types":{"UserInfoRequest":{"type":"UserInfoRequest","javaClass":"com.zetapush.common.messages.directory.UserInfoRequest","fields":[{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"userKeys","description":"Set of user keys","required":true}],"anyField":false}}}},"responseInfo":{"type":"UserInfoResponse","resolved":{"types":{"UserInfoResponse":{"type":"UserInfoResponse","javaClass":"com.zetapush.common.messages.directory.UserInfoResponse","fields":[{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Map[String,Map[String,Object]]","name":"users","description":"Maps user keys to maps of their public data. Note that user data maps may have different formats for different authentication providers"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true},{"name":"search","type":{"typeName":"UserSearchRequest","imports":["com.zetapush.common.messages.directory.UserSearchRequest"]},"returnType":{"typeName":"UserSearchResponse","imports":["com.zetapush.common.messages.directory.UserSearchResponse"]},"desc":"Searches for users matching the request","listenerInfo":{"channel":"/service/BU_ID/depId16/search","description":"Searches for users matching the request","verb":"search","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"UserSearchRequest","resolved":{"types":{"UserSearchRequest":{"type":"UserSearchRequest","javaClass":"com.zetapush.common.messages.directory.UserSearchRequest","fields":[{"type":"Map[String,Object]","name":"filter","description":"ElasticSearch filter"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"Map[String,Object]","name":"query","description":"Elasticsearch query","required":true},{"type":"String","name":"requestId","description":"Optional request ID"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"UserSearchResponse","resolved":{"types":{"UserSearchResponse":{"type":"UserSearchResponse","javaClass":"com.zetapush.common.messages.directory.UserSearchResponse","fields":[{"type":"Pagination","name":"page","description":"Requested pagination"},{"type":"String","name":"requestId","description":"Request ID, as given by the user"},{"type":"long","name":"totalHits","description":"Total number of users matching the query"},{"type":"Map[String,Map[String,Object]]","name":"users","description":"Maps user keys to maps of their public data. Note that user data maps may have different formats for different authentication providers"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId16/userInfo","description":"Requests public data for the specified users","verb":"userInfo","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"UserInfoRequest","resolved":{"types":{"UserInfoRequest":{"type":"UserInfoRequest","javaClass":"com.zetapush.common.messages.directory.UserInfoRequest","fields":[{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"Set[String]","name":"userKeys","description":"Set of user keys","required":true}],"anyField":false}}}},"responseInfo":{"type":"UserInfoResponse","resolved":{"types":{"UserInfoResponse":{"type":"UserInfoResponse","javaClass":"com.zetapush.common.messages.directory.UserInfoResponse","fields":[{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."},{"type":"Map[String,Map[String,Object]]","name":"users","description":"Maps user keys to maps of their public data. Note that user data maps may have different formats for different authentication providers"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"UserInfoResponse","imports":["com.zetapush.common.messages.directory.UserInfoResponse"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId16/search","description":"Searches for users matching the request","verb":"search","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"UserSearchRequest","resolved":{"types":{"UserSearchRequest":{"type":"UserSearchRequest","javaClass":"com.zetapush.common.messages.directory.UserSearchRequest","fields":[{"type":"Map[String,Object]","name":"filter","description":"ElasticSearch filter"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"Map[String,Object]","name":"query","description":"Elasticsearch query","required":true},{"type":"String","name":"requestId","description":"Optional request ID"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"UserSearchResponse","resolved":{"types":{"UserSearchResponse":{"type":"UserSearchResponse","javaClass":"com.zetapush.common.messages.directory.UserSearchResponse","fields":[{"type":"Pagination","name":"page","description":"Requested pagination"},{"type":"String","name":"requestId","description":"Request ID, as given by the user"},{"type":"long","name":"totalHits","description":"Total number of users matching the query"},{"type":"Map[String,Map[String,Object]]","name":"users","description":"Maps user keys to maps of their public data. Note that user data maps may have different formats for different authentication providers"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"UserSearchResponse","imports":["com.zetapush.common.messages.directory.UserSearchResponse"]}}]},{"clazz":"com.zetapush.str.service.game.GameService","name":"Game","itemId":"game","desc":"User API for games","notes":["Users can list, start, join games, and play."],"verbs":[{"name":"play","type":{"typeName":"GamePlay","imports":["com.zetapush.common.messages.game.GamePlay"]},"desc":"Gives some command to the game engine","listenerInfo":{"channel":"/service/BU_ID/depId19/play","description":"Gives some command to the game engine","verb":"play","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GamePlay","resolved":{"types":{"GamePlay":{"type":"GamePlay","javaClass":"com.zetapush.common.messages.game.GamePlay","fields":[{"type":"Map[String,Object]","name":"data","description":"Game-specific data"},{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"userId","description":"User unique key"}],"anyField":false}}}},"otherOutputs":[{"type":"GamePlay","resolved":{"types":{"GamePlay":{"type":"GamePlay","javaClass":"com.zetapush.common.messages.game.GamePlay","fields":[{"type":"Map[String,Object]","name":"data","description":"Game-specific data"},{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"userId","description":"User unique key"}],"anyField":false}}},"channel":"/service/BU_ID/depId19/play","target":"","description":"A command has been played by the game engine","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"GamePlay","imports":["com.zetapush.common.messages.game.GamePlay"]}}],"errors":[]},"traceable":false},{"name":"unjoin","type":{"typeName":"GameJoin","imports":["com.zetapush.common.messages.game.GameJoin"]},"desc":"A user cancels joining a game","listenerInfo":{"channel":"/service/BU_ID/depId19/unjoin","description":"A user cancels joining a game","verb":"unjoin","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameJoin","resolved":{"types":{"GameJoin":{"type":"GameJoin","javaClass":"com.zetapush.common.messages.game.GameJoin","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"role","description":"Optional role for the player. Meaning is game specific"},{"type":"String","name":"userId","description":"User unique key"},{"type":"String","name":"userName","description":"Player name inside the game"}],"anyField":false}}}},"otherOutputs":[{"type":"GameJoin","resolved":{"types":{"GameJoin":{"type":"GameJoin","javaClass":"com.zetapush.common.messages.game.GameJoin","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"role","description":"Optional role for the player. Meaning is game specific"},{"type":"String","name":"userId","description":"User unique key"},{"type":"String","name":"userName","description":"Player name inside the game"}],"anyField":false}}},"channel":"/service/BU_ID/depId19/unjoin","target":"","description":"A user leaved a game","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"GameJoin","imports":["com.zetapush.common.messages.game.GameJoin"]}}],"errors":[]},"traceable":false},{"name":"organize","type":{"typeName":"GameOrganization","imports":["com.zetapush.common.messages.game.GameOrganization"]},"desc":"Organizes a game","notes":[],"verbInfo":{"desc":"Organizes a game","deprecation":"","notes":[],"relatedClasses":[],"errors":[{"code":"NOT_FOUND","desc":"Game type not found"}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId19/organize","description":"Organizes a game","verb":"organize","notes":[],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameOrganization","resolved":{"types":{"GameOrganization":{"type":"GameOrganization","javaClass":"com.zetapush.common.messages.game.GameOrganization","fields":[{"type":"GameType","name":"type","description":"Game type","required":true},{"type":"String","name":"gameId","description":"Game identifier. \n","serverGenerated":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Map[String,Object]","name":"options","description":"Game creation options"}],"anyField":false},"GameType":{"type":"GameType","javaClass":"com.zetapush.common.messages.game.GameType","fields":[{"type":"String","name":"description","description":"Game description"},{"type":"String","name":"name","description":"Game type identifier"}],"anyField":false}}}},"otherOutputs":[{"type":"GameOrganization","resolved":{"types":{"GameOrganization":{"type":"GameOrganization","javaClass":"com.zetapush.common.messages.game.GameOrganization","fields":[{"type":"String","name":"gameId","description":"Game identifier"},{"type":"Map[String,Object]","name":"options","description":"Game creation options"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"GameType","name":"type","description":"Game type","required":true}],"anyField":false},"GameType":{"type":"GameType","javaClass":"com.zetapush.common.messages.game.GameType","fields":[{"type":"String","name":"description","description":"Game description"},{"type":"String","name":"name","description":"Game type identifier"}],"anyField":false}}},"channel":"/service/BU_ID/depId19/organize","target":"","description":"Game is organized","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"GameOrganization","imports":["com.zetapush.common.messages.game.GameOrganization"]}}],"errors":[{"code":"NOT_FOUND","desc":"Game type not found"}]},"traceable":false},{"name":"join","type":{"typeName":"GameJoin","imports":["com.zetapush.common.messages.game.GameJoin"]},"desc":"A user joins a game","listenerInfo":{"channel":"/service/BU_ID/depId19/join","description":"A user joins a game","verb":"join","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameJoin","resolved":{"types":{"GameJoin":{"type":"GameJoin","javaClass":"com.zetapush.common.messages.game.GameJoin","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"role","description":"Optional role for the player. Meaning is game specific"},{"type":"String","name":"userId","description":"User unique key"},{"type":"String","name":"userName","description":"Player name inside the game"}],"anyField":false}}}},"otherOutputs":[{"type":"GameJoin","resolved":{"types":{"GameJoin":{"type":"GameJoin","javaClass":"com.zetapush.common.messages.game.GameJoin","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"role","description":"Optional role for the player. Meaning is game specific"},{"type":"String","name":"userId","description":"User unique key"},{"type":"String","name":"userName","description":"Player name inside the game"}],"anyField":false}}},"channel":"/service/BU_ID/depId19/join","target":"","description":"A user has joined a game","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"GameJoin","imports":["com.zetapush.common.messages.game.GameJoin"]}}],"errors":[]},"traceable":false},{"name":"start","type":{"typeName":"GameStart","imports":["com.zetapush.common.messages.game.GameStart"]},"desc":"Starts a game","listenerInfo":{"channel":"/service/BU_ID/depId19/start","description":"Starts a game","verb":"start","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameStart","resolved":{"types":{"GameStart":{"type":"GameStart","javaClass":"com.zetapush.common.messages.game.GameStart","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"}],"anyField":false}}}},"otherOutputs":[{"type":"GameStart","resolved":{"types":{"GameStart":{"type":"GameStart","javaClass":"com.zetapush.common.messages.game.GameStart","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"}],"anyField":false}}},"channel":"/service/BU_ID/depId19/start","target":"","description":"A game has started","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"GameStart","imports":["com.zetapush.common.messages.game.GameStart"]}}],"errors":[]},"traceable":false},{"name":"available","type":{"imports":[]},"returnType":{"typeName":"List<GameInfo>","imports":["java.util.List","com.zetapush.common.messages.game.GameInfo"]},"desc":"Lists game types","notes":["Returns the list of game types supported by the server and the currently registered game engines."],"verbInfo":{"desc":"Lists game types","deprecation":"","notes":["Returns the list of game types supported by the server and the currently registered game engines."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId19/available","description":"Lists game types","verb":"available","notes":["Returns the list of game types supported by the server and the currently registered game engines."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"responseInfo":{"type":"List[GameInfo]","resolved":{"types":{"GameInfo":{"type":"GameInfo","javaClass":"com.zetapush.common.messages.game.GameInfo","fields":[{"type":"Map[String,String]","name":"commands","description":"Available commands when playing"},{"type":"String","name":"description","description":"Game description"},{"type":"String","name":"name","description":"Game type identifier"},{"type":"Map[String,String]","name":"options","description":"Available options whan creating"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":false}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId19/play","description":"Gives some command to the game engine","verb":"play","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GamePlay","resolved":{"types":{"GamePlay":{"type":"GamePlay","javaClass":"com.zetapush.common.messages.game.GamePlay","fields":[{"type":"Map[String,Object]","name":"data","description":"Game-specific data"},{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"userId","description":"User unique key"}],"anyField":false}}}},"otherOutputs":[{"type":"GamePlay","resolved":{"types":{"GamePlay":{"type":"GamePlay","javaClass":"com.zetapush.common.messages.game.GamePlay","fields":[{"type":"Map[String,Object]","name":"data","description":"Game-specific data"},{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"userId","description":"User unique key"}],"anyField":false}}},"channel":"/service/BU_ID/depId19/play","target":"","description":"A command has been played by the game engine","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"GamePlay","imports":["com.zetapush.common.messages.game.GamePlay"]}}],"errors":[]}},{"listenerInfo":{"channel":"/service/BU_ID/depId19/unjoin","description":"A user cancels joining a game","verb":"unjoin","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameJoin","resolved":{"types":{"GameJoin":{"type":"GameJoin","javaClass":"com.zetapush.common.messages.game.GameJoin","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"role","description":"Optional role for the player. Meaning is game specific"},{"type":"String","name":"userId","description":"User unique key"},{"type":"String","name":"userName","description":"Player name inside the game"}],"anyField":false}}}},"otherOutputs":[{"type":"GameJoin","resolved":{"types":{"GameJoin":{"type":"GameJoin","javaClass":"com.zetapush.common.messages.game.GameJoin","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"role","description":"Optional role for the player. Meaning is game specific"},{"type":"String","name":"userId","description":"User unique key"},{"type":"String","name":"userName","description":"Player name inside the game"}],"anyField":false}}},"channel":"/service/BU_ID/depId19/unjoin","target":"","description":"A user leaved a game","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"GameJoin","imports":["com.zetapush.common.messages.game.GameJoin"]}}],"errors":[]}},{"listenerInfo":{"channel":"/service/BU_ID/depId19/organize","description":"Organizes a game","verb":"organize","notes":[],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameOrganization","resolved":{"types":{"GameOrganization":{"type":"GameOrganization","javaClass":"com.zetapush.common.messages.game.GameOrganization","fields":[{"type":"GameType","name":"type","description":"Game type","required":true},{"type":"String","name":"gameId","description":"Game identifier. \n","serverGenerated":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Map[String,Object]","name":"options","description":"Game creation options"}],"anyField":false},"GameType":{"type":"GameType","javaClass":"com.zetapush.common.messages.game.GameType","fields":[{"type":"String","name":"description","description":"Game description"},{"type":"String","name":"name","description":"Game type identifier"}],"anyField":false}}}},"otherOutputs":[{"type":"GameOrganization","resolved":{"types":{"GameOrganization":{"type":"GameOrganization","javaClass":"com.zetapush.common.messages.game.GameOrganization","fields":[{"type":"String","name":"gameId","description":"Game identifier"},{"type":"Map[String,Object]","name":"options","description":"Game creation options"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"GameType","name":"type","description":"Game type","required":true}],"anyField":false},"GameType":{"type":"GameType","javaClass":"com.zetapush.common.messages.game.GameType","fields":[{"type":"String","name":"description","description":"Game description"},{"type":"String","name":"name","description":"Game type identifier"}],"anyField":false}}},"channel":"/service/BU_ID/depId19/organize","target":"","description":"Game is organized","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"GameOrganization","imports":["com.zetapush.common.messages.game.GameOrganization"]}}],"errors":[{"code":"NOT_FOUND","desc":"Game type not found"}]}},{"listenerInfo":{"channel":"/service/BU_ID/depId19/join","description":"A user joins a game","verb":"join","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameJoin","resolved":{"types":{"GameJoin":{"type":"GameJoin","javaClass":"com.zetapush.common.messages.game.GameJoin","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"role","description":"Optional role for the player. Meaning is game specific"},{"type":"String","name":"userId","description":"User unique key"},{"type":"String","name":"userName","description":"Player name inside the game"}],"anyField":false}}}},"otherOutputs":[{"type":"GameJoin","resolved":{"types":{"GameJoin":{"type":"GameJoin","javaClass":"com.zetapush.common.messages.game.GameJoin","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"},{"type":"String","name":"role","description":"Optional role for the player. Meaning is game specific"},{"type":"String","name":"userId","description":"User unique key"},{"type":"String","name":"userName","description":"Player name inside the game"}],"anyField":false}}},"channel":"/service/BU_ID/depId19/join","target":"","description":"A user has joined a game","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"GameJoin","imports":["com.zetapush.common.messages.game.GameJoin"]}}],"errors":[]}},{"listenerInfo":{"channel":"/service/BU_ID/depId19/start","description":"Starts a game","verb":"start","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GameStart","resolved":{"types":{"GameStart":{"type":"GameStart","javaClass":"com.zetapush.common.messages.game.GameStart","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"}],"anyField":false}}}},"otherOutputs":[{"type":"GameStart","resolved":{"types":{"GameStart":{"type":"GameStart","javaClass":"com.zetapush.common.messages.game.GameStart","fields":[{"type":"String","name":"gameId","description":"Server attributed game identifier"}],"anyField":false}}},"channel":"/service/BU_ID/depId19/start","target":"","description":"A game has started","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"GameStart","imports":["com.zetapush.common.messages.game.GameStart"]}}],"errors":[]}},{"listenerInfo":{"channel":"/service/BU_ID/depId19/available","description":"Lists game types","verb":"available","notes":["Returns the list of game types supported by the server and the currently registered game engines."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"responseInfo":{"type":"List[GameInfo]","resolved":{"types":{"GameInfo":{"type":"GameInfo","javaClass":"com.zetapush.common.messages.game.GameInfo","fields":[{"type":"Map[String,String]","name":"commands","description":"Available commands when playing"},{"type":"String","name":"description","description":"Game description"},{"type":"String","name":"name","description":"Game type identifier"},{"type":"Map[String,String]","name":"options","description":"Available options whan creating"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"List<GameInfo>","imports":["java.util.List","com.zetapush.common.messages.game.GameInfo"]}}]},{"clazz":"com.zetapush.str.services.groups.services.GroupManagementService","name":"GroupManagement","itemId":"groups","desc":"User API for groups and rights.","notes":["Groups are stored per user.","This means that two users can own a group with the same identifier. A couple (owner, group) is needed to uniquely identify a group inside a group management service.","The triplet (deploymentId, owner, group) is actually needed to fully qualify a group outside of the scope of this service."],"verbs":[{"name":"grant","type":{"typeName":"Grant","imports":["com.zetapush.common.messages.remoting.Grant"]},"returnType":{"typeName":"Grant","imports":["com.zetapush.common.messages.remoting.Grant"]},"desc":"Grants a right to a group","notes":["The granting API does not do any check when storing permissions.","In particular when granting rights on a verb and resource of another API, the existence of said verb and resource is not checked."],"verbInfo":{"desc":"","deprecation":"","notes":["The granting API does not do any check when storing permissions.","In particular when granting rights on a verb and resource of another API, the existence of said verb and resource is not checked."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId9/grant","description":"Grants a right to a group","verb":"grant","action":"GRANT","notes":["The granting API does not do any check when storing permissions.","In particular when granting rights on a verb and resource of another API, the existence of said verb and resource is not checked."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"Grant","resolved":{"types":{"Grant":{"type":"Grant","javaClass":"com.zetapush.common.messages.remoting.Grant","fields":[{"type":"String","name":"action","description":"Action which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false}}}},"responseInfo":{"type":"Grant","resolved":{"types":{"Grant":{"type":"Grant","javaClass":"com.zetapush.common.messages.remoting.Grant","fields":[{"type":"String","name":"action","description":"Action which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"traceable":true},{"name":"createGroup","type":{"typeName":"GroupInfo","imports":["com.zetapush.common.messages.remoting.GroupInfo"]},"returnType":{"typeName":"GroupInfo","imports":["com.zetapush.common.messages.remoting.GroupInfo"]},"desc":"Creates a group","notes":["Creates a group owned by the current user.","Group creation may fail if the group already exists."],"verbInfo":{"desc":"","deprecation":"","notes":["Creates a group owned by the current user.","Group creation may fail if the group already exists."],"relatedClasses":[],"errors":[{"code":"BAD_INPUT_DATA","desc":"Missing group id."},{"code":"BAD_NAME","desc":"Group id must be alphanumerical."}],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId9/createGroup","description":"Creates a group","verb":"createGroup","action":"WRITE","notes":["Creates a group owned by the current user.","Group creation may fail if the group already exists."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupInfo","resolved":{"types":{"GroupInfo":{"type":"GroupInfo","javaClass":"com.zetapush.common.messages.remoting.GroupInfo","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"GroupInfo","resolved":{"types":{"GroupInfo":{"type":"GroupInfo","javaClass":"com.zetapush.common.messages.remoting.GroupInfo","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"BAD_INPUT_DATA","desc":"Missing group id."},{"code":"BAD_NAME","desc":"Group id must be alphanumerical."}]},"traceable":true},{"name":"listOwnedGroups","type":{"typeName":"TraceablePaginatedImpersonatedRequest","imports":["com.zetapush.common.messages.TraceablePaginatedImpersonatedRequest"]},"returnType":{"typeName":"OwnedGroups","imports":["com.zetapush.common.messages.remoting.OwnedGroups"]},"desc":"Lists my owned groups","notes":["Returns the whole list of groups owned by the current user"],"verbInfo":{"desc":"","deprecation":"","notes":["Returns the whole list of groups owned by the current user"],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId9/listOwnedGroups","description":"Lists my owned groups","verb":"listOwnedGroups","action":"LIST","notes":["Returns the whole list of groups owned by the current user"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TraceablePaginatedImpersonatedRequest","resolved":{"types":{"TraceablePaginatedImpersonatedRequest":{"type":"TraceablePaginatedImpersonatedRequest","javaClass":"com.zetapush.common.messages.TraceablePaginatedImpersonatedRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"OwnedGroups","resolved":{"types":{"OwnedGroups":{"type":"OwnedGroups","javaClass":"com.zetapush.common.messages.remoting.OwnedGroups","fields":[{"type":"PageContent[GroupInfo]","name":"groups","description":"Groups owned by the user."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GroupInfo":{"type":"GroupInfo","javaClass":"com.zetapush.common.messages.remoting.GroupInfo","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true},{"name":"listDetailedOwnedGroups","type":{"typeName":"TraceablePaginatedImpersonatedRequest","imports":["com.zetapush.common.messages.TraceablePaginatedImpersonatedRequest"]},"returnType":{"typeName":"OwnedGroupsWithDetails","imports":["com.zetapush.common.messages.remoting.OwnedGroupsWithDetails"]},"desc":"Lists my owned groups, with details","notes":["Returns the whole list of groups owned by the current user, with their members"],"verbInfo":{"desc":"","deprecation":"","notes":["Returns the whole list of groups owned by the current user, with their members"],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId9/listDetailedOwnedGroups","description":"Lists my owned groups, with details","verb":"listDetailedOwnedGroups","action":"LIST","notes":["Returns the whole list of groups owned by the current user, with their members"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TraceablePaginatedImpersonatedRequest","resolved":{"types":{"TraceablePaginatedImpersonatedRequest":{"type":"TraceablePaginatedImpersonatedRequest","javaClass":"com.zetapush.common.messages.TraceablePaginatedImpersonatedRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"OwnedGroupsWithDetails","resolved":{"types":{"OwnedGroupsWithDetails":{"type":"OwnedGroupsWithDetails","javaClass":"com.zetapush.common.messages.remoting.OwnedGroupsWithDetails","fields":[{"type":"PageContent[GroupUsers]","name":"groups","description":"Detailed groups owned by the user."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GroupUsers":{"type":"GroupUsers","javaClass":"com.zetapush.common.messages.remoting.GroupUsers","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[String]","name":"users","description":"User keys of the group members"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true},{"name":"myGroups","type":{"typeName":"ImpersonatedRequest","imports":["com.zetapush.common.messages.remoting.ImpersonatedRequest"]},"returnType":{"typeName":"List<GroupInfo>","imports":["java.util.List","com.zetapush.common.messages.remoting.GroupInfo"]},"desc":"Lists the groups I am part of","notes":["Returns the whole list of groups the current user is part of.","Groups may be owned by anyone, including the current user."],"verbInfo":{"desc":"","deprecation":"Replaced by listJoinedGroups","notes":["Returns the whole list of groups the current user is part of.","Groups may be owned by anyone, including the current user."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId9/myGroups","description":"Lists the groups I am part of","verb":"myGroups","action":"LIST","deprecation":"Replaced by listJoinedGroups","notes":["Returns the whole list of groups the current user is part of.","Groups may be owned by anyone, including the current user."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ImpersonatedRequest","resolved":{"types":{"ImpersonatedRequest":{"type":"ImpersonatedRequest","javaClass":"com.zetapush.common.messages.remoting.ImpersonatedRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"responseInfo":{"type":"List[GroupInfo]","resolved":{"types":{"GroupInfo":{"type":"GroupInfo","javaClass":"com.zetapush.common.messages.remoting.GroupInfo","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":false},{"name":"listJoinedGroups","type":{"typeName":"TraceablePaginatedImpersonatedRequest","imports":["com.zetapush.common.messages.TraceablePaginatedImpersonatedRequest"]},"returnType":{"typeName":"JoinedGroups","imports":["com.zetapush.common.messages.remoting.JoinedGroups"]},"desc":"Lists the groups I am part of","notes":["Returns the whole list of groups the current user is part of.","Groups may be owned by anyone, including the current user."],"verbInfo":{"desc":"","deprecation":"","notes":["Returns the whole list of groups the current user is part of.","Groups may be owned by anyone, including the current user."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId9/listJoinedGroups","description":"Lists the groups I am part of","verb":"listJoinedGroups","action":"LIST","notes":["Returns the whole list of groups the current user is part of.","Groups may be owned by anyone, including the current user."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TraceablePaginatedImpersonatedRequest","resolved":{"types":{"TraceablePaginatedImpersonatedRequest":{"type":"TraceablePaginatedImpersonatedRequest","javaClass":"com.zetapush.common.messages.TraceablePaginatedImpersonatedRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"JoinedGroups","resolved":{"types":{"JoinedGroups":{"type":"JoinedGroups","javaClass":"com.zetapush.common.messages.remoting.JoinedGroups","fields":[{"type":"PageContent[GroupInfo]","name":"groups","description":"Groups joined by the user."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GroupInfo":{"type":"GroupInfo","javaClass":"com.zetapush.common.messages.remoting.GroupInfo","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true},{"name":"delGroup","type":{"typeName":"GroupRelated","imports":["com.zetapush.common.messages.remoting.GroupRelated"]},"returnType":{"typeName":"GroupRelated","imports":["com.zetapush.common.messages.remoting.GroupRelated"]},"desc":"Removes a group","notes":["Removes the given group owned by the current user or the given owner.","Also removes all grants to that group."],"verbInfo":{"desc":"","deprecation":"","notes":["Removes the given group owned by the current user or the given owner.","Also removes all grants to that group."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId9/delGroup","description":"Removes a group","verb":"delGroup","action":"WRITE","notes":["Removes the given group owned by the current user or the given owner.","Also removes all grants to that group."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupRelated","resolved":{"types":{"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"GroupRelated","resolved":{"types":{"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"traceable":true},{"name":"addMe","type":{"typeName":"UserGroup","imports":["com.zetapush.common.messages.remoting.UserGroup"]},"returnType":{"typeName":"UserGroup","imports":["com.zetapush.common.messages.remoting.UserGroup"]},"desc":"Adds me to a group","notes":["Adds me (the caller) to a group.","This verb exists so that group owners may grant the right to join their groups without granting the right to add other users to those groups.","The 'user' field is implicitly set to the current user's key."],"verbInfo":{"desc":"","deprecation":"","notes":["Adds me (the caller) to a group.","This verb exists so that group owners may grant the right to join their groups without granting the right to add other users to those groups.","The 'user' field is implicitly set to the current user's key."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId9/addMe","description":"Adds me to a group","verb":"addMe","action":"ADDMYSELF","notes":["Adds me (the caller) to a group.","This verb exists so that group owners may grant the right to join their groups without granting the right to add other users to those groups.","The 'user' field is implicitly set to the current user's key."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"UserGroup","resolved":{"types":{"UserGroup":{"type":"UserGroup","javaClass":"com.zetapush.common.messages.remoting.UserGroup","fields":[{"type":"String","name":"user","description":"The user's key (as in __userKey). \nCurrent user's key","serverGenerated":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"responseInfo":{"type":"UserGroup","resolved":{"types":{"UserGroup":{"type":"UserGroup","javaClass":"com.zetapush.common.messages.remoting.UserGroup","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"user","description":"The user's key (as in __userKey)"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"traceable":true},{"name":"memberOf","type":{"typeName":"UserMembership","imports":["com.zetapush.common.messages.remoting.UserMembership"]},"returnType":{"typeName":"UserGroupMembership","imports":["com.zetapush.common.messages.remoting.UserGroupMembership"]},"desc":"Tests membership","notes":["Tests whether I (the caller) am a member of the given group.","This verb exists so that users can determine if they are part of a group without being granted particular rights.","The 'user' field is implicitly set to the current user's key."],"verbInfo":{"desc":"","deprecation":"","notes":["Tests whether I (the caller) am a member of the given group.","This verb exists so that users can determine if they are part of a group without being granted particular rights.","The 'user' field is implicitly set to the current user's key."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId9/memberOf","description":"Tests membership","verb":"memberOf","notes":["Tests whether I (the caller) am a member of the given group.","This verb exists so that users can determine if they are part of a group without being granted particular rights.","The 'user' field is implicitly set to the current user's key."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"UserMembership","resolved":{"types":{"UserMembership":{"type":"UserMembership","javaClass":"com.zetapush.common.messages.remoting.UserMembership","fields":[{"type":"String","name":"user","description":"The user's key (as in __userKey). \nCurrent user's key","serverGenerated":true},{"type":"boolean","name":"hardFail","description":"True if lack of effective membership should be treated as an error. False to return the information as a boolean in the response."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"responseInfo":{"type":"UserGroupMembership","resolved":{"types":{"UserGroupMembership":{"type":"UserGroupMembership","javaClass":"com.zetapush.common.messages.remoting.UserGroupMembership","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"boolean","name":"member","description":"Whether the user is member of the group"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"user","description":"The user's key (as in __userKey)"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"traceable":true},{"name":"addUsers","type":{"typeName":"GroupUsers","imports":["com.zetapush.common.messages.remoting.GroupUsers"]},"desc":"Adds users to a group","notes":["Users are processed in the given order","In case of failure in the middle of a user list, this verb may have succeeded to add the first users, but will not continue processing the end of the list."],"verbInfo":{"desc":"","deprecation":"","notes":["Users are processed in the given order","In case of failure in the middle of a user list, this verb may have succeeded to add the first users, but will not continue processing the end of the list."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId9/addUsers","description":"Adds users to a group","verb":"addUsers","action":"WRITE","notes":["Users are processed in the given order","In case of failure in the middle of a user list, this verb may have succeeded to add the first users, but will not continue processing the end of the list."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupUsers","resolved":{"types":{"GroupUsers":{"type":"GroupUsers","javaClass":"com.zetapush.common.messages.remoting.GroupUsers","fields":[{"type":"List[String]","name":"users","description":"User keys of the group members"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user. \n","serverGenerated":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"otherOutputs":[{"type":"UserGroup","resolved":{"types":{"UserGroup":{"type":"UserGroup","javaClass":"com.zetapush.common.messages.remoting.UserGroup","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"user","description":"The user's key (as in __userKey)"}],"anyField":false}}},"channel":"addUser","target":"","description":"","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"UserGroup","imports":["com.zetapush.common.messages.remoting.UserGroup"]}}],"errors":[]},"traceable":false},{"name":"delUsers","type":{"typeName":"GroupUsers","imports":["com.zetapush.common.messages.remoting.GroupUsers"]},"desc":"Removes users from a group","listenerInfo":{"channel":"/service/BU_ID/depId9/delUsers","description":"Removes users from a group","verb":"delUsers","action":"WRITE","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupUsers","resolved":{"types":{"GroupUsers":{"type":"GroupUsers","javaClass":"com.zetapush.common.messages.remoting.GroupUsers","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[String]","name":"users","description":"User keys of the group members"}],"anyField":false}}}},"errors":[]},"traceable":false},{"name":"mgrant","type":{"typeName":"Grants","imports":["com.zetapush.common.messages.remoting.Grants"]},"returnType":{"typeName":"Grants","imports":["com.zetapush.common.messages.remoting.Grants"]},"desc":"Grants rights to a group","notes":["Grant several rights at once."],"verbInfo":{"desc":"","deprecation":"","notes":["Grant several rights at once."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId9/mgrant","description":"Grants rights to a group","verb":"mgrant","action":"GRANT","notes":["Grant several rights at once."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"Grants","resolved":{"types":{"Grants":{"type":"Grants","javaClass":"com.zetapush.common.messages.remoting.Grants","fields":[{"type":"List[String]","name":"actions","description":"Actions which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false}}}},"responseInfo":{"type":"Grants","resolved":{"types":{"Grants":{"type":"Grants","javaClass":"com.zetapush.common.messages.remoting.Grants","fields":[{"type":"List[String]","name":"actions","description":"Actions which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"traceable":true},{"name":"mrevoke","type":{"typeName":"Grants","imports":["com.zetapush.common.messages.remoting.Grants"]},"returnType":{"typeName":"Grants","imports":["com.zetapush.common.messages.remoting.Grants"]},"desc":"Revokes rights for a group","listenerInfo":{"channel":"/service/BU_ID/depId9/mrevoke","description":"Revokes rights for a group","verb":"mrevoke","action":"GRANT","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"Grants","resolved":{"types":{"Grants":{"type":"Grants","javaClass":"com.zetapush.common.messages.remoting.Grants","fields":[{"type":"List[String]","name":"actions","description":"Actions which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false}}}},"responseInfo":{"type":"Grants","resolved":{"types":{"Grants":{"type":"Grants","javaClass":"com.zetapush.common.messages.remoting.Grants","fields":[{"type":"List[String]","name":"actions","description":"Actions which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"traceable":true},{"name":"listGrants","type":{"typeName":"GroupRelated","imports":["com.zetapush.common.messages.remoting.GroupRelated"]},"returnType":{"typeName":"GrantList","imports":["com.zetapush.common.messages.remoting.GrantList"]},"desc":"Lists rights for a group","notes":["This API lists explicitly configured rights.","Effective rights include configured rights, implicit rights and inherited rights."],"verbInfo":{"desc":"","deprecation":"Use listGroupGrants","notes":["This API lists explicitly configured rights.","Effective rights include configured rights, implicit rights and inherited rights."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId9/listGrants","description":"Lists rights for a group","verb":"listGrants","action":"LIST","deprecation":"Use listGroupGrants","notes":["This API lists explicitly configured rights.","Effective rights include configured rights, implicit rights and inherited rights."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupRelated","resolved":{"types":{"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"GrantList","resolved":{"types":{"GrantList":{"type":"GrantList","javaClass":"com.zetapush.common.messages.remoting.GrantList","fields":[{"type":"List[GrantListItem]","name":"grants","description":"List of granted rights"},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GrantListItem":{"type":"GrantListItem","javaClass":"com.zetapush.common.messages.remoting.GrantListItem","fields":[{"type":"String","name":"action","description":"Configured authorized action"},{"type":"String","name":"resource","description":"Configured authorized resource"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true},{"name":"listGroupGrants","type":{"typeName":"GroupRelatedAndPaged","imports":["com.zetapush.common.messages.remoting.GroupRelatedAndPaged"]},"returnType":{"typeName":"PagedGrantList","imports":["com.zetapush.common.messages.remoting.PagedGrantList"]},"desc":"Lists rights for a group","notes":["This API lists explicitly configured rights.","Effective rights include configured rights, implicit rights and inherited rights."],"verbInfo":{"desc":"","deprecation":"","notes":["This API lists explicitly configured rights.","Effective rights include configured rights, implicit rights and inherited rights."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId9/listGroupGrants","description":"Lists rights for a group","verb":"listGroupGrants","action":"LIST","notes":["This API lists explicitly configured rights.","Effective rights include configured rights, implicit rights and inherited rights."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupRelatedAndPaged","resolved":{"types":{"GroupRelatedAndPaged":{"type":"GroupRelatedAndPaged","javaClass":"com.zetapush.common.messages.remoting.GroupRelatedAndPaged","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"PagedGrantList","resolved":{"types":{"PagedGrantList":{"type":"PagedGrantList","javaClass":"com.zetapush.common.messages.remoting.PagedGrantList","fields":[{"type":"PageContent[GrantListItem]","name":"grants","description":"List of granted rights"},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GrantListItem":{"type":"GrantListItem","javaClass":"com.zetapush.common.messages.remoting.GrantListItem","fields":[{"type":"String","name":"action","description":"Configured authorized action"},{"type":"String","name":"resource","description":"Configured authorized resource"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true},{"name":"listPresences","type":{"typeName":"GroupRelated","imports":["com.zetapush.common.messages.remoting.GroupRelated"]},"returnType":{"typeName":"GroupPresence","imports":["com.zetapush.common.messages.presence.GroupPresence"]},"desc":"Lists presences for a group","notes":["Returns the list of members of the given groups, along with their actual and current presence on the zetapush server.","The current implementation does not include information about the particular devices users are connected with.","If a user is connected twice with two different devices, two identical entries will be returned."],"verbInfo":{"desc":"","deprecation":"Use listGroupPresences","notes":["Returns the list of members of the given groups, along with their actual and current presence on the zetapush server.","The current implementation does not include information about the particular devices users are connected with.","If a user is connected twice with two different devices, two identical entries will be returned."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId9/listPresences","description":"Lists presences for a group","verb":"listPresences","action":"LIST","deprecation":"Use listGroupPresences","notes":["Returns the list of members of the given groups, along with their actual and current presence on the zetapush server.","The current implementation does not include information about the particular devices users are connected with.","If a user is connected twice with two different devices, two identical entries will be returned."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupRelated","resolved":{"types":{"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"GroupPresence","resolved":{"types":{"GroupPresence":{"type":"GroupPresence","javaClass":"com.zetapush.common.messages.presence.GroupPresence","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"List[Presence]","name":"presences","description":"List of group users, with their presence information."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"OwnerResource":{"type":"OwnerResource","javaClass":"com.zetapush.common.messages.remoting.OwnerResource","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false},"Presence":{"type":"Presence","javaClass":"com.zetapush.common.messages.presence.Presence","fields":[{"type":"GroupRelated","name":"group","description":"Group information"},{"type":"String","name":"presence","description":"Presence status. OFF or ON"},{"type":"OwnerResource","name":"user","description":"User information"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true},{"name":"listGroupPresences","type":{"typeName":"GroupRelatedAndPaged","imports":["com.zetapush.common.messages.remoting.GroupRelatedAndPaged"]},"returnType":{"typeName":"PagedGroupPresence","imports":["com.zetapush.common.messages.presence.PagedGroupPresence"]},"desc":"Lists presences for a group","notes":["Returns the list of members of the given groups, along with their actual and current presence on the zetapush server.","The current implementation does not include information about the particular devices users are connected with.","If a user is connected twice with two different devices, two identical entries will be returned."],"verbInfo":{"desc":"","deprecation":"","notes":["Returns the list of members of the given groups, along with their actual and current presence on the zetapush server.","The current implementation does not include information about the particular devices users are connected with.","If a user is connected twice with two different devices, two identical entries will be returned."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId9/listGroupPresences","description":"Lists presences for a group","verb":"listGroupPresences","action":"LIST","notes":["Returns the list of members of the given groups, along with their actual and current presence on the zetapush server.","The current implementation does not include information about the particular devices users are connected with.","If a user is connected twice with two different devices, two identical entries will be returned."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupRelatedAndPaged","resolved":{"types":{"GroupRelatedAndPaged":{"type":"GroupRelatedAndPaged","javaClass":"com.zetapush.common.messages.remoting.GroupRelatedAndPaged","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"PagedGroupPresence","resolved":{"types":{"PagedGroupPresence":{"type":"PagedGroupPresence","javaClass":"com.zetapush.common.messages.presence.PagedGroupPresence","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"PageContent[Presence]","name":"presences","description":"List of group users, with their presence information."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"OwnerResource":{"type":"OwnerResource","javaClass":"com.zetapush.common.messages.remoting.OwnerResource","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"Presence":{"type":"Presence","javaClass":"com.zetapush.common.messages.presence.Presence","fields":[{"type":"GroupRelated","name":"group","description":"Group information"},{"type":"String","name":"presence","description":"Presence status. OFF or ON"},{"type":"OwnerResource","name":"user","description":"User information"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true},{"name":"addUser","type":{"typeName":"UserGroup","imports":["com.zetapush.common.messages.remoting.UserGroup"]},"returnType":{"typeName":"UserGroup","imports":["com.zetapush.common.messages.remoting.UserGroup"]},"desc":"Adds a user to a group","notes":["Adds the given user to the given group.","Addition may fail if the given group does not already exist."],"verbInfo":{"desc":"","deprecation":"","notes":["Adds the given user to the given group.","Addition may fail if the given group does not already exist."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId9/addUser","description":"Adds a user to a group","verb":"addUser","action":"WRITE","notes":["Adds the given user to the given group.","Addition may fail if the given group does not already exist."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"UserGroup","resolved":{"types":{"UserGroup":{"type":"UserGroup","javaClass":"com.zetapush.common.messages.remoting.UserGroup","fields":[{"type":"String","name":"user","description":"The user's key (as in __userKey). \n","required":true,"serverGenerated":false},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"responseInfo":{"type":"UserGroup","resolved":{"types":{"UserGroup":{"type":"UserGroup","javaClass":"com.zetapush.common.messages.remoting.UserGroup","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"user","description":"The user's key (as in __userKey)"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"traceable":true},{"name":"delUser","type":{"typeName":"UserGroup","imports":["com.zetapush.common.messages.remoting.UserGroup"]},"returnType":{"typeName":"UserGroup","imports":["com.zetapush.common.messages.remoting.UserGroup"]},"desc":"Removes a user from a group","listenerInfo":{"channel":"/service/BU_ID/depId9/delUser","description":"Removes a user from a group","verb":"delUser","action":"WRITE","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"UserGroup","resolved":{"types":{"UserGroup":{"type":"UserGroup","javaClass":"com.zetapush.common.messages.remoting.UserGroup","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"user","description":"The user's key (as in __userKey)"}],"anyField":false}}}},"responseInfo":{"type":"UserGroup","resolved":{"types":{"UserGroup":{"type":"UserGroup","javaClass":"com.zetapush.common.messages.remoting.UserGroup","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"user","description":"The user's key (as in __userKey)"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"traceable":true},{"name":"groupUsers","type":{"typeName":"GroupRelated","imports":["com.zetapush.common.messages.remoting.GroupRelated"]},"returnType":{"typeName":"GroupUsers","imports":["com.zetapush.common.messages.remoting.GroupUsers"]},"desc":"Lists the group users","notes":["Returns the whole list of users configured inside the given group."],"verbInfo":{"desc":"","deprecation":"","notes":["Returns the whole list of users configured inside the given group."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId9/groupUsers","description":"Lists the group users","verb":"groupUsers","action":"LIST","notes":["Returns the whole list of users configured inside the given group."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupRelated","resolved":{"types":{"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"GroupUsers","resolved":{"types":{"GroupUsers":{"type":"GroupUsers","javaClass":"com.zetapush.common.messages.remoting.GroupUsers","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[String]","name":"users","description":"User keys of the group members"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true},{"name":"revoke","type":{"typeName":"Grant","imports":["com.zetapush.common.messages.remoting.Grant"]},"returnType":{"typeName":"Grant","imports":["com.zetapush.common.messages.remoting.Grant"]},"desc":"Revokes a right for a group","listenerInfo":{"channel":"/service/BU_ID/depId9/revoke","description":"Revokes a right for a group","verb":"revoke","action":"GRANT","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"Grant","resolved":{"types":{"Grant":{"type":"Grant","javaClass":"com.zetapush.common.messages.remoting.Grant","fields":[{"type":"String","name":"action","description":"Action which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false}}}},"responseInfo":{"type":"Grant","resolved":{"types":{"Grant":{"type":"Grant","javaClass":"com.zetapush.common.messages.remoting.Grant","fields":[{"type":"String","name":"action","description":"Action which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"traceable":true},{"name":"allGroups","type":{"typeName":"ImpersonatedRequest","imports":["com.zetapush.common.messages.remoting.ImpersonatedRequest"]},"returnType":{"typeName":"List<GroupUsers>","imports":["java.util.List","com.zetapush.common.messages.remoting.GroupUsers"]},"desc":"Lists my owned groups, with details","notes":["Returns the whole list of groups owned by the current user, with their members"],"verbInfo":{"desc":"","deprecation":"Replaced by listDetailedOwnedGroups","notes":["Returns the whole list of groups owned by the current user, with their members"],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId9/allGroups","description":"Lists my owned groups, with details","verb":"allGroups","action":"LIST","deprecation":"Replaced by listDetailedOwnedGroups","notes":["Returns the whole list of groups owned by the current user, with their members"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ImpersonatedRequest","resolved":{"types":{"ImpersonatedRequest":{"type":"ImpersonatedRequest","javaClass":"com.zetapush.common.messages.remoting.ImpersonatedRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"responseInfo":{"type":"List[GroupUsers]","resolved":{"types":{"GroupUsers":{"type":"GroupUsers","javaClass":"com.zetapush.common.messages.remoting.GroupUsers","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[String]","name":"users","description":"User keys of the group members"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":false},{"name":"groups","type":{"typeName":"ImpersonatedRequest","imports":["com.zetapush.common.messages.remoting.ImpersonatedRequest"]},"returnType":{"typeName":"List<GroupInfo>","imports":["java.util.List","com.zetapush.common.messages.remoting.GroupInfo"]},"desc":"Lists my owned groups","notes":["Returns the whole list of groups owned by the current user"],"verbInfo":{"desc":"","deprecation":"Replaced by listOwnedGroups","notes":["Returns the whole list of groups owned by the current user"],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId9/groups","description":"Lists my owned groups","verb":"groups","action":"LIST","deprecation":"Replaced by listOwnedGroups","notes":["Returns the whole list of groups owned by the current user"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ImpersonatedRequest","resolved":{"types":{"ImpersonatedRequest":{"type":"ImpersonatedRequest","javaClass":"com.zetapush.common.messages.remoting.ImpersonatedRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"responseInfo":{"type":"List[GroupInfo]","resolved":{"types":{"GroupInfo":{"type":"GroupInfo","javaClass":"com.zetapush.common.messages.remoting.GroupInfo","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":false},{"name":"check","type":{"typeName":"GrantCheckRequest","imports":["com.zetapush.common.messages.remoting.GrantCheckRequest"]},"returnType":{"typeName":"GrantCheckResult","imports":["com.zetapush.common.messages.remoting.GrantCheckResult"]},"desc":"Checks an authorization","notes":["This API checks if the given user has the proper authorizations to perform the given action on the owner's resource.","If you give the same value for 'user' and 'owner', the check always passes."],"verbInfo":{"desc":"","deprecation":"","notes":["This API checks if the given user has the proper authorizations to perform the given action on the owner's resource.","If you give the same value for 'user' and 'owner', the check always passes."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId9/check","description":"Checks an authorization","verb":"check","notes":["This API checks if the given user has the proper authorizations to perform the given action on the owner's resource.","If you give the same value for 'user' and 'owner', the check always passes."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GrantCheckRequest","resolved":{"types":{"GrantCheckRequest":{"type":"GrantCheckRequest","javaClass":"com.zetapush.common.messages.remoting.GrantCheckRequest","fields":[{"type":"String","name":"action","description":"The action to check"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"The resource to check"},{"type":"String","name":"user","description":"The user needing authorization"}],"anyField":false}}}},"responseInfo":{"type":"GrantCheckResult","resolved":{"types":{"GrantCheckResult":{"type":"GrantCheckResult","javaClass":"com.zetapush.common.messages.remoting.GrantCheckResult","fields":[{"type":"boolean","name":"ok","description":"True when the check passed"},{"type":"GrantCheckRequest","name":"request","description":"The request"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false},"GrantCheckRequest":{"type":"GrantCheckRequest","javaClass":"com.zetapush.common.messages.remoting.GrantCheckRequest","fields":[{"type":"String","name":"action","description":"The action to check"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"The resource to check"},{"type":"String","name":"user","description":"The user needing authorization"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true},{"name":"exists","type":{"typeName":"GroupRelated","imports":["com.zetapush.common.messages.remoting.GroupRelated"]},"returnType":{"typeName":"GroupExistence","imports":["com.zetapush.common.messages.remoting.GroupExistence"]},"desc":"Tests for a group's existence","notes":["Returns whether a group exists or not."],"verbInfo":{"desc":"","deprecation":"","notes":["Returns whether a group exists or not."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId9/exists","description":"Tests for a group's existence","verb":"exists","action":"LIST","notes":["Returns whether a group exists or not."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupRelated","resolved":{"types":{"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"GroupExistence","resolved":{"types":{"GroupExistence":{"type":"GroupExistence","javaClass":"com.zetapush.common.messages.remoting.GroupExistence","fields":[{"type":"boolean","name":"exists","description":"Existence of the group"},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"traceable":true}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId9/grant","description":"Grants a right to a group","verb":"grant","action":"GRANT","notes":["The granting API does not do any check when storing permissions.","In particular when granting rights on a verb and resource of another API, the existence of said verb and resource is not checked."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"Grant","resolved":{"types":{"Grant":{"type":"Grant","javaClass":"com.zetapush.common.messages.remoting.Grant","fields":[{"type":"String","name":"action","description":"Action which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false}}}},"responseInfo":{"type":"Grant","resolved":{"types":{"Grant":{"type":"Grant","javaClass":"com.zetapush.common.messages.remoting.Grant","fields":[{"type":"String","name":"action","description":"Action which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"Grant","imports":["com.zetapush.common.messages.remoting.Grant"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/createGroup","description":"Creates a group","verb":"createGroup","action":"WRITE","notes":["Creates a group owned by the current user.","Group creation may fail if the group already exists."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupInfo","resolved":{"types":{"GroupInfo":{"type":"GroupInfo","javaClass":"com.zetapush.common.messages.remoting.GroupInfo","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"GroupInfo","resolved":{"types":{"GroupInfo":{"type":"GroupInfo","javaClass":"com.zetapush.common.messages.remoting.GroupInfo","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[{"code":"BAD_INPUT_DATA","desc":"Missing group id."},{"code":"BAD_NAME","desc":"Group id must be alphanumerical."}]},"returnedType":{"typeName":"GroupInfo","imports":["com.zetapush.common.messages.remoting.GroupInfo"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/listOwnedGroups","description":"Lists my owned groups","verb":"listOwnedGroups","action":"LIST","notes":["Returns the whole list of groups owned by the current user"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TraceablePaginatedImpersonatedRequest","resolved":{"types":{"TraceablePaginatedImpersonatedRequest":{"type":"TraceablePaginatedImpersonatedRequest","javaClass":"com.zetapush.common.messages.TraceablePaginatedImpersonatedRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"OwnedGroups","resolved":{"types":{"OwnedGroups":{"type":"OwnedGroups","javaClass":"com.zetapush.common.messages.remoting.OwnedGroups","fields":[{"type":"PageContent[GroupInfo]","name":"groups","description":"Groups owned by the user."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GroupInfo":{"type":"GroupInfo","javaClass":"com.zetapush.common.messages.remoting.GroupInfo","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"OwnedGroups","imports":["com.zetapush.common.messages.remoting.OwnedGroups"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/listDetailedOwnedGroups","description":"Lists my owned groups, with details","verb":"listDetailedOwnedGroups","action":"LIST","notes":["Returns the whole list of groups owned by the current user, with their members"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TraceablePaginatedImpersonatedRequest","resolved":{"types":{"TraceablePaginatedImpersonatedRequest":{"type":"TraceablePaginatedImpersonatedRequest","javaClass":"com.zetapush.common.messages.TraceablePaginatedImpersonatedRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"OwnedGroupsWithDetails","resolved":{"types":{"OwnedGroupsWithDetails":{"type":"OwnedGroupsWithDetails","javaClass":"com.zetapush.common.messages.remoting.OwnedGroupsWithDetails","fields":[{"type":"PageContent[GroupUsers]","name":"groups","description":"Detailed groups owned by the user."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GroupUsers":{"type":"GroupUsers","javaClass":"com.zetapush.common.messages.remoting.GroupUsers","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[String]","name":"users","description":"User keys of the group members"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"OwnedGroupsWithDetails","imports":["com.zetapush.common.messages.remoting.OwnedGroupsWithDetails"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/myGroups","description":"Lists the groups I am part of","verb":"myGroups","action":"LIST","deprecation":"Replaced by listJoinedGroups","notes":["Returns the whole list of groups the current user is part of.","Groups may be owned by anyone, including the current user."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ImpersonatedRequest","resolved":{"types":{"ImpersonatedRequest":{"type":"ImpersonatedRequest","javaClass":"com.zetapush.common.messages.remoting.ImpersonatedRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"responseInfo":{"type":"List[GroupInfo]","resolved":{"types":{"GroupInfo":{"type":"GroupInfo","javaClass":"com.zetapush.common.messages.remoting.GroupInfo","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"List<GroupInfo>","imports":["java.util.List","com.zetapush.common.messages.remoting.GroupInfo"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/listJoinedGroups","description":"Lists the groups I am part of","verb":"listJoinedGroups","action":"LIST","notes":["Returns the whole list of groups the current user is part of.","Groups may be owned by anyone, including the current user."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"TraceablePaginatedImpersonatedRequest","resolved":{"types":{"TraceablePaginatedImpersonatedRequest":{"type":"TraceablePaginatedImpersonatedRequest","javaClass":"com.zetapush.common.messages.TraceablePaginatedImpersonatedRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"JoinedGroups","resolved":{"types":{"JoinedGroups":{"type":"JoinedGroups","javaClass":"com.zetapush.common.messages.remoting.JoinedGroups","fields":[{"type":"PageContent[GroupInfo]","name":"groups","description":"Groups joined by the user."},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GroupInfo":{"type":"GroupInfo","javaClass":"com.zetapush.common.messages.remoting.GroupInfo","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"JoinedGroups","imports":["com.zetapush.common.messages.remoting.JoinedGroups"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/delGroup","description":"Removes a group","verb":"delGroup","action":"WRITE","notes":["Removes the given group owned by the current user or the given owner.","Also removes all grants to that group."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupRelated","resolved":{"types":{"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"GroupRelated","resolved":{"types":{"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"GroupRelated","imports":["com.zetapush.common.messages.remoting.GroupRelated"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/addMe","description":"Adds me to a group","verb":"addMe","action":"ADDMYSELF","notes":["Adds me (the caller) to a group.","This verb exists so that group owners may grant the right to join their groups without granting the right to add other users to those groups.","The 'user' field is implicitly set to the current user's key."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"UserGroup","resolved":{"types":{"UserGroup":{"type":"UserGroup","javaClass":"com.zetapush.common.messages.remoting.UserGroup","fields":[{"type":"String","name":"user","description":"The user's key (as in __userKey). \nCurrent user's key","serverGenerated":true},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"responseInfo":{"type":"UserGroup","resolved":{"types":{"UserGroup":{"type":"UserGroup","javaClass":"com.zetapush.common.messages.remoting.UserGroup","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"user","description":"The user's key (as in __userKey)"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"UserGroup","imports":["com.zetapush.common.messages.remoting.UserGroup"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/memberOf","description":"Tests membership","verb":"memberOf","notes":["Tests whether I (the caller) am a member of the given group.","This verb exists so that users can determine if they are part of a group without being granted particular rights.","The 'user' field is implicitly set to the current user's key."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"UserMembership","resolved":{"types":{"UserMembership":{"type":"UserMembership","javaClass":"com.zetapush.common.messages.remoting.UserMembership","fields":[{"type":"String","name":"user","description":"The user's key (as in __userKey). \nCurrent user's key","serverGenerated":true},{"type":"boolean","name":"hardFail","description":"True if lack of effective membership should be treated as an error. False to return the information as a boolean in the response."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"responseInfo":{"type":"UserGroupMembership","resolved":{"types":{"UserGroupMembership":{"type":"UserGroupMembership","javaClass":"com.zetapush.common.messages.remoting.UserGroupMembership","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"boolean","name":"member","description":"Whether the user is member of the group"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"user","description":"The user's key (as in __userKey)"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"UserGroupMembership","imports":["com.zetapush.common.messages.remoting.UserGroupMembership"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/addUsers","description":"Adds users to a group","verb":"addUsers","action":"WRITE","notes":["Users are processed in the given order","In case of failure in the middle of a user list, this verb may have succeeded to add the first users, but will not continue processing the end of the list."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupUsers","resolved":{"types":{"GroupUsers":{"type":"GroupUsers","javaClass":"com.zetapush.common.messages.remoting.GroupUsers","fields":[{"type":"List[String]","name":"users","description":"User keys of the group members"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user. \n","serverGenerated":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"otherOutputs":[{"type":"UserGroup","resolved":{"types":{"UserGroup":{"type":"UserGroup","javaClass":"com.zetapush.common.messages.remoting.UserGroup","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"user","description":"The user's key (as in __userKey)"}],"anyField":false}}},"channel":"addUser","target":"","description":"","variableChannelName":false,"notes":[],"resolvedType":{"typeName":"UserGroup","imports":["com.zetapush.common.messages.remoting.UserGroup"]}}],"errors":[]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/delUsers","description":"Removes users from a group","verb":"delUsers","action":"WRITE","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupUsers","resolved":{"types":{"GroupUsers":{"type":"GroupUsers","javaClass":"com.zetapush.common.messages.remoting.GroupUsers","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[String]","name":"users","description":"User keys of the group members"}],"anyField":false}}}},"errors":[]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/mgrant","description":"Grants rights to a group","verb":"mgrant","action":"GRANT","notes":["Grant several rights at once."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"Grants","resolved":{"types":{"Grants":{"type":"Grants","javaClass":"com.zetapush.common.messages.remoting.Grants","fields":[{"type":"List[String]","name":"actions","description":"Actions which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false}}}},"responseInfo":{"type":"Grants","resolved":{"types":{"Grants":{"type":"Grants","javaClass":"com.zetapush.common.messages.remoting.Grants","fields":[{"type":"List[String]","name":"actions","description":"Actions which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"Grants","imports":["com.zetapush.common.messages.remoting.Grants"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/mrevoke","description":"Revokes rights for a group","verb":"mrevoke","action":"GRANT","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"Grants","resolved":{"types":{"Grants":{"type":"Grants","javaClass":"com.zetapush.common.messages.remoting.Grants","fields":[{"type":"List[String]","name":"actions","description":"Actions which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false}}}},"responseInfo":{"type":"Grants","resolved":{"types":{"Grants":{"type":"Grants","javaClass":"com.zetapush.common.messages.remoting.Grants","fields":[{"type":"List[String]","name":"actions","description":"Actions which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"Grants","imports":["com.zetapush.common.messages.remoting.Grants"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/listGrants","description":"Lists rights for a group","verb":"listGrants","action":"LIST","deprecation":"Use listGroupGrants","notes":["This API lists explicitly configured rights.","Effective rights include configured rights, implicit rights and inherited rights."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupRelated","resolved":{"types":{"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"GrantList","resolved":{"types":{"GrantList":{"type":"GrantList","javaClass":"com.zetapush.common.messages.remoting.GrantList","fields":[{"type":"List[GrantListItem]","name":"grants","description":"List of granted rights"},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GrantListItem":{"type":"GrantListItem","javaClass":"com.zetapush.common.messages.remoting.GrantListItem","fields":[{"type":"String","name":"action","description":"Configured authorized action"},{"type":"String","name":"resource","description":"Configured authorized resource"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"GrantList","imports":["com.zetapush.common.messages.remoting.GrantList"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/listGroupGrants","description":"Lists rights for a group","verb":"listGroupGrants","action":"LIST","notes":["This API lists explicitly configured rights.","Effective rights include configured rights, implicit rights and inherited rights."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupRelatedAndPaged","resolved":{"types":{"GroupRelatedAndPaged":{"type":"GroupRelatedAndPaged","javaClass":"com.zetapush.common.messages.remoting.GroupRelatedAndPaged","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"PagedGrantList","resolved":{"types":{"PagedGrantList":{"type":"PagedGrantList","javaClass":"com.zetapush.common.messages.remoting.PagedGrantList","fields":[{"type":"PageContent[GrantListItem]","name":"grants","description":"List of granted rights"},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GrantListItem":{"type":"GrantListItem","javaClass":"com.zetapush.common.messages.remoting.GrantListItem","fields":[{"type":"String","name":"action","description":"Configured authorized action"},{"type":"String","name":"resource","description":"Configured authorized resource"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"PagedGrantList","imports":["com.zetapush.common.messages.remoting.PagedGrantList"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/listPresences","description":"Lists presences for a group","verb":"listPresences","action":"LIST","deprecation":"Use listGroupPresences","notes":["Returns the list of members of the given groups, along with their actual and current presence on the zetapush server.","The current implementation does not include information about the particular devices users are connected with.","If a user is connected twice with two different devices, two identical entries will be returned."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupRelated","resolved":{"types":{"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"GroupPresence","resolved":{"types":{"GroupPresence":{"type":"GroupPresence","javaClass":"com.zetapush.common.messages.presence.GroupPresence","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"List[Presence]","name":"presences","description":"List of group users, with their presence information."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"OwnerResource":{"type":"OwnerResource","javaClass":"com.zetapush.common.messages.remoting.OwnerResource","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false},"Presence":{"type":"Presence","javaClass":"com.zetapush.common.messages.presence.Presence","fields":[{"type":"GroupRelated","name":"group","description":"Group information"},{"type":"String","name":"presence","description":"Presence status. OFF or ON"},{"type":"OwnerResource","name":"user","description":"User information"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"GroupPresence","imports":["com.zetapush.common.messages.presence.GroupPresence"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/listGroupPresences","description":"Lists presences for a group","verb":"listGroupPresences","action":"LIST","notes":["Returns the list of members of the given groups, along with their actual and current presence on the zetapush server.","The current implementation does not include information about the particular devices users are connected with.","If a user is connected twice with two different devices, two identical entries will be returned."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupRelatedAndPaged","resolved":{"types":{"GroupRelatedAndPaged":{"type":"GroupRelatedAndPaged","javaClass":"com.zetapush.common.messages.remoting.GroupRelatedAndPaged","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"Pagination","name":"page","description":"Pagination information"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false}}}},"responseInfo":{"type":"PagedGroupPresence","resolved":{"types":{"PagedGroupPresence":{"type":"PagedGroupPresence","javaClass":"com.zetapush.common.messages.presence.PagedGroupPresence","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"PageContent[Presence]","name":"presences","description":"List of group users, with their presence information."},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false},"OwnerResource":{"type":"OwnerResource","javaClass":"com.zetapush.common.messages.remoting.OwnerResource","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"resource","description":"Optional resource name, used to distinguish between two sessions of the same user on different devices. A given device SHOULD provide a resource name, and SHOULD always use the same resource name (it needs to be persisted by the client code)"}],"anyField":false},"PageContent":{"type":"PageContent","fields":[{"type":"List","name":"content","description":"Content"},{"type":"Pagination","name":"page","description":"Pagination information"}],"anyField":false},"PageDirection":{"type":"PageDirection","javaClass":"com.zetapush.common.messages.PageDirection","enumValues":[{"name":"DESC","description":"Descending order"},{"name":"ASC","description":"Ascending order"}],"anyField":false},"Pagination":{"type":"Pagination","javaClass":"com.zetapush.common.messages.Pagination","fields":[{"type":"PageDirection","name":"direction","description":"Sort direction. Default is ASC when not specified."},{"type":"int","name":"pageNumber","description":"Page number (zero-based)"},{"type":"int","name":"pageSize","description":"Page size (minimum 1)"}],"anyField":false},"Presence":{"type":"Presence","javaClass":"com.zetapush.common.messages.presence.Presence","fields":[{"type":"GroupRelated","name":"group","description":"Group information"},{"type":"String","name":"presence","description":"Presence status. OFF or ON"},{"type":"OwnerResource","name":"user","description":"User information"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"PagedGroupPresence","imports":["com.zetapush.common.messages.presence.PagedGroupPresence"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/addUser","description":"Adds a user to a group","verb":"addUser","action":"WRITE","notes":["Adds the given user to the given group.","Addition may fail if the given group does not already exist."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"UserGroup","resolved":{"types":{"UserGroup":{"type":"UserGroup","javaClass":"com.zetapush.common.messages.remoting.UserGroup","fields":[{"type":"String","name":"user","description":"The user's key (as in __userKey). \n","required":true,"serverGenerated":false},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"responseInfo":{"type":"UserGroup","resolved":{"types":{"UserGroup":{"type":"UserGroup","javaClass":"com.zetapush.common.messages.remoting.UserGroup","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"user","description":"The user's key (as in __userKey)"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"UserGroup","imports":["com.zetapush.common.messages.remoting.UserGroup"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/delUser","description":"Removes a user from a group","verb":"delUser","action":"WRITE","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"UserGroup","resolved":{"types":{"UserGroup":{"type":"UserGroup","javaClass":"com.zetapush.common.messages.remoting.UserGroup","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"user","description":"The user's key (as in __userKey)"}],"anyField":false}}}},"responseInfo":{"type":"UserGroup","resolved":{"types":{"UserGroup":{"type":"UserGroup","javaClass":"com.zetapush.common.messages.remoting.UserGroup","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"user","description":"The user's key (as in __userKey)"}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"UserGroup","imports":["com.zetapush.common.messages.remoting.UserGroup"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/groupUsers","description":"Lists the group users","verb":"groupUsers","action":"LIST","notes":["Returns the whole list of users configured inside the given group."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupRelated","resolved":{"types":{"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"GroupUsers","resolved":{"types":{"GroupUsers":{"type":"GroupUsers","javaClass":"com.zetapush.common.messages.remoting.GroupUsers","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[String]","name":"users","description":"User keys of the group members"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"GroupUsers","imports":["com.zetapush.common.messages.remoting.GroupUsers"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/revoke","description":"Revokes a right for a group","verb":"revoke","action":"GRANT","serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"Grant","resolved":{"types":{"Grant":{"type":"Grant","javaClass":"com.zetapush.common.messages.remoting.Grant","fields":[{"type":"String","name":"action","description":"Action which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false}}}},"responseInfo":{"type":"Grant","resolved":{"types":{"Grant":{"type":"Grant","javaClass":"com.zetapush.common.messages.remoting.Grant","fields":[{"type":"String","name":"action","description":"Action which will be authorized. For built-in API verbs, it is often the verb itself. You can use the wildcard '*'","required":true},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"Resource on which the grant applies. For API defined resources, it often has the syntax deploymentId:owner:preciseResource. For example to give access to a gda table, it may look like 'gda_0:wshwWSDOJSD:myTable' , gda_0 being the gda deploymentId, wshwWSDOJSD the data owner, and myTable the table to be shared. For grants on user devices, it can match the resource field used during authentication. You can use the wildcard '*'","required":true}],"anyField":false}}},"scope":"USER","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"Grant","imports":["com.zetapush.common.messages.remoting.Grant"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/allGroups","description":"Lists my owned groups, with details","verb":"allGroups","action":"LIST","deprecation":"Replaced by listDetailedOwnedGroups","notes":["Returns the whole list of groups owned by the current user, with their members"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ImpersonatedRequest","resolved":{"types":{"ImpersonatedRequest":{"type":"ImpersonatedRequest","javaClass":"com.zetapush.common.messages.remoting.ImpersonatedRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"responseInfo":{"type":"List[GroupUsers]","resolved":{"types":{"GroupUsers":{"type":"GroupUsers","javaClass":"com.zetapush.common.messages.remoting.GroupUsers","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"List[String]","name":"users","description":"User keys of the group members"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"List<GroupUsers>","imports":["java.util.List","com.zetapush.common.messages.remoting.GroupUsers"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/groups","description":"Lists my owned groups","verb":"groups","action":"LIST","deprecation":"Replaced by listOwnedGroups","notes":["Returns the whole list of groups owned by the current user"],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"ImpersonatedRequest","resolved":{"types":{"ImpersonatedRequest":{"type":"ImpersonatedRequest","javaClass":"com.zetapush.common.messages.remoting.ImpersonatedRequest","fields":[{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"}],"anyField":false}}}},"responseInfo":{"type":"List[GroupInfo]","resolved":{"types":{"GroupInfo":{"type":"GroupInfo","javaClass":"com.zetapush.common.messages.remoting.GroupInfo","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"List<GroupInfo>","imports":["java.util.List","com.zetapush.common.messages.remoting.GroupInfo"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/check","description":"Checks an authorization","verb":"check","notes":["This API checks if the given user has the proper authorizations to perform the given action on the owner's resource.","If you give the same value for 'user' and 'owner', the check always passes."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GrantCheckRequest","resolved":{"types":{"GrantCheckRequest":{"type":"GrantCheckRequest","javaClass":"com.zetapush.common.messages.remoting.GrantCheckRequest","fields":[{"type":"String","name":"action","description":"The action to check"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"The resource to check"},{"type":"String","name":"user","description":"The user needing authorization"}],"anyField":false}}}},"responseInfo":{"type":"GrantCheckResult","resolved":{"types":{"GrantCheckResult":{"type":"GrantCheckResult","javaClass":"com.zetapush.common.messages.remoting.GrantCheckResult","fields":[{"type":"boolean","name":"ok","description":"True when the check passed"},{"type":"GrantCheckRequest","name":"request","description":"The request"},{"type":"String","name":"requestId","description":"User field for traceability of requests. The value was generated by the client requester."}],"anyField":false},"GrantCheckRequest":{"type":"GrantCheckRequest","javaClass":"com.zetapush.common.messages.remoting.GrantCheckRequest","fields":[{"type":"String","name":"action","description":"The action to check"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."},{"type":"String","name":"resource","description":"The resource to check"},{"type":"String","name":"user","description":"The user needing authorization"}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"GrantCheckResult","imports":["com.zetapush.common.messages.remoting.GrantCheckResult"]}},{"listenerInfo":{"channel":"/service/BU_ID/depId9/exists","description":"Tests for a group's existence","verb":"exists","action":"LIST","notes":["Returns whether a group exists or not."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"GroupRelated","resolved":{"types":{"GroupRelated":{"type":"GroupRelated","javaClass":"com.zetapush.common.messages.remoting.GroupRelated","fields":[{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}}},"responseInfo":{"type":"GroupExistence","resolved":{"types":{"GroupExistence":{"type":"GroupExistence","javaClass":"com.zetapush.common.messages.remoting.GroupExistence","fields":[{"type":"boolean","name":"exists","description":"Existence of the group"},{"type":"String","name":"group","description":"Group id. Must be alphanumerical. You MAY use the wildcard '*' when granting rights.","required":true},{"type":"String","name":"groupName","description":"Group name, as displayed to the user"},{"type":"String","name":"owner","description":"Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user"},{"type":"String","name":"requestId","description":"User field for traceability of requests. Synchronous SDK APIs use this field for you."}],"anyField":false}}},"scope":"SESSION","scopeDetail":""},"errors":[]},"returnedType":{"typeName":"GroupExistence","imports":["com.zetapush.common.messages.remoting.GroupExistence"]}}]},{"clazz":"com.zetapush.str.services.messaging.MessagingService","name":"Messaging","itemId":"messaging","desc":"Messaging service","notes":["Simple and flexible user-to-user or user-to-group messaging service."],"verbs":[{"name":"send","type":{"typeName":"Message","imports":["com.zetapush.common.messages.messaging.Message"]},"desc":"Sends a message to a target","notes":["Sends the given message to the specified target on the given (optional) channel.","The administratively given default channel name is used when none is provided in the message itself."],"verbInfo":{"desc":"","deprecation":"","notes":["Sends the given message to the specified target on the given (optional) channel.","The administratively given default channel name is used when none is provided in the message itself."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId4/send","description":"Sends a message to a target","verb":"send","notes":["Sends the given message to the specified target on the given (optional) channel.","The administratively given default channel name is used when none is provided in the message itself."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"Message","resolved":{"types":{"Message":{"type":"Message","javaClass":"com.zetapush.common.messages.messaging.Message","fields":[{"type":"ListOrSingle[String]","name":"target","description":"Target user or group. Can be either a string, an array of string or an object that contains an array of string. The 'target' property of the output message will have exactly the same form. \nTarget user or group, in the form userId or groupDeploymentId:owner:group.","required":true,"serverGenerated":false},{"type":"String","name":"channel","description":"Optional (alphanumeric) channel name"},{"type":"String","name":"source","description":"User key of the message sender. \nKey of the sending user","serverGenerated":true},{"type":"Map[String,Object]","name":"data","description":"Data to be sent. \nMessage payload. object with a free format.","required":true,"serverGenerated":false}],"anyField":false},"ListOrSingle":{"type":"ListOrSingle","javaClass":"com.zetapush.common.messages.ListOrSingle","fields":[{"type":"List[String]","name":"values","description":"The list of values"}],"anyField":false}}}},"otherOutputs":[{"type":"Message","resolved":{"types":{"Message":{"type":"Message","javaClass":"com.zetapush.common.messages.messaging.Message","fields":[{"type":"String","name":"channel","description":"Optional (alphanumeric) channel name"},{"type":"Map[String,Object]","name":"data","description":"Data to be sent","required":true},{"type":"String","name":"source","description":"User key of the message sender"},{"type":"ListOrSingle[String]","name":"target","description":"Target user or group. Can be either a string, an array of string or an object that contains an array of string. The 'target' property of the output message will have exactly the same form.","required":true}],"anyField":false},"ListOrSingle":{"type":"ListOrSingle","javaClass":"com.zetapush.common.messages.ListOrSingle","fields":[{"type":"List[String]","name":"values","description":"The list of values"}],"anyField":false}}},"channel":"[input.channel] or [messaging.return.channel]","target":"'target' field of the message","description":"","variableChannelName":true,"notes":[],"resolvedType":{"typeName":"Message","imports":["com.zetapush.common.messages.messaging.Message"]}}],"errors":[]},"traceable":false}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId4/send","description":"Sends a message to a target","verb":"send","notes":["Sends the given message to the specified target on the given (optional) channel.","The administratively given default channel name is used when none is provided in the message itself."],"serverOnly":false,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"Message","resolved":{"types":{"Message":{"type":"Message","javaClass":"com.zetapush.common.messages.messaging.Message","fields":[{"type":"ListOrSingle[String]","name":"target","description":"Target user or group. Can be either a string, an array of string or an object that contains an array of string. The 'target' property of the output message will have exactly the same form. \nTarget user or group, in the form userId or groupDeploymentId:owner:group.","required":true,"serverGenerated":false},{"type":"String","name":"channel","description":"Optional (alphanumeric) channel name"},{"type":"String","name":"source","description":"User key of the message sender. \nKey of the sending user","serverGenerated":true},{"type":"Map[String,Object]","name":"data","description":"Data to be sent. \nMessage payload. object with a free format.","required":true,"serverGenerated":false}],"anyField":false},"ListOrSingle":{"type":"ListOrSingle","javaClass":"com.zetapush.common.messages.ListOrSingle","fields":[{"type":"List[String]","name":"values","description":"The list of values"}],"anyField":false}}}},"otherOutputs":[{"type":"Message","resolved":{"types":{"Message":{"type":"Message","javaClass":"com.zetapush.common.messages.messaging.Message","fields":[{"type":"String","name":"channel","description":"Optional (alphanumeric) channel name"},{"type":"Map[String,Object]","name":"data","description":"Data to be sent","required":true},{"type":"String","name":"source","description":"User key of the message sender"},{"type":"ListOrSingle[String]","name":"target","description":"Target user or group. Can be either a string, an array of string or an object that contains an array of string. The 'target' property of the output message will have exactly the same form.","required":true}],"anyField":false},"ListOrSingle":{"type":"ListOrSingle","javaClass":"com.zetapush.common.messages.ListOrSingle","fields":[{"type":"List[String]","name":"values","description":"The list of values"}],"anyField":false}}},"channel":"[input.channel] or [messaging.return.channel]","target":"'target' field of the message","description":"","variableChannelName":true,"notes":[],"resolvedType":{"typeName":"Message","imports":["com.zetapush.common.messages.messaging.Message"]}}],"errors":[]}}]},{"clazz":"com.zetapush.str.services.sms.SmsService","name":"Sms_ovh","itemId":"sms_ovh","desc":"SMS service","notes":["User API for SMS."],"verbs":[{"name":"send","type":{"typeName":"SmsMessage","imports":["com.zetapush.common.messages.sms.SmsMessage"]},"desc":"Sends an SMS","notes":["Sends the given message to the given recipients."],"verbInfo":{"desc":"Sends an SMS","deprecation":"","notes":["Sends the given message to the given recipients."],"relatedClasses":[],"errors":[],"params":[],"loggable":true},"listenerInfo":{"channel":"/service/BU_ID/depId23/send","description":"Sends an SMS","verb":"send","notes":["Sends the given message to the given recipients."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"SmsMessage","resolved":{"types":{"SmsMessage":{"type":"SmsMessage","javaClass":"com.zetapush.common.messages.sms.SmsMessage","fields":[{"type":"String","name":"message","description":"Text message. Standard restrictions for text messages apply"},{"type":"List[String]","name":"receivers","description":"List of recipients"},{"type":"String","name":"sender","description":"Sender name"}],"anyField":false}}}},"errors":[]},"traceable":false}],"listeners":[{"listenerInfo":{"channel":"/service/BU_ID/depId23/send","description":"Sends an SMS","verb":"send","notes":["Sends the given message to the given recipients."],"serverOnly":true,"clientOnly":false,"slaveDisabled":false,"paramInfo":{"type":"SmsMessage","resolved":{"types":{"SmsMessage":{"type":"SmsMessage","javaClass":"com.zetapush.common.messages.sms.SmsMessage","fields":[{"type":"String","name":"message","description":"Text message. Standard restrictions for text messages apply"},{"type":"List[String]","name":"receivers","description":"List of recipients"},{"type":"String","name":"sender","description":"Sender name"}],"anyField":false}}}},"errors":[]}}]}],"allFunctions":[{"prefix":"str","name":"bytes","description":"Returns the byte array UTF8 representation of the given string","paramDescs":[{"name":"string argument","variadic":false}],"visible":true},{"prefix":"math","name":"pow","description":"Returns the value of the first argument raised to the power of the second argument","paramDescs":[{"name":"floating point argument","variadic":false},{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"time","name":"doy","description":"Returns the day of year (1 to 365-6) for the given time","paramDescs":[{"name":"time, as milliseconds from the epoch, or as returned by time:parse","variadic":false}],"visible":true},{"prefix":"math","name":"min","description":"Returns the minimum of two integers","paramDescs":[{"name":"integer argument","variadic":false},{"name":"integer argument","variadic":false}],"visible":true},{"prefix":"list","name":"list","description":"Creates a list","paramDescs":[],"visible":true},{"prefix":"time","name":"format","description":"Formats the given time with the given pattern string. The pattern supports the following characters : <table>\n     <tr bgcolor=\"#ccccff\">\n         <th align=left>Letter\n         <th align=left>Date or Time Component\n         <th align=left>Examples\n     <tr>\n         <td><code>G</code>\n         <td>Era designator\n         <td><code>AD</code>\n     <tr bgcolor=\"#eeeeff\">\n         <td><code>y</code>\n         <td>Year\n         <td><code>1996</code>; <code>96</code>\n     <tr>\n         <td><code>Y</code>\n         <td>Week year\n         <td><code>2009</code>; <code>09</code>\n     <tr bgcolor=\"#eeeeff\">\n         <td><code>M</code>\n         <td>Month in year\n         <td><code>July</code>; <code>Jul</code>; <code>07</code>\n     <tr>\n         <td><code>w</code>\n         <td>Week in year\n         <td><code>27</code>\n     <tr bgcolor=\"#eeeeff\">\n         <td><code>W</code>\n         <td>Week in month\n         <td><code>2</code>\n     <tr>\n         <td><code>D</code>\n         <td>Day in year\n         <td><code>189</code>\n     <tr bgcolor=\"#eeeeff\">\n         <td><code>d</code>\n         <td>Day in month\n         <td><code>10</code>\n     <tr>\n         <td><code>F</code>\n         <td>Day of week in month\n         <td><code>2</code>\n     <tr bgcolor=\"#eeeeff\">\n         <td><code>E</code>\n         <td>Day name in week\n         <td><code>Tuesday</code>; <code>Tue</code>\n     <tr>\n         <td><code>u</code>\n         <td>Day number of week (1 = Monday, ..., 7 = Sunday)\n         <td><code>1</code>\n     <tr bgcolor=\"#eeeeff\">\n         <td><code>a</code>\n         <td>Am/pm marker\n         <td><code>PM</code>\n     <tr>\n         <td><code>H</code>\n         <td>Hour in day (0-23)\n         <td><code>0</code>\n     <tr bgcolor=\"#eeeeff\">\n         <td><code>k</code>\n         <td>Hour in day (1-24)\n         <td><code>24</code>\n     <tr>\n         <td><code>K</code>\n         <td>Hour in am/pm (0-11)\n         <td><code>0</code>\n     <tr bgcolor=\"#eeeeff\">\n         <td><code>h</code>\n         <td>Hour in am/pm (1-12)\n         <td><code>12</code>\n     <tr>\n         <td><code>m</code>\n         <td>Minute in hour\n         <td><code>30</code>\n     <tr bgcolor=\"#eeeeff\">\n         <td><code>s</code>\n         <td>Second in minute\n         <td><code>55</code>\n     <tr>\n         <td><code>S</code>\n         <td>Millisecond\n         <td><code>978</code>\n     <tr bgcolor=\"#eeeeff\">\n         <td><code>z</code>\n         <td>Time zone\n         <td><code>Pacific Standard Time</code>; <code>PST</code>; <code>GMT-08:00</code>\n     <tr>\n         <td><code>Z</code>\n         <td>Time zone\n         <td><code>-0800</code>\n     <tr bgcolor=\"#eeeeff\">\n         <td><code>X</code>\n         <td>Time zone\n         <td><code>-08</code>; <code>-0800</code>;  <code>-08:00</code>\n </table>","paramDescs":[{"name":"time, as milliseconds from the epoch, or as returned by time:parse","variadic":false},{"name":"Time format pattern","variadic":false}],"visible":true},{"prefix":"coll","name":"addAll","description":"Adds the contents of the second (or more) collection to the first collection, and returns the first collection.","paramDescs":[{"name":"Target collection","variadic":false},{"name":"Collection(s) of elements to add","variadic":true}],"visible":true},{"prefix":"obj","name":"create","description":"Creates an object from values.","paramDescs":[{"name":"Fully qualified type name","variadic":false},{"name":"Whether to validate","variadic":false},{"name":"Constructor parameters","variadic":false}],"visible":false},{"prefix":"list","name":"last","description":"Returns the last element of a list","paramDescs":[{"name":"list of values","variadic":false}],"visible":true},{"prefix":"str","name":"substr","description":"Returns a substring of a string","paramDescs":[{"name":"containing string","variadic":false},{"name":"starting position(inclusive)","variadic":false},{"name":"ending position(exclusive)","variadic":false}],"visible":true},{"prefix":"time","name":"before","description":"Returns whether the first date is before the second","paramDescs":[{"name":"time, as milliseconds from the epoch, or as returned by time:parse","variadic":false},{"name":"time, as milliseconds from the epoch, or as returned by time:parse","variadic":false}],"visible":true},{"prefix":"str","name":"decodeUrl","description":"URL decodes a UTF8 string","paramDescs":[{"name":"string argument","variadic":false}],"visible":true},{"prefix":"str","name":"lower","description":"Returns the given string converted to lower case with a server-specific default locale","paramDescs":[{"name":"string argument","variadic":false}],"visible":true},{"prefix":"math","name":"max","description":"Returns the maximum of two integers","paramDescs":[{"name":"integer argument","variadic":false},{"name":"integer argument","variadic":false}],"visible":true},{"prefix":"time","name":"parseUTC","description":"Parses the given string (as formatted by time:fmt) and returns an object suitable for use by other time manipulation functions. Time is UTC.","paramDescs":[{"name":"String representation of the time","variadic":false}],"visible":true},{"prefix":"fmt","name":"pad","description":"Formats the given number with the given number of digits","paramDescs":[{"name":"number to format","variadic":false},{"name":"number of integer digits","variadic":false},{"name":"number of fraction digits","variadic":false},{"name":"decimal point","variadic":false}],"visible":true},{"prefix":"obj","name":"copy","description":"Copies an object from a value (copy constructor).","paramDescs":[{"name":"Fully qualified type name","variadic":false},{"name":"Whether to validate","variadic":false},{"name":"Constructor parameter","variadic":false}],"visible":false},{"prefix":"stat","name":"product","description":"Returns the product of a list of values","paramDescs":[{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"str","name":"b64decodeWithOptions","description":"Decodes the given base64 string to a byte array","paramDescs":[{"name":"string argument","variadic":false},{"name":"The wanted RFC compliance, to be chosen amongst [RFC4648, RFC4648_URLSAFE, RFC2045]","variadic":false}],"visible":true},{"prefix":"coll","name":"size","description":"Returns the size of the given collection","paramDescs":[{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"math","name":"acos","description":"Returns the arc cosine of a value","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"str","name":"b64decode","description":"Decodes the given base64 string to a byte array","paramDescs":[{"name":"string argument","variadic":false}],"visible":true},{"prefix":"coll","name":"sset","description":"Returns a sorted set based on the given collection","paramDescs":[{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"csv","name":"parse","description":"Parses input as CSV and returns an iterable list of rows (arrays or maps, depending on whether you specified column names). You may specify a list of column names.<br>The input can be a string or a file handle (as in the handle field of the result of a call to zpfs_hdfs.open)","paramDescs":[{"name":"CSV input (string or file)","variadic":false},{"name":"column specifications : array of objects with required 'name' and optional 'type' ('string','number','boolean', the default being 'string') .<br> You can use null to obtain an array, an empty list to obtain a map with automatically deduce columns from the first line.","variadic":false},{"name":"field separator (';' and ',' are usual values)","variadic":false}],"visible":true},{"prefix":"time","name":"hod","description":"Returns the hour of day (0 to 23) for the given time","paramDescs":[{"name":"time, as milliseconds from the epoch, or as returned by time:parse","variadic":false}],"visible":true},{"prefix":"list","name":"remove","description":"Removes the given element of a list","paramDescs":[{"name":"position (0-based)","variadic":false},{"name":"list of values","variadic":false}],"visible":true},{"prefix":"coll","name":"compare","description":"Returns true if the given collections contain the same elements in the same order. Elements are compared by value, which is well defined for values of some types (integers or strings), but undefined in the general case (in particular, comparing floating point numbers or structures is undefined)","paramDescs":[{"name":"collection of values","variadic":false},{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"time","name":"dom","description":"Returns the day of month (1 to 31) for the given time","paramDescs":[{"name":"time, as milliseconds from the epoch, or as returned by time:parse","variadic":false}],"visible":true},{"prefix":"coll","name":"contains","description":"Returns true if the given collection contains the given element. Elements are compared by value, which is well defined for values of some types (integers or strings), but undefined in the general case (in particular, comparing floating point numbers or structures is undefined)","paramDescs":[{"name":"collection of values","variadic":false},{"name":"element","variadic":false}],"visible":true},{"prefix":"str","name":"rnd36","description":"Returns a random String with base-36 characters","paramDescs":[{"name":"number of bytes of entropy","variadic":false}],"visible":true},{"prefix":"time","name":"dow","description":"Returns the day of week (1 to 7 for monday to sunday) for the given time","paramDescs":[{"name":"time, as milliseconds from the epoch, or as returned by time:parse","variadic":false}],"visible":true},{"prefix":"stat","name":"max","description":"Returns the maximum of a list of values","paramDescs":[{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"time","name":"fmt","description":"Formats the given time with the given symbolic string format. The time zone is the one used when first obtaining the given time","paramDescs":[{"name":"time, as milliseconds from the epoch, or as returned by time:parse","variadic":false},{"name":"format. allowed values are [Y, YM, YMD, YMDH, YMDHM, YMDHMS, YMDHMSM, YMDHMSN]","variadic":false}],"visible":true},{"prefix":"obj","name":"sum","description":"Adds two objects. The result is type dependent. Arguments are never modified as a result of the call.","paramDescs":[{"name":"object 1","variadic":false},{"name":"object 2","variadic":false}],"visible":false},{"prefix":"time","name":"zfmt","description":"Formats the given time with the given symbolic string format and the given time zone","paramDescs":[{"name":"time, as milliseconds from the epoch, or as returned by time:parse","variadic":false},{"name":"format. allowed values are [Y, YM, YMD, YMDH, YMDHM, YMDHMS, YMDHMSM, YMDHMSN]","variadic":false},{"name":"Time Zone (format : GMT+hh:mm)","variadic":false}],"visible":true},{"prefix":"math","name":"atan","description":"Returns the arc tangent of a value","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"str","name":"queryString","description":"URL encodes a query string. Does NOT prefix the result with '?' ","paramDescs":[{"name":"Map of parameters","variadic":false}],"visible":true},{"prefix":"str","name":"b64encode","description":"Encodes the given string to base64","paramDescs":[{"name":"string argument or byte array","variadic":false}],"visible":true},{"prefix":"stat","name":"min","description":"Returns the minimum of a list of values","paramDescs":[{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"math","name":"cosh","description":"Returns the hyperbolic cosine of an angle","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"str","name":"indexOf","description":"Returns the index within this string of the first occurrence of the specified substring. Returns -1 if not found","paramDescs":[{"name":"containing string","variadic":false},{"name":"test string","variadic":false}],"visible":true},{"prefix":"time","name":"add","description":"Adds an amount of the given type to the given time and returns the result as an opaque time object suitable for use by other time manipulation functions. The input parameter is not modified.","paramDescs":[{"name":"time, as milliseconds from the epoch, or as returned by time:parse","variadic":false},{"name":"Amount of time units to be added","variadic":false},{"name":"Time unit. Allowed values are [NANOS, MICROS, MILLIS, SECONDS, MINUTES, HOURS, HALFDAYS, DAYS, WEEKS, MONTHS, YEARS, DECADES, CENTURIES, MILLENNIA, ERAS, FOREVER]","variadic":false}],"visible":true},{"prefix":"obj","name":"map","description":"Creates an map from elements : key1,value1,key2,value2...","paramDescs":[{"name":"Elements","variadic":false}],"visible":false},{"prefix":"stat","name":"sum","description":"Returns the sum of a list of values","paramDescs":[{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"str","name":"split","description":"Splits a string around matches of the given single character","paramDescs":[{"name":"containing string","variadic":false},{"name":"separator","variadic":false}],"visible":true},{"prefix":"json","name":"stringify","description":"Generates JSON from an object.","paramDescs":[{"name":"Input object","variadic":false}],"visible":true},{"prefix":"str","name":"rnd64","description":"Returns a random String with URL-friendly base-64 characters","paramDescs":[{"name":"number of bytes of entropy","variadic":false}],"visible":true},{"prefix":"obj","name":"pp","description":"Adds 1 to the argument. The result is type dependent. The second argument is never modified. Depending on context, the first argument may be modified.","paramDescs":[{"name":"object 1","variadic":false},{"name":"object 2","variadic":false}],"visible":false},{"prefix":"math","name":"sinh","description":"Returns the hyperbolic sine of an angle","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"stat","name":"sumSqr","description":"Returns the sum of the squares of a list of values","paramDescs":[{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"stat","name":"mean","description":"Returns the arithmetic mean of a list of values","paramDescs":[{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"time","name":"toEpoch","description":"Returns the milliseconds from the epoch","paramDescs":[{"name":"time, as milliseconds from the epoch, or as returned by time:parse","variadic":false}],"visible":true},{"prefix":"obj","name":"minus","description":"Substracts the second parameter value from the value of the first and returns the result. Arguments are never modified as a result of the call. The '-=' assignment operator makes uses of this function and does modify the first argument.","paramDescs":[{"name":"object 1","variadic":false},{"name":"object 2","variadic":false}],"visible":false},{"prefix":"list","name":"copyList","description":"Creates a new list which is a shallow copy of the argument","paramDescs":[{"name":"list of values","variadic":false}],"visible":true},{"prefix":"str","name":"md5","description":"Returns a MD5 hash (byte array) of the given string","paramDescs":[{"name":"string argument or byte array","variadic":false}],"visible":true},{"prefix":"stat","name":"gmean","description":"Returns the geometric mean of a list of values","paramDescs":[{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"math","name":"range","description":"Returns a read-only collection of 32-bit signed integers between a low inclusive and a high exclusive bound","paramDescs":[{"name":"integer argument","variadic":false},{"name":"integer argument","variadic":false}],"visible":true},{"prefix":"math","name":"lrand","description":"Returns a 64-bit long pseudorandomly chosen between the inclusive lower bound and the exclusive upper bound.","paramDescs":[{"name":"inclusive lower bound","variadic":false},{"name":"exclusive upper bound","variadic":false}],"visible":true},{"prefix":"str","name":"rnd10","description":"Returns a random String with base-10 characters","paramDescs":[{"name":"Length of the resulting string","variadic":false}],"visible":true},{"prefix":"math","name":"sin","description":"Returns the trigonometric sine of an angle","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"coll","name":"copyMap","description":"Returns a map which is a shallow copy of the argument","paramDescs":[{"name":"source map","variadic":false}],"visible":true},{"prefix":"time","name":"now","description":"Returns the current time, as milliseconds from the epoch","paramDescs":[],"visible":true},{"prefix":"math","name":"cbrt","description":"Returns the cube root of a value","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"str","name":"fromCode","description":"Converts an integer unicode code point into a string","paramDescs":[{"name":"code point","variadic":false}],"visible":true},{"prefix":"str","name":"len","description":"Returns the length of a string, 0 if null.","paramDescs":[{"name":"string argument","variadic":false}],"visible":true},{"prefix":"str","name":"endsWith","description":"Tests whether a string ends with some other string","paramDescs":[{"name":"containing string","variadic":false},{"name":"test string","variadic":false}],"visible":true},{"prefix":"obj","name":"ref","description":"Return a wrapper for a global map value, held by reference. The returned instance is shared : never modify anything","paramDescs":[{"name":"instance name","variadic":false}],"visible":false},{"prefix":"str","name":"hex","description":"Returns an hex String representation of the given byte array","paramDescs":[{"name":"string argument or byte array","variadic":false}],"visible":true},{"prefix":"str","name":"startsWith","description":"Tests whether a string starts with some other string","paramDescs":[{"name":"containing string","variadic":false},{"name":"test string","variadic":false}],"visible":true},{"prefix":"coll","name":"set","description":"Returns a set based on the given collection","paramDescs":[{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"math","name":"asin","description":"Returns the arc sine of a value","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"math","name":"floor","description":"Returns the largest float that is less than or equal to the argument and is equal to an integer.","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"str","name":"padLeft","description":"Pads a string with the given character on the left. The resulting string will have at least the given minimum length, or the input string length if greater. The input string is left untouched","paramDescs":[{"name":"string argument","variadic":false},{"name":"minimum length","variadic":false},{"name":"character to pad with","variadic":false}],"visible":true},{"prefix":"stat","name":"variance","description":"Returns the variance of a list of values","paramDescs":[{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"str","name":"contains","description":"Tests whether a string contains some other string","paramDescs":[{"name":"containing string","variadic":false},{"name":"test string","variadic":false}],"visible":true},{"prefix":"time","name":"parse","description":"Parses the given string (as formatted by time:fmt) and returns an object suitable for use by other time manipulation functions. The time zone can be specified.","paramDescs":[{"name":"String representation of the time","variadic":false},{"name":"Time Zone (format : GMT+hh:mm)","variadic":false}],"visible":true},{"prefix":"list","name":"first","description":"Returns the first element of a list","paramDescs":[{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"obj","name":"add","description":"Adds two objects. The result is type dependent. The second argument is never modified. Depending on context, the first argument may be modified.","paramDescs":[{"name":"object 1","variadic":false},{"name":"object 2","variadic":false}],"visible":false},{"prefix":"json","name":"parse","description":"Parses input as JSON and returns an object.","paramDescs":[{"name":"JSON input","variadic":false}],"visible":true},{"prefix":"math","name":"ceil","description":"Returns the smallest float that is greater than or equal to the argument and is equal to an integer.","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"obj","name":"assert","description":"Fails with an error when the condition is not true. Message is lazily evaluated by assert if needed.","paramDescs":[{"name":"Condition","variadic":false},{"name":"error code (string)","variadic":false},{"name":"error message","variadic":false}],"visible":false},{"prefix":"math","name":"round","description":"Returns the closest long to the argument, with ties rounding up.","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"str","name":"parseNumber","description":"Parses string input as a number. Returns null if the input cannot be parsed","paramDescs":[{"name":"number as a string","variadic":false}],"visible":true},{"prefix":"obj","name":"array","description":"Creates an array from elements.","paramDescs":[{"name":"Elements","variadic":false}],"visible":false},{"prefix":"str","name":"join","description":"Generates a string from elements and a delimiter.","paramDescs":[{"name":"Delimiter","variadic":false},{"name":"Various elements","variadic":true}],"visible":true},{"prefix":"obj","name":"assert2","description":"Fails with an error when the condition is not true and can produce a developer-supplied context. Message and context are lazily evaluated by assert2 if needed.","paramDescs":[{"name":"Condition","variadic":false},{"name":"error code (string)","variadic":false},{"name":"error message","variadic":false},{"name":"error context (developer-defined)","variadic":false}],"visible":false},{"prefix":"stat","name":"populationVariance","description":"Returns the population variance of a list of values","paramDescs":[{"name":"collection of values","variadic":false}],"visible":true},{"prefix":"math","name":"tanh","description":"Returns the hyperbolic tangent of an angle","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"str","name":"sha1","description":"Returns a SHA-1 hash (byte array) of the given string","paramDescs":[{"name":"string argument or byte array","variadic":false}],"visible":true},{"prefix":"time","name":"moy","description":"Returns the month of year (1 to 12) for the given time","paramDescs":[{"name":"time, as milliseconds from the epoch, or as returned by time:parse","variadic":false}],"visible":true},{"prefix":"str","name":"encodeUrl","description":"URL encodes a UTF8 string","paramDescs":[{"name":"string argument","variadic":false}],"visible":true},{"prefix":"math","name":"tan","description":"Returns the trigonometric tangent of an angle","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"str","name":"padRight","description":"Pads a string with the given character on the right. The resulting string will have at least the given minimum length, or the input string length if greater. The input string is left untouched","paramDescs":[{"name":"string argument","variadic":false},{"name":"minimum length","variadic":false},{"name":"character to pad with","variadic":false}],"visible":true},{"prefix":"obj","name":"type","description":"Return the RTTI for the custom type. Primitive and native objects do not have RTTI. The returned instance is shared : never modify anything","paramDescs":[{"name":"Object","variadic":false}],"visible":false},{"prefix":"str","name":"replace","description":"Returns a String where occurences of a substring are replaced by another string","paramDescs":[{"name":"containing string","variadic":false},{"name":"old string","variadic":false},{"name":"replacement string","variadic":false}],"visible":true},{"prefix":"obj","name":"klassRef","description":"Returns a class definition (MacroTypeDefinition) from a class FQN.","paramDescs":[{"name":"Fully qualified type name","variadic":false}],"visible":false},{"prefix":"obj","name":"instanceOf","description":"Returns whether an object has the given type or supertype.","paramDescs":[{"name":"Object to be tested","variadic":false},{"name":"Fully qualified type name","variadic":false}],"visible":false},{"prefix":"math","name":"fabs","description":"Returns the absolute value of a float","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"math","name":"abs","description":"Returns the absolute value of an integer","paramDescs":[{"name":"integer argument","variadic":false}],"visible":true},{"prefix":"list","name":"add","description":"Adds an element to the end of a list. The existing list is modified if it exists.","paramDescs":[{"name":"collection of values","variadic":false},{"name":"element","variadic":false}],"visible":true},{"prefix":"time","name":"between","description":"Calculates the amount of time between two dates, in the given unit","paramDescs":[{"name":"time, as milliseconds from the epoch, or as returned by time:parse (lower inclusive bound)","variadic":false},{"name":"time, as milliseconds from the epoch, or as returned by time:parse (upper exclusive bound)","variadic":false},{"name":"Time unit. Allowed values are [NANOS, MICROS, MILLIS, SECONDS, MINUTES, HOURS, HALFDAYS, DAYS, WEEKS, MONTHS, YEARS, DECADES, CENTURIES, MILLENNIA, ERAS, FOREVER]","variadic":false}],"visible":true},{"prefix":"math","name":"cos","description":"Returns the trigonometric cosine of an angle","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"math","name":"rand","description":"Returns a pseudorandom (double) floating point value with a positive sign, greater than or equal to 0.0 and less than 1.0.","paramDescs":[],"visible":true},{"prefix":"str","name":"upper","description":"Returns the given string converted to upper case with a server-specific default locale","paramDescs":[{"name":"string argument","variadic":false}],"visible":true},{"prefix":"coll","name":"sub","description":"Returns a collection based on sub-elements","paramDescs":[{"name":"collection of values","variadic":false},{"name":"Path to sub-element","variadic":false}],"visible":true},{"prefix":"math","name":"sqrt","description":"Returns the square root of a value","paramDescs":[{"name":"floating point argument","variadic":false}],"visible":true},{"prefix":"str","name":"isAlpha","description":"Tests whether the given string is alphanumerical","paramDescs":[{"name":"string argument","variadic":false}],"visible":true},{"prefix":"str","name":"b64encodeWithOptions","description":"Encodes the given string to base64","paramDescs":[{"name":"string argument or byte array","variadic":false},{"name":"The wanted RFC compliance, to be chosen amongst [RFC4648, RFC4648_URLSAFE, RFC2045]","variadic":false},{"name":"pass true if you do not want padding, false if you want","variadic":false}],"visible":true},{"prefix":"str","name":"match","description":"Tests whether a string matches a pattern (regex)","paramDescs":[{"name":"regex","variadic":false},{"name":"test string","variadic":false}],"visible":true},{"prefix":"coll","name":"sort","description":"Sorts (in place) a list of values according to a given comparator. A comparator is a function taking two parameters and returning -1, 0 or 1 when param1 is less, equal or greater than param2.","paramDescs":[{"name":"collection of values","variadic":false},{"name":"comparator","variadic":false}],"visible":true},{"prefix":"obj","name":"modify","description":"Modifies 'value' in the given sub-path or index of the given object by applying the given binary function. That binary function(a,b) combines 'a' and 'b'; 'b' is left unmodified. 'a' is modified if possible. The binary function returns the result, which is likely to be a modified 'a'. This function returns the modified value.","paramDescs":[{"name":"Object","variadic":false},{"name":"sub-path","variadic":false},{"name":"value","variadic":false},{"name":"binary function","variadic":false}],"visible":false},{"prefix":"coll","name":"reduce","description":"Reduces elements of a collection according to a accumulator function : a function taking two parameters (partial result, current element) and returning a result for the next iteration","paramDescs":[{"name":"collection of values","variadic":false},{"name":"Accumulator function","variadic":false},{"name":"Initial value","variadic":false}],"visible":true},{"prefix":"obj","name":"bind","description":"Binds the rightmost parameters of a function and returns the new bound function.","paramDescs":[{"name":"target function","variadic":false},{"name":"right bound values","variadic":false}],"visible":false},{"prefix":"coll","name":"test","description":"Creates a collection from an expression. The collection is iterable while the test is true","paramDescs":[{"name":"expression","variadic":false}],"visible":false},{"prefix":"coll","name":"map","description":"Maps a collection to another according to a transformation function. The function takes one input parameter and produces the output.","paramDescs":[{"name":"collection of values","variadic":false},{"name":"unary function","variadic":false}],"visible":true},{"prefix":"obj","name":"lambda","description":"Creates a lambda expression from an expression and a list of variables. Equivalent to the -> operator.","paramDescs":[{"name":"expression","variadic":false},{"name":"variable names","variadic":false}],"visible":false},{"prefix":"coll","name":"toMap","description":"Maps a collection to a map according to two transformation functions (key generation, value generation). The functions take one input parameter and produce one output.","paramDescs":[{"name":"collection of values","variadic":false},{"name":"unary function generating keys","variadic":false},{"name":"unary function generating values","variadic":false}],"visible":true},{"prefix":"obj","name":"modify2","description":"Modifies 'value' in the given sub-path or index of the given object by applying the given binary function. That binary function(a,b) combines 'a' and 'b'; 'b' is left unmodified. 'a' is modified if possible. The binary function returns the result, which is likely to be a modified 'a'. This function returns the old value.","paramDescs":[{"name":"Object","variadic":false},{"name":"sub-path","variadic":false},{"name":"value","variadic":false},{"name":"binary function","variadic":false}],"visible":false},{"prefix":"coll","name":"count","description":"Counts elements of a collection according to a unary predicate. A predicate takes one parameter and returns a boolean","paramDescs":[{"name":"collection of values","variadic":false},{"name":"unary predicate","variadic":false}],"visible":true},{"prefix":"obj","name":"assign","description":"Puts 'value' into the given sub-path or index of the given object.","paramDescs":[{"name":"Object","variadic":false},{"name":"sub-path","variadic":false},{"name":"value","variadic":false}],"visible":false},{"prefix":"obj","name":"gmod","description":"Modifies the given global object by applying the given binary function. That binary function(a,b) combines 'a' and 'b'; 'b' is left unmodified. 'a' is modified if possible. The binary function returns the result, which is likely to be a modified 'a'. This function sets the name to the result and returns the modified value.","paramDescs":[{"name":"variable name","variadic":false},{"name":"value","variadic":false},{"name":"binary function","variadic":false}],"visible":false},{"prefix":"obj","name":"eval","description":"Calls the given function with the given parameters.","paramDescs":[{"name":"function","variadic":false},{"name":"parameters","variadic":false}],"visible":false},{"prefix":"obj","name":"elvis","description":"Evaluates the expression and returns it if it exists and is not null, otherwise evaluates and returns the other expression. Equivalent to the '?:' operator","paramDescs":[{"name":"expression","variadic":false},{"name":"other expression","variadic":false}],"visible":false},{"prefix":"obj","name":"notnull","description":"Evaluates the expression and returns true if it exists and is not null, otherwise returns false. Equivalent to the '??' postfix operator","paramDescs":[{"name":"expression","variadic":false}],"visible":false},{"prefix":"coll","name":"filter","description":"Filters a collection according to a unary predicate. A predicate takes one parameter and returns a boolean","paramDescs":[{"name":"collection of values","variadic":false},{"name":"unary predicate","variadic":false}],"visible":true},{"prefix":"obj","name":"gmod2","description":"Modifies the given global object by applying the given binary function. That binary function(a,b) combines 'a' and 'b'; 'b' is left unmodified. 'a' is modified if possible. The binary function returns the result, which is likely to be a modified 'a'. This function sets the name to the result and returns the old value.","paramDescs":[{"name":"variable name","variadic":false},{"name":"value","variadic":false},{"name":"binary function","variadic":false}],"visible":false},{"prefix":"obj","name":"lmbind","description":"Generates a lambda from a fully qualified function name. You rarely need to use that function manually.","paramDescs":[{"name":"fully qualified function name","variadic":false}],"visible":false}]}